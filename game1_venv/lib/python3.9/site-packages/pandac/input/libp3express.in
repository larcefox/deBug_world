1608632796
3 3
12 libp3express 4 vDgf 12 panda3d.core 
623
636 7 is_null 0 4 1263 22 PointerToVoid::is_null 0 1 16 130
/**
 * Returns true if the PointerTo is a NULL pointer, false otherwise.  (Direct
 * comparison to a NULL pointer also works.)
 */
50
constexpr bool PointerToVoid::is_null(void) const;

637 8 get_hash 0 4 1263 23 PointerToVoid::get_hash 0 1 17 10
/**
 *
 */
55
inline std::size_t PointerToVoid::get_hash(void) const;

638 14 ~PointerToVoid 0 4 1263 29 PointerToVoid::~PointerToVoid 0 0 0
36
PointerToVoid::~PointerToVoid(void);

639 5 clear 0 4 1262 56 PointerToBase< ReferenceCountedVector< double > >::clear 0 1 14 0
75
inline void PointerToBase< ReferenceCountedVector< double > >::clear(void);

640 6 output 0 4 1262 57 PointerToBase< ReferenceCountedVector< double > >::output 0 1 15 0
88
void PointerToBase< ReferenceCountedVector< double > >::output(std::ostream &out) const;

641 19 ~PointerToArrayBase 0 4 1261 49 PointerToArrayBase< double >::~PointerToArrayBase 0 0 0
63
inline PointerToArrayBase< double >::~PointerToArrayBase(void);

642 19 ConstPointerToArray 0 4 1260 50 ConstPointerToArray< double >::ConstPointerToArray 0 2 1 2 0
198
inline ConstPointerToArray< double >::ConstPointerToArray(PointerToArray< double > const &copy);
inline ConstPointerToArray< double >::ConstPointerToArray(ConstPointerToArray< double > const &copy);

643 5 clear 0 4 1260 36 ConstPointerToArray< double >::clear 0 1 3 0
55
inline void ConstPointerToArray< double >::clear(void);

644 4 size 0 4 1260 35 ConstPointerToArray< double >::size 0 1 4 0
73
inline unsigned long int ConstPointerToArray< double >::size(void) const;

645 11 get_element 0 4 1260 42 ConstPointerToArray< double >::get_element 0 1 5 0
91
inline double const &ConstPointerToArray< double >::get_element(unsigned long int n) const;

646 11 __getitem__ 0 4 1260 42 ConstPointerToArray< double >::__getitem__ 0 1 6 0
84
double const &ConstPointerToArray< double >::__getitem__(unsigned long int n) const;

647 8 get_data 0 4 1260 39 ConstPointerToArray< double >::get_data 0 1 7 0
62
PyObject *ConstPointerToArray< double >::get_data(void) const;

648 11 get_subdata 0 4 1260 42 ConstPointerToArray< double >::get_subdata 0 1 8 0
105
PyObject *ConstPointerToArray< double >::get_subdata(unsigned long int n, unsigned long int count) const;

649 13 get_ref_count 0 4 1260 44 ConstPointerToArray< double >::get_ref_count 0 1 9 0
68
inline int ConstPointerToArray< double >::get_ref_count(void) const;

650 18 get_node_ref_count 0 4 1260 49 ConstPointerToArray< double >::get_node_ref_count 0 1 10 0
73
inline int ConstPointerToArray< double >::get_node_ref_count(void) const;

651 5 count 0 4 1260 36 ConstPointerToArray< double >::count 0 1 11 0
84
inline unsigned long int ConstPointerToArray< double >::count(double const &) const;

652 13 __getbuffer__ 0 4 1260 44 ConstPointerToArray< double >::__getbuffer__ 0 1 12 0
99
int ConstPointerToArray< double >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

653 17 __releasebuffer__ 0 4 1260 48 ConstPointerToArray< double >::__releasebuffer__ 0 1 13 0
93
void ConstPointerToArray< double >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

654 20 ~ConstPointerToArray 0 4 1260 51 ConstPointerToArray< double >::~ConstPointerToArray 0 0 0
58
ConstPointerToArray< double >::~ConstPointerToArray(void);

655 5 clear 0 4 1268 55 PointerToBase< ReferenceCountedVector< float > >::clear 0 1 31 0
74
inline void PointerToBase< ReferenceCountedVector< float > >::clear(void);

656 6 output 0 4 1268 56 PointerToBase< ReferenceCountedVector< float > >::output 0 1 32 0
87
void PointerToBase< ReferenceCountedVector< float > >::output(std::ostream &out) const;

657 19 ~PointerToArrayBase 0 4 1267 48 PointerToArrayBase< float >::~PointerToArrayBase 0 0 0
62
inline PointerToArrayBase< float >::~PointerToArrayBase(void);

658 19 ConstPointerToArray 0 4 1266 49 ConstPointerToArray< float >::ConstPointerToArray 0 2 18 19 0
194
inline ConstPointerToArray< float >::ConstPointerToArray(PointerToArray< float > const &copy);
inline ConstPointerToArray< float >::ConstPointerToArray(ConstPointerToArray< float > const &copy);

659 5 clear 0 4 1266 35 ConstPointerToArray< float >::clear 0 1 20 0
54
inline void ConstPointerToArray< float >::clear(void);

660 4 size 0 4 1266 34 ConstPointerToArray< float >::size 0 1 21 0
72
inline unsigned long int ConstPointerToArray< float >::size(void) const;

661 11 get_element 0 4 1266 41 ConstPointerToArray< float >::get_element 0 1 22 0
89
inline float const &ConstPointerToArray< float >::get_element(unsigned long int n) const;

662 11 __getitem__ 0 4 1266 41 ConstPointerToArray< float >::__getitem__ 0 1 23 0
82
float const &ConstPointerToArray< float >::__getitem__(unsigned long int n) const;

663 8 get_data 0 4 1266 38 ConstPointerToArray< float >::get_data 0 1 24 0
61
PyObject *ConstPointerToArray< float >::get_data(void) const;

664 11 get_subdata 0 4 1266 41 ConstPointerToArray< float >::get_subdata 0 1 25 0
104
PyObject *ConstPointerToArray< float >::get_subdata(unsigned long int n, unsigned long int count) const;

665 13 get_ref_count 0 4 1266 43 ConstPointerToArray< float >::get_ref_count 0 1 26 0
67
inline int ConstPointerToArray< float >::get_ref_count(void) const;

666 18 get_node_ref_count 0 4 1266 48 ConstPointerToArray< float >::get_node_ref_count 0 1 27 0
72
inline int ConstPointerToArray< float >::get_node_ref_count(void) const;

667 5 count 0 4 1266 35 ConstPointerToArray< float >::count 0 1 28 0
82
inline unsigned long int ConstPointerToArray< float >::count(float const &) const;

668 13 __getbuffer__ 0 4 1266 43 ConstPointerToArray< float >::__getbuffer__ 0 1 29 0
98
int ConstPointerToArray< float >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

669 17 __releasebuffer__ 0 4 1266 47 ConstPointerToArray< float >::__releasebuffer__ 0 1 30 0
92
void ConstPointerToArray< float >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

670 20 ~ConstPointerToArray 0 4 1266 50 ConstPointerToArray< float >::~ConstPointerToArray 0 0 0
57
ConstPointerToArray< float >::~ConstPointerToArray(void);

671 5 clear 0 4 1272 53 PointerToBase< ReferenceCountedVector< int > >::clear 0 1 46 0
72
inline void PointerToBase< ReferenceCountedVector< int > >::clear(void);

672 6 output 0 4 1272 54 PointerToBase< ReferenceCountedVector< int > >::output 0 1 47 0
85
void PointerToBase< ReferenceCountedVector< int > >::output(std::ostream &out) const;

673 19 ~PointerToArrayBase 0 4 1271 46 PointerToArrayBase< int >::~PointerToArrayBase 0 0 0
60
inline PointerToArrayBase< int >::~PointerToArrayBase(void);

674 19 ConstPointerToArray 0 4 1270 47 ConstPointerToArray< int >::ConstPointerToArray 0 2 33 34 0
186
inline ConstPointerToArray< int >::ConstPointerToArray(PointerToArray< int > const &copy);
inline ConstPointerToArray< int >::ConstPointerToArray(ConstPointerToArray< int > const &copy);

675 5 clear 0 4 1270 33 ConstPointerToArray< int >::clear 0 1 35 0
52
inline void ConstPointerToArray< int >::clear(void);

676 4 size 0 4 1270 32 ConstPointerToArray< int >::size 0 1 36 0
70
inline unsigned long int ConstPointerToArray< int >::size(void) const;

677 11 get_element 0 4 1270 39 ConstPointerToArray< int >::get_element 0 1 37 0
85
inline int const &ConstPointerToArray< int >::get_element(unsigned long int n) const;

678 11 __getitem__ 0 4 1270 39 ConstPointerToArray< int >::__getitem__ 0 1 38 0
78
int const &ConstPointerToArray< int >::__getitem__(unsigned long int n) const;

679 8 get_data 0 4 1270 36 ConstPointerToArray< int >::get_data 0 1 39 0
59
PyObject *ConstPointerToArray< int >::get_data(void) const;

680 11 get_subdata 0 4 1270 39 ConstPointerToArray< int >::get_subdata 0 1 40 0
102
PyObject *ConstPointerToArray< int >::get_subdata(unsigned long int n, unsigned long int count) const;

681 13 get_ref_count 0 4 1270 41 ConstPointerToArray< int >::get_ref_count 0 1 41 0
65
inline int ConstPointerToArray< int >::get_ref_count(void) const;

682 18 get_node_ref_count 0 4 1270 46 ConstPointerToArray< int >::get_node_ref_count 0 1 42 0
70
inline int ConstPointerToArray< int >::get_node_ref_count(void) const;

683 5 count 0 4 1270 33 ConstPointerToArray< int >::count 0 1 43 0
78
inline unsigned long int ConstPointerToArray< int >::count(int const &) const;

684 13 __getbuffer__ 0 4 1270 41 ConstPointerToArray< int >::__getbuffer__ 0 1 44 0
96
int ConstPointerToArray< int >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

685 17 __releasebuffer__ 0 4 1270 45 ConstPointerToArray< int >::__releasebuffer__ 0 1 45 0
90
void ConstPointerToArray< int >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

686 20 ~ConstPointerToArray 0 4 1270 48 ConstPointerToArray< int >::~ConstPointerToArray 0 0 0
55
ConstPointerToArray< int >::~ConstPointerToArray(void);

687 5 clear 0 4 1276 63 PointerToBase< ReferenceCountedVector< unsigned char > >::clear 0 1 61 0
82
inline void PointerToBase< ReferenceCountedVector< unsigned char > >::clear(void);

688 6 output 0 4 1276 64 PointerToBase< ReferenceCountedVector< unsigned char > >::output 0 1 62 0
95
void PointerToBase< ReferenceCountedVector< unsigned char > >::output(std::ostream &out) const;

689 19 ~PointerToArrayBase 0 4 1275 56 PointerToArrayBase< unsigned char >::~PointerToArrayBase 0 0 0
70
inline PointerToArrayBase< unsigned char >::~PointerToArrayBase(void);

690 19 ConstPointerToArray 0 4 1274 57 ConstPointerToArray< unsigned char >::ConstPointerToArray 0 2 48 49 0
226
inline ConstPointerToArray< unsigned char >::ConstPointerToArray(PointerToArray< unsigned char > const &copy);
inline ConstPointerToArray< unsigned char >::ConstPointerToArray(ConstPointerToArray< unsigned char > const &copy);

691 5 clear 0 4 1274 43 ConstPointerToArray< unsigned char >::clear 0 1 50 0
62
inline void ConstPointerToArray< unsigned char >::clear(void);

692 4 size 0 4 1274 42 ConstPointerToArray< unsigned char >::size 0 1 51 0
80
inline unsigned long int ConstPointerToArray< unsigned char >::size(void) const;

693 11 get_element 0 4 1274 49 ConstPointerToArray< unsigned char >::get_element 0 1 52 0
105
inline unsigned char const &ConstPointerToArray< unsigned char >::get_element(unsigned long int n) const;

694 11 __getitem__ 0 4 1274 49 ConstPointerToArray< unsigned char >::__getitem__ 0 1 53 0
98
unsigned char const &ConstPointerToArray< unsigned char >::__getitem__(unsigned long int n) const;

695 8 get_data 0 4 1274 46 ConstPointerToArray< unsigned char >::get_data 0 1 54 0
69
PyObject *ConstPointerToArray< unsigned char >::get_data(void) const;

696 11 get_subdata 0 4 1274 49 ConstPointerToArray< unsigned char >::get_subdata 0 1 55 0
112
PyObject *ConstPointerToArray< unsigned char >::get_subdata(unsigned long int n, unsigned long int count) const;

697 13 get_ref_count 0 4 1274 51 ConstPointerToArray< unsigned char >::get_ref_count 0 1 56 0
75
inline int ConstPointerToArray< unsigned char >::get_ref_count(void) const;

698 18 get_node_ref_count 0 4 1274 56 ConstPointerToArray< unsigned char >::get_node_ref_count 0 1 57 0
80
inline int ConstPointerToArray< unsigned char >::get_node_ref_count(void) const;

699 5 count 0 4 1274 43 ConstPointerToArray< unsigned char >::count 0 1 58 0
98
inline unsigned long int ConstPointerToArray< unsigned char >::count(unsigned char const &) const;

700 13 __getbuffer__ 0 4 1274 51 ConstPointerToArray< unsigned char >::__getbuffer__ 0 1 59 0
106
int ConstPointerToArray< unsigned char >::__getbuffer__(PyObject *self, Py_buffer *view, int flags) const;

701 17 __releasebuffer__ 0 4 1274 55 ConstPointerToArray< unsigned char >::__releasebuffer__ 0 1 60 0
100
void ConstPointerToArray< unsigned char >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

702 20 ~ConstPointerToArray 0 4 1274 58 ConstPointerToArray< unsigned char >::~ConstPointerToArray 0 0 0
65
ConstPointerToArray< unsigned char >::~ConstPointerToArray(void);

703 14 PointerToArray 0 4 1278 40 PointerToArray< double >::PointerToArray 0 3 63 64 65 0
279
inline PointerToArray< double >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((double const *)(0))));
inline PointerToArray< double >::PointerToArray(PointerToArray< double > const &copy);
PointerToArray< double >::PointerToArray(PyObject *self, PyObject *source);

704 11 empty_array 0 4 1278 37 PointerToArray< double >::empty_array 0 1 66 0
166
static inline PointerToArray< double > PointerToArray< double >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((double const *)(0))));

705 5 clear 0 4 1278 31 PointerToArray< double >::clear 0 1 67 0
50
inline void PointerToArray< double >::clear(void);

706 4 size 0 4 1278 30 PointerToArray< double >::size 0 1 68 0
68
inline unsigned long int PointerToArray< double >::size(void) const;

707 9 push_back 0 4 1278 35 PointerToArray< double >::push_back 0 1 69 0
65
inline void PointerToArray< double >::push_back(double const &x);

708 8 pop_back 0 4 1278 34 PointerToArray< double >::pop_back 0 1 70 0
53
inline void PointerToArray< double >::pop_back(void);

709 11 get_element 0 4 1278 37 PointerToArray< double >::get_element 0 1 71 0
86
inline double const &PointerToArray< double >::get_element(unsigned long int n) const;

710 11 set_element 0 4 1278 37 PointerToArray< double >::set_element 0 1 72 0
92
inline void PointerToArray< double >::set_element(unsigned long int n, double const &value);

711 11 __getitem__ 0 4 1278 37 PointerToArray< double >::__getitem__ 0 1 73 0
79
double const &PointerToArray< double >::__getitem__(unsigned long int n) const;

712 11 __setitem__ 0 4 1278 37 PointerToArray< double >::__setitem__ 0 1 74 0
85
void PointerToArray< double >::__setitem__(unsigned long int n, double const &value);

713 8 get_data 0 4 1278 34 PointerToArray< double >::get_data 0 1 75 0
57
PyObject *PointerToArray< double >::get_data(void) const;

714 8 set_data 0 4 1278 34 PointerToArray< double >::set_data 0 1 76 0
56
void PointerToArray< double >::set_data(PyObject *data);

715 11 get_subdata 0 4 1278 37 PointerToArray< double >::get_subdata 0 1 77 0
100
PyObject *PointerToArray< double >::get_subdata(unsigned long int n, unsigned long int count) const;

716 11 set_subdata 0 4 1278 37 PointerToArray< double >::set_subdata 0 1 78 0
135
inline void PointerToArray< double >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

717 13 get_ref_count 0 4 1278 39 PointerToArray< double >::get_ref_count 0 1 79 0
63
inline int PointerToArray< double >::get_ref_count(void) const;

718 18 get_node_ref_count 0 4 1278 44 PointerToArray< double >::get_node_ref_count 0 1 80 0
68
inline int PointerToArray< double >::get_node_ref_count(void) const;

719 5 count 0 4 1278 31 PointerToArray< double >::count 0 1 81 0
79
inline unsigned long int PointerToArray< double >::count(double const &) const;

720 13 __getbuffer__ 0 4 1278 39 PointerToArray< double >::__getbuffer__ 0 1 82 0
88
int PointerToArray< double >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

721 17 __releasebuffer__ 0 4 1278 43 PointerToArray< double >::__releasebuffer__ 0 1 83 0
88
void PointerToArray< double >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

722 15 ~PointerToArray 0 4 1278 41 PointerToArray< double >::~PointerToArray 0 0 0
48
PointerToArray< double >::~PointerToArray(void);

723 14 PointerToArray 0 4 1280 39 PointerToArray< float >::PointerToArray 0 3 84 85 86 0
274
inline PointerToArray< float >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((float const *)(0))));
inline PointerToArray< float >::PointerToArray(PointerToArray< float > const &copy);
PointerToArray< float >::PointerToArray(PyObject *self, PyObject *source);

724 11 empty_array 0 4 1280 36 PointerToArray< float >::empty_array 0 1 87 0
163
static inline PointerToArray< float > PointerToArray< float >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((float const *)(0))));

725 5 clear 0 4 1280 30 PointerToArray< float >::clear 0 1 88 0
49
inline void PointerToArray< float >::clear(void);

726 4 size 0 4 1280 29 PointerToArray< float >::size 0 1 89 0
67
inline unsigned long int PointerToArray< float >::size(void) const;

727 9 push_back 0 4 1280 34 PointerToArray< float >::push_back 0 1 90 0
63
inline void PointerToArray< float >::push_back(float const &x);

728 8 pop_back 0 4 1280 33 PointerToArray< float >::pop_back 0 1 91 0
52
inline void PointerToArray< float >::pop_back(void);

729 11 get_element 0 4 1280 36 PointerToArray< float >::get_element 0 1 92 0
84
inline float const &PointerToArray< float >::get_element(unsigned long int n) const;

730 11 set_element 0 4 1280 36 PointerToArray< float >::set_element 0 1 93 0
90
inline void PointerToArray< float >::set_element(unsigned long int n, float const &value);

731 11 __getitem__ 0 4 1280 36 PointerToArray< float >::__getitem__ 0 1 94 0
77
float const &PointerToArray< float >::__getitem__(unsigned long int n) const;

732 11 __setitem__ 0 4 1280 36 PointerToArray< float >::__setitem__ 0 1 95 0
83
void PointerToArray< float >::__setitem__(unsigned long int n, float const &value);

733 8 get_data 0 4 1280 33 PointerToArray< float >::get_data 0 1 96 0
56
PyObject *PointerToArray< float >::get_data(void) const;

734 8 set_data 0 4 1280 33 PointerToArray< float >::set_data 0 1 97 0
55
void PointerToArray< float >::set_data(PyObject *data);

735 11 get_subdata 0 4 1280 36 PointerToArray< float >::get_subdata 0 1 98 0
99
PyObject *PointerToArray< float >::get_subdata(unsigned long int n, unsigned long int count) const;

736 11 set_subdata 0 4 1280 36 PointerToArray< float >::set_subdata 0 1 99 0
134
inline void PointerToArray< float >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

737 13 get_ref_count 0 4 1280 38 PointerToArray< float >::get_ref_count 0 1 100 0
62
inline int PointerToArray< float >::get_ref_count(void) const;

738 18 get_node_ref_count 0 4 1280 43 PointerToArray< float >::get_node_ref_count 0 1 101 0
67
inline int PointerToArray< float >::get_node_ref_count(void) const;

739 5 count 0 4 1280 30 PointerToArray< float >::count 0 1 102 0
77
inline unsigned long int PointerToArray< float >::count(float const &) const;

740 13 __getbuffer__ 0 4 1280 38 PointerToArray< float >::__getbuffer__ 0 1 103 0
87
int PointerToArray< float >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

741 17 __releasebuffer__ 0 4 1280 42 PointerToArray< float >::__releasebuffer__ 0 1 104 0
87
void PointerToArray< float >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

742 15 ~PointerToArray 0 4 1280 40 PointerToArray< float >::~PointerToArray 0 0 0
47
PointerToArray< float >::~PointerToArray(void);

743 14 PointerToArray 0 4 1282 37 PointerToArray< int >::PointerToArray 0 3 105 106 107 0
264
inline PointerToArray< int >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((int const *)(0))));
inline PointerToArray< int >::PointerToArray(PointerToArray< int > const &copy);
PointerToArray< int >::PointerToArray(PyObject *self, PyObject *source);

744 11 empty_array 0 4 1282 34 PointerToArray< int >::empty_array 0 1 108 0
157
static inline PointerToArray< int > PointerToArray< int >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((int const *)(0))));

745 5 clear 0 4 1282 28 PointerToArray< int >::clear 0 1 109 0
47
inline void PointerToArray< int >::clear(void);

746 4 size 0 4 1282 27 PointerToArray< int >::size 0 1 110 0
65
inline unsigned long int PointerToArray< int >::size(void) const;

747 9 push_back 0 4 1282 32 PointerToArray< int >::push_back 0 1 111 0
59
inline void PointerToArray< int >::push_back(int const &x);

748 8 pop_back 0 4 1282 31 PointerToArray< int >::pop_back 0 1 112 0
50
inline void PointerToArray< int >::pop_back(void);

749 11 get_element 0 4 1282 34 PointerToArray< int >::get_element 0 1 113 0
80
inline int const &PointerToArray< int >::get_element(unsigned long int n) const;

750 11 set_element 0 4 1282 34 PointerToArray< int >::set_element 0 1 114 0
86
inline void PointerToArray< int >::set_element(unsigned long int n, int const &value);

751 11 __getitem__ 0 4 1282 34 PointerToArray< int >::__getitem__ 0 1 115 0
73
int const &PointerToArray< int >::__getitem__(unsigned long int n) const;

752 11 __setitem__ 0 4 1282 34 PointerToArray< int >::__setitem__ 0 1 116 0
79
void PointerToArray< int >::__setitem__(unsigned long int n, int const &value);

753 8 get_data 0 4 1282 31 PointerToArray< int >::get_data 0 1 117 0
54
PyObject *PointerToArray< int >::get_data(void) const;

754 8 set_data 0 4 1282 31 PointerToArray< int >::set_data 0 1 118 0
53
void PointerToArray< int >::set_data(PyObject *data);

755 11 get_subdata 0 4 1282 34 PointerToArray< int >::get_subdata 0 1 119 0
97
PyObject *PointerToArray< int >::get_subdata(unsigned long int n, unsigned long int count) const;

756 11 set_subdata 0 4 1282 34 PointerToArray< int >::set_subdata 0 1 120 0
132
inline void PointerToArray< int >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

757 13 get_ref_count 0 4 1282 36 PointerToArray< int >::get_ref_count 0 1 121 0
60
inline int PointerToArray< int >::get_ref_count(void) const;

758 18 get_node_ref_count 0 4 1282 41 PointerToArray< int >::get_node_ref_count 0 1 122 0
65
inline int PointerToArray< int >::get_node_ref_count(void) const;

759 5 count 0 4 1282 28 PointerToArray< int >::count 0 1 123 0
73
inline unsigned long int PointerToArray< int >::count(int const &) const;

760 13 __getbuffer__ 0 4 1282 36 PointerToArray< int >::__getbuffer__ 0 1 124 0
85
int PointerToArray< int >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

761 17 __releasebuffer__ 0 4 1282 40 PointerToArray< int >::__releasebuffer__ 0 1 125 0
85
void PointerToArray< int >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

762 15 ~PointerToArray 0 4 1282 38 PointerToArray< int >::~PointerToArray 0 0 0
45
PointerToArray< int >::~PointerToArray(void);

763 14 PointerToArray 0 4 1284 47 PointerToArray< unsigned char >::PointerToArray 0 3 126 127 128 0
314
inline PointerToArray< unsigned char >::PointerToArray(TypeHandle type_handle = (::_get_type_handle((unsigned char const *)(0))));
inline PointerToArray< unsigned char >::PointerToArray(PointerToArray< unsigned char > const &copy);
PointerToArray< unsigned char >::PointerToArray(PyObject *self, PyObject *source);

764 11 empty_array 0 4 1284 44 PointerToArray< unsigned char >::empty_array 0 1 129 0
187
static inline PointerToArray< unsigned char > PointerToArray< unsigned char >::empty_array(unsigned long int n, TypeHandle type_handle = (::_get_type_handle((unsigned char const *)(0))));

765 5 clear 0 4 1284 38 PointerToArray< unsigned char >::clear 0 1 130 0
57
inline void PointerToArray< unsigned char >::clear(void);

766 4 size 0 4 1284 37 PointerToArray< unsigned char >::size 0 1 131 0
75
inline unsigned long int PointerToArray< unsigned char >::size(void) const;

767 9 push_back 0 4 1284 42 PointerToArray< unsigned char >::push_back 0 1 132 0
79
inline void PointerToArray< unsigned char >::push_back(unsigned char const &x);

768 8 pop_back 0 4 1284 41 PointerToArray< unsigned char >::pop_back 0 1 133 0
60
inline void PointerToArray< unsigned char >::pop_back(void);

769 11 get_element 0 4 1284 44 PointerToArray< unsigned char >::get_element 0 1 134 0
100
inline unsigned char const &PointerToArray< unsigned char >::get_element(unsigned long int n) const;

770 11 set_element 0 4 1284 44 PointerToArray< unsigned char >::set_element 0 1 135 0
106
inline void PointerToArray< unsigned char >::set_element(unsigned long int n, unsigned char const &value);

771 11 __getitem__ 0 4 1284 44 PointerToArray< unsigned char >::__getitem__ 0 1 136 0
93
unsigned char const &PointerToArray< unsigned char >::__getitem__(unsigned long int n) const;

772 11 __setitem__ 0 4 1284 44 PointerToArray< unsigned char >::__setitem__ 0 1 137 0
99
void PointerToArray< unsigned char >::__setitem__(unsigned long int n, unsigned char const &value);

773 8 get_data 0 4 1284 41 PointerToArray< unsigned char >::get_data 0 1 138 0
64
PyObject *PointerToArray< unsigned char >::get_data(void) const;

774 8 set_data 0 4 1284 41 PointerToArray< unsigned char >::set_data 0 1 139 0
63
void PointerToArray< unsigned char >::set_data(PyObject *data);

775 11 get_subdata 0 4 1284 44 PointerToArray< unsigned char >::get_subdata 0 1 140 0
107
PyObject *PointerToArray< unsigned char >::get_subdata(unsigned long int n, unsigned long int count) const;

776 11 set_subdata 0 4 1284 44 PointerToArray< unsigned char >::set_subdata 0 1 141 0
142
inline void PointerToArray< unsigned char >::set_subdata(unsigned long int n, unsigned long int count, std::basic_string< char > const &data);

777 13 get_ref_count 0 4 1284 46 PointerToArray< unsigned char >::get_ref_count 0 1 142 0
70
inline int PointerToArray< unsigned char >::get_ref_count(void) const;

778 18 get_node_ref_count 0 4 1284 51 PointerToArray< unsigned char >::get_node_ref_count 0 1 143 0
75
inline int PointerToArray< unsigned char >::get_node_ref_count(void) const;

779 5 count 0 4 1284 38 PointerToArray< unsigned char >::count 0 1 144 0
93
inline unsigned long int PointerToArray< unsigned char >::count(unsigned char const &) const;

780 13 __getbuffer__ 0 4 1284 46 PointerToArray< unsigned char >::__getbuffer__ 0 1 145 0
95
int PointerToArray< unsigned char >::__getbuffer__(PyObject *self, Py_buffer *view, int flags);

781 17 __releasebuffer__ 0 4 1284 50 PointerToArray< unsigned char >::__releasebuffer__ 0 1 146 0
95
void PointerToArray< unsigned char >::__releasebuffer__(PyObject *self, Py_buffer *view) const;

782 15 ~PointerToArray 0 4 1284 48 PointerToArray< unsigned char >::~PointerToArray 0 0 0
55
PointerToArray< unsigned char >::~PointerToArray(void);

783 11 is_tracking 0 4 1285 24 MemoryUsage::is_tracking 0 1 148 125
/**
 * Returns true if the MemoryUsage object is currently tracking memory (e.g.
 * track-memory-usage is configured #t).
 */
50
static inline bool MemoryUsage::is_tracking(void);

784 11 is_counting 0 4 1285 24 MemoryUsage::is_counting 0 1 149 168
/**
 * Returns true if the MemoryUsage object is currently at least counting
 * memory (e.g.  this is a Windows debug build), even if it's not fully
 * tracking it.
 */
50
static inline bool MemoryUsage::is_counting(void);

785 20 get_current_cpp_size 0 4 1285 33 MemoryUsage::get_current_cpp_size 0 1 150 136
/**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, not including the memory previously frozen.
 */
66
static inline std::size_t MemoryUsage::get_current_cpp_size(void);

786 18 get_total_cpp_size 0 4 1285 31 MemoryUsage::get_total_cpp_size 0 1 151 132
/**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, including the memory previously frozen.
 */
64
static inline std::size_t MemoryUsage::get_total_cpp_size(void);

787 26 get_panda_heap_single_size 0 4 1285 39 MemoryUsage::get_panda_heap_single_size 0 1 152 119
/**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for individual objects.
 */
72
static inline std::size_t MemoryUsage::get_panda_heap_single_size(void);

788 25 get_panda_heap_array_size 0 4 1285 38 MemoryUsage::get_panda_heap_array_size 0 1 153 107
/**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for arrays.
 */
71
static inline std::size_t MemoryUsage::get_panda_heap_array_size(void);

789 23 get_panda_heap_overhead 0 4 1285 36 MemoryUsage::get_panda_heap_overhead 0 1 154 190
/**
 * Returns the extra bytes allocated from the system that are not immediately
 * used for holding allocated objects.  This can only be determined if
 * ALTERNATIVE_MALLOC is enabled.
 */
69
static inline std::size_t MemoryUsage::get_panda_heap_overhead(void);

790 19 get_panda_mmap_size 0 4 1285 32 MemoryUsage::get_panda_mmap_size 0 1 155 110
/**
 * Returns the total number of bytes allocated from the virtual memory pool
 * from code within Panda.
 */
65
static inline std::size_t MemoryUsage::get_panda_mmap_size(void);

791 17 get_external_size 0 4 1285 30 MemoryUsage::get_external_size 0 1 156 496
/**
 * Returns the total number of bytes of allocated memory in the heap that
 * Panda didn't seem to be responsible for.  This includes a few bytes for
 * very low-level objects (like ConfigVariables) that cannot use Panda memory
 * tracking because they are so very low-level.
 *
 * This also includes all of the memory that might have been allocated by a
 * high-level interpreter, like Python.
 *
 * This number is only available if Panda is able to hook into the actual heap
 * callback.
 */
63
static inline std::size_t MemoryUsage::get_external_size(void);

792 14 get_total_size 0 4 1285 27 MemoryUsage::get_total_size 0 1 157 113
/**
 * Returns the total size of allocated memory consumed by the process, as
 * nearly as can be determined.
 */
60
static inline std::size_t MemoryUsage::get_total_size(void);

793 16 get_num_pointers 0 4 1285 29 MemoryUsage::get_num_pointers 0 1 158 59
/**
 * Returns the number of pointers currently active.
 */
54
static inline int MemoryUsage::get_num_pointers(void);

794 12 get_pointers 0 4 1285 25 MemoryUsage::get_pointers 0 1 159 100
/**
 * Fills the indicated MemoryUsagePointers with the set of all pointers
 * currently active.
 */
74
static inline void MemoryUsage::get_pointers(MemoryUsagePointers &result);

795 20 get_pointers_of_type 0 4 1285 33 MemoryUsage::get_pointers_of_type 0 1 160 122
/**
 * Fills the indicated MemoryUsagePointers with the set of all pointers of the
 * indicated type currently active.
 */
99
static inline void MemoryUsage::get_pointers_of_type(MemoryUsagePointers &result, TypeHandle type);

796 19 get_pointers_of_age 0 4 1285 32 MemoryUsage::get_pointers_of_age 0 1 161 159
/**
 * Fills the indicated MemoryUsagePointers with the set of all pointers that
 * were allocated within the range of the indicated number of seconds ago.
 */
105
static inline void MemoryUsage::get_pointers_of_age(MemoryUsagePointers &result, double from, double to);

797 28 get_pointers_with_zero_count 0 4 1285 41 MemoryUsage::get_pointers_with_zero_count 0 1 162 852
/**
 * Fills the indicated MemoryUsagePointers with the set of all currently
 * active pointers (that is, pointers allocated since the last call to
 * freeze(), and not yet freed) that have a zero reference count.
 *
 * Generally, an undeleted pointer with a zero reference count means its
 * reference count has never been incremented beyond zero (since once it has
 * been incremented, the only way it can return to zero would free the
 * pointer).  This may include objects that are allocated statically or on the
 * stack, which are never intended to be deleted.  Or, it might represent a
 * programmer or compiler error.
 *
 * This function has the side-effect of incrementing each of their reference
 * counts by one, thus preventing them from ever being freed--but since they
 * hadn't been freed anyway, probably no additional harm is done.
 */
90
static inline void MemoryUsage::get_pointers_with_zero_count(MemoryUsagePointers &result);

798 6 freeze 0 4 1285 19 MemoryUsage::freeze 0 1 163 285
/**
 * 'Freezes' all pointers currently stored so that they are no longer
 * reported; only newly allocate pointers from this point on will appear in
 * future information requests.  This makes it easier to differentiate between
 * continuous leaks and one-time memory allocations.
 */
45
static inline void MemoryUsage::freeze(void);

799 18 show_current_types 0 4 1285 31 MemoryUsage::show_current_types 0 1 164 70
/**
 * Shows the breakdown of types of all of the active pointers.
 */
57
static inline void MemoryUsage::show_current_types(void);

800 16 show_trend_types 0 4 1285 29 MemoryUsage::show_trend_types 0 1 165 118
/**
 * Shows the breakdown of types of all of the pointers allocated and freed
 * since the last call to freeze().
 */
55
static inline void MemoryUsage::show_trend_types(void);

801 17 show_current_ages 0 4 1285 30 MemoryUsage::show_current_ages 0 1 166 69
/**
 * Shows the breakdown of ages of all of the active pointers.
 */
56
static inline void MemoryUsage::show_current_ages(void);

802 15 show_trend_ages 0 4 1285 28 MemoryUsage::show_trend_ages 0 1 167 117
/**
 * Shows the breakdown of ages of all of the pointers allocated and freed
 * since the last call to freeze().
 */
54
static inline void MemoryUsage::show_trend_ages(void);

803 11 MemoryUsage 0 4 1285 24 MemoryUsage::MemoryUsage 0 1 147 10
/**
 *
 */
63
inline MemoryUsage::MemoryUsage(MemoryUsage const &) = default;

804 12 ~MemoryUsage 0 4 1285 25 MemoryUsage::~MemoryUsage 0 0 0
32
MemoryUsage::~MemoryUsage(void);

805 20 upcast_to_MemoryBase 0 12 1290 36 ReferenceCount::upcast_to_MemoryBase 0 1 174 40
upcast from ReferenceCount to MemoryBase
55
MemoryBase *ReferenceCount::upcast_to_MemoryBase(void);

806 26 downcast_to_ReferenceCount 0 12 1264 38 MemoryBase::downcast_to_ReferenceCount 0 0 42
downcast from MemoryBase to ReferenceCount
61
ReferenceCount *MemoryBase::downcast_to_ReferenceCount(void);

807 15 ~ReferenceCount 0 6 1290 31 ReferenceCount::~ReferenceCount 0 0 10
/**
 *
 */
53
virtual inline ReferenceCount::~ReferenceCount(void);

808 13 get_ref_count 0 4 1290 29 ReferenceCount::get_ref_count 0 1 168 47
/**
 * Returns the current reference count.
 */
53
inline int ReferenceCount::get_ref_count(void) const;

809 3 ref 0 4 1290 19 ReferenceCount::ref 0 1 169 538
/**
 * Explicitly increments the reference count.  User code should avoid using
 * ref() and unref() directly, which can result in missed reference counts.
 * Instead, let a PointerTo object manage the reference counting
 * automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */
44
inline void ReferenceCount::ref(void) const;

810 5 unref 0 6 1290 21 ReferenceCount::unref 0 1 170 865
/**
 * Explicitly decrements the reference count.  Note that the object will not
 * be implicitly deleted by unref() simply because the reference count drops
 * to zero.  (Having a member function delete itself is problematic.) However,
 * see the helper function unref_delete().
 *
 * User code should avoid using ref() and unref() directly, which can result
 * in missed reference counts.  Instead, let a PointerTo object manage the
 * reference counting automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
54
virtual inline bool ReferenceCount::unref(void) const;

811 24 test_ref_count_integrity 0 4 1290 40 ReferenceCount::test_ref_count_integrity 0 1 171 135
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.  Returns true if ok, false otherwise.
 */
65
inline bool ReferenceCount::test_ref_count_integrity(void) const;

812 22 test_ref_count_nonzero 0 4 1290 38 ReferenceCount::test_ref_count_nonzero 0 1 172 144
/**
 * Does some easy checks to make sure that the reference count isn't zero, or
 * completely bogus.  Returns true if ok, false otherwise.
 */
63
inline bool ReferenceCount::test_ref_count_nonzero(void) const;

813 14 get_class_type 0 4 1290 30 ReferenceCount::get_class_type 0 1 173 0
55
static TypeHandle ReferenceCount::get_class_type(void);

814 10 get_length 0 4 1292 18 Buffer::get_length 0 1 176 10
/**
 *
 */
42
inline int Buffer::get_length(void) const;

815 6 Buffer 0 4 1292 14 Buffer::Buffer 0 1 175 10
/**
 *
 */
48
inline Buffer::Buffer(Buffer const &) = default;

816 15 compress_string 0 1 0 15 compress_string 0 1 618 0
78
std::string compress_string(std::string const &source, int compression_level);

817 17 decompress_string 0 1 0 17 decompress_string 0 1 619 0
57
std::string decompress_string(std::string const &source);

818 13 compress_file 0 1 0 13 compress_file 0 1 620 0
88
bool compress_file(Filename const &source, Filename const &dest, int compression_level);

819 15 decompress_file 0 1 0 15 decompress_file 0 1 621 0
67
bool decompress_file(Filename const &source, Filename const &dest);

820 15 compress_stream 0 1 0 15 compress_stream 0 1 622 0
86
bool compress_stream(std::istream &source, std::ostream &dest, int compression_level);

821 17 decompress_stream 0 1 0 17 decompress_stream 0 1 623 0
65
bool decompress_stream(std::istream &source, std::ostream &dest);

822 11 copy_stream 0 1 0 11 copy_stream 0 1 624 0
59
bool copy_stream(std::istream &source, std::ostream &dest);

823 9 add_level 0 6 1293 36 PStatCollectorForwardBase::add_level 0 1 177 0
68
virtual void PStatCollectorForwardBase::add_level(double level) = 0;

824 18 get_node_ref_count 0 4 1294 38 NodeReferenceCount::get_node_ref_count 0 1 178 47
/**
 * Returns the current reference count.
 */
62
inline int NodeReferenceCount::get_node_ref_count(void) const;

825 8 node_ref 0 4 1294 28 NodeReferenceCount::node_ref 0 1 179 107
/**
 * Explicitly increments the node reference count and the normal reference
 * count simultaneously.
 */
53
inline void NodeReferenceCount::node_ref(void) const;

826 10 node_unref 0 4 1294 30 NodeReferenceCount::node_unref 0 1 180 201
/**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */
55
inline bool NodeReferenceCount::node_unref(void) const;

827 24 test_ref_count_integrity 0 4 1294 44 NodeReferenceCount::test_ref_count_integrity 0 1 181 97
/**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */
69
inline bool NodeReferenceCount::test_ref_count_integrity(void) const;

828 15 node_unref_only 0 4 1294 35 NodeReferenceCount::node_unref_only 0 1 182 186
/**
 * Decrements the node reference count without affecting the normal reference
 * count.  Intended to be called by derived classes only, presumably to
 * reimplement node_unref().
 */
60
inline void NodeReferenceCount::node_unref_only(void) const;

829 14 get_class_type 0 4 1294 34 NodeReferenceCount::get_class_type 0 1 183 0
59
static TypeHandle NodeReferenceCount::get_class_type(void);

830 8 Datagram 0 4 1295 18 Datagram::Datagram 0 4 184 185 186 187 130
/**
 * Constructs a datagram from an existing block of data.
 */

/**
 * Constructs a datagram from an existing block of data.
 */
268
inline Datagram::Datagram(void) = default;
inline Datagram::Datagram(void const *data, std::size_t size);
inline explicit Datagram::Datagram(vector_uchar data);
Datagram::Datagram(Datagram const &copy) = default;
Datagram::Datagram(Datagram &&from) noexcept = default;

831 10 operator = 0 4 1295 20 Datagram::operator = 0 2 188 189 0
121
void Datagram::operator =(Datagram const &copy) = default;
void Datagram::operator =(Datagram &&from) noexcept = default;

832 5 clear 0 6 1295 15 Datagram::clear 0 1 190 90
/**
 * Resets the datagram to empty, in preparation for building up a new
 * datagram.
 */
35
virtual void Datagram::clear(void);

833 8 dump_hex 0 4 1295 18 Datagram::dump_hex 0 1 191 111
/**
 * Writes a representation of the entire datagram contents, as a sequence of
 * hex (and ASCII) values.
 */
74
void Datagram::dump_hex(std::ostream &out, unsigned int indent = 0) const;

834 8 add_bool 0 4 1295 18 Datagram::add_bool 0 1 192 48
/**
 * Adds a boolean value to the datagram.
 */
43
inline void Datagram::add_bool(bool value);

835 8 add_int8 0 4 1295 18 Datagram::add_int8 0 1 193 55
/**
 * Adds a signed 8-bit integer to the datagram.
 */
45
inline void Datagram::add_int8(int8_t value);

836 9 add_uint8 0 4 1295 19 Datagram::add_uint8 0 1 194 58
/**
 * Adds an unsigned 8-bit integer to the datagram.
 */
47
inline void Datagram::add_uint8(uint8_t value);

837 9 add_int16 0 4 1295 19 Datagram::add_int16 0 1 195 106
// The default numeric packing is little-endian.

/**
 * Adds a signed 16-bit integer to the datagram.
 */
47
inline void Datagram::add_int16(int16_t value);

838 9 add_int32 0 4 1295 19 Datagram::add_int32 0 1 196 56
/**
 * Adds a signed 32-bit integer to the datagram.
 */
47
inline void Datagram::add_int32(int32_t value);

839 9 add_int64 0 4 1295 19 Datagram::add_int64 0 1 197 56
/**
 * Adds a signed 64-bit integer to the datagram.
 */
47
inline void Datagram::add_int64(int64_t value);

840 10 add_uint16 0 4 1295 20 Datagram::add_uint16 0 1 198 59
/**
 * Adds an unsigned 16-bit integer to the datagram.
 */
49
inline void Datagram::add_uint16(uint16_t value);

841 10 add_uint32 0 4 1295 20 Datagram::add_uint32 0 1 199 59
/**
 * Adds an unsigned 32-bit integer to the datagram.
 */
49
inline void Datagram::add_uint32(uint32_t value);

842 10 add_uint64 0 4 1295 20 Datagram::add_uint64 0 1 200 59
/**
 * Adds an unsigned 64-bit integer to the datagram.
 */
49
inline void Datagram::add_uint64(uint64_t value);

843 11 add_float32 0 4 1295 21 Datagram::add_float32 0 1 201 197
/**
 * Adds a 32-bit single-precision floating-point number to the datagram.
 * Since this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */
52
inline void Datagram::add_float32(PN_float32 value);

844 11 add_float64 0 4 1295 21 Datagram::add_float64 0 1 202 63
/**
 * Adds a 64-bit floating-point number to the datagram.
 */
52
inline void Datagram::add_float64(PN_float64 value);

845 12 add_stdfloat 0 4 1295 22 Datagram::add_stdfloat 0 1 203 105
/**
 * Adds either a 32-bit or a 64-bit floating-point number, according to
 * set_stdfloat_double().
 */
54
inline void Datagram::add_stdfloat(PN_stdfloat value);

846 12 add_be_int16 0 4 1295 22 Datagram::add_be_int16 0 1 204 136
// These functions pack numbers big-endian, in case that's desired.

/**
 * Adds a signed 16-bit big-endian integer to the datagram.
 */
50
inline void Datagram::add_be_int16(int16_t value);

847 12 add_be_int32 0 4 1295 22 Datagram::add_be_int32 0 1 205 67
/**
 * Adds a signed 32-bit big-endian integer to the datagram.
 */
50
inline void Datagram::add_be_int32(int32_t value);

848 12 add_be_int64 0 4 1295 22 Datagram::add_be_int64 0 1 206 67
/**
 * Adds a signed 64-bit big-endian integer to the datagram.
 */
50
inline void Datagram::add_be_int64(int64_t value);

849 13 add_be_uint16 0 4 1295 23 Datagram::add_be_uint16 0 1 207 70
/**
 * Adds an unsigned 16-bit big-endian integer to the datagram.
 */
52
inline void Datagram::add_be_uint16(uint16_t value);

850 13 add_be_uint32 0 4 1295 23 Datagram::add_be_uint32 0 1 208 70
/**
 * Adds an unsigned 32-bit big-endian integer to the datagram.
 */
52
inline void Datagram::add_be_uint32(uint32_t value);

851 13 add_be_uint64 0 4 1295 23 Datagram::add_be_uint64 0 1 209 70
/**
 * Adds an unsigned 64-bit big-endian integer to the datagram.
 */
52
inline void Datagram::add_be_uint64(uint64_t value);

852 14 add_be_float32 0 4 1295 24 Datagram::add_be_float32 0 1 210 94
/**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * datagram.
 */
55
inline void Datagram::add_be_float32(PN_float32 value);

853 14 add_be_float64 0 4 1295 24 Datagram::add_be_float64 0 1 211 74
/**
 * Adds a 64-bit big-endian floating-point number to the datagram.
 */
55
inline void Datagram::add_be_float64(PN_float64 value);

854 10 add_string 0 4 1295 20 Datagram::add_string 0 1 212 109
/**
 * Adds a variable-length string to the datagram.  This actually adds a count
 * followed by n bytes.
 */
57
inline void Datagram::add_string(std::string const &str);

855 12 add_string32 0 4 1295 22 Datagram::add_string32 0 1 213 116
/**
 * Adds a variable-length string to the datagram, using a 32-bit length field
 * to allow very long strings.
 */
59
inline void Datagram::add_string32(std::string const &str);

856 12 add_z_string 0 4 1295 22 Datagram::add_z_string 0 1 214 86
/**
 * Adds a variable-length string to the datagram, as a NULL-terminated string.
 */
59
inline void Datagram::add_z_string(std::string const &str);

857 16 add_fixed_string 0 4 1295 26 Datagram::add_fixed_string 0 1 215 238
/**
 * Adds a fixed-length string to the datagram.  If the string given is less
 * than the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */
81
inline void Datagram::add_fixed_string(std::string const &str, std::size_t size);

858 11 add_wstring 0 4 1295 21 Datagram::add_wstring 0 1 216 58
/**
 * Adds a variable-length wstring to the datagram.
 */
52
void Datagram::add_wstring(std::wstring const &str);

859 8 add_blob 0 4 1295 18 Datagram::add_blob 0 1 217 114
/**
 * Adds a variable-length binary blob to the datagram.  This actually adds a
 * count followed by n bytes.
 */
53
inline void Datagram::add_blob(vector_uchar const &);

860 10 add_blob32 0 4 1295 20 Datagram::add_blob32 0 1 218 119
/**
 * Adds a variable-length binary blob to the datagram, using a 32-bit length
 * field to allow very long blobs.
 */
55
inline void Datagram::add_blob32(vector_uchar const &);

861 9 pad_bytes 0 4 1295 19 Datagram::pad_bytes 0 1 219 67
/**
 * Adds the indicated number of zero bytes to the datagram.
 */
43
void Datagram::pad_bytes(std::size_t size);

862 11 append_data 0 4 1295 21 Datagram::append_data 0 1 220 132
/**
 * Appends some more raw data to the end of the datagram.
 */

/**
 * Appends some more raw data to the end of the datagram.
 */
124
void Datagram::append_data(void const *data, std::size_t size);
inline void Datagram::append_data(vector_uchar const &data);

863 11 get_message 0 4 1295 21 Datagram::get_message 0 1 221 51
/**
 * Returns the datagram's data as a string.
 */
51
inline PyObject *Datagram::get_message(void) const;

864 9 __bytes__ 0 4 1295 19 Datagram::__bytes__ 0 1 222 0
49
inline PyObject *Datagram::__bytes__(void) const;

865 10 __reduce__ 0 4 1295 20 Datagram::__reduce__ 0 1 223 0
43
PyObject *Datagram::__reduce__(void) const;

866 10 get_length 0 4 1295 20 Datagram::get_length 0 1 224 55
/**
 * Returns the number of bytes in the datagram.
 */
52
inline std::size_t Datagram::get_length(void) const;

867 9 set_array 0 4 1295 19 Datagram::set_array 0 1 225 199
/**
 * Replaces the data in the Datagram with the data in the indicated PTA_uchar.
 * This is assignment by reference: subsequent changes to the Datagram will
 * also change the source PTA_uchar.
 */
48
inline void Datagram::set_array(PTA_uchar data);

868 10 copy_array 0 4 1295 20 Datagram::copy_array 0 1 226 237
/**
 * Replaces the data in the Datagram with a copy of the data in the indicated
 * CPTA_uchar.  Unlike set_array(), a complete copy is made of the data;
 * subsequent changes to the Datagram will *not* change the source CPTA_uchar.
 */
50
inline void Datagram::copy_array(CPTA_uchar data);

869 9 get_array 0 4 1295 19 Datagram::get_array 0 1 227 70
/**
 * Returns a const pointer to the actual data in the Datagram.
 */
50
inline CPTA_uchar Datagram::get_array(void) const;

870 12 modify_array 0 4 1295 22 Datagram::modify_array 0 1 228 75
/**
 * Returns a modifiable pointer to the actual data in the Datagram.
 */
46
inline PTA_uchar Datagram::modify_array(void);

871 19 set_stdfloat_double 0 4 1295 29 Datagram::set_stdfloat_double 0 1 229 343
/**
 * Changes the stdfloat_double flag, which defines the operation performed by
 * add_stdfloat() and DatagramIterator::get_stdfloat().  When this is true,
 * add_stdfloat() adds a 64-bit floating-point number; when it is false, it
 * adds a 32-bit floating-point number.  The default is based on the
 * STDFLOAT_DOUBLE compilation flag.
 */
64
inline void Datagram::set_stdfloat_double(bool stdfloat_double);

872 19 get_stdfloat_double 0 4 1295 29 Datagram::get_stdfloat_double 0 1 230 72
/**
 * Returns the stdfloat_double flag.  See set_stdfloat_double().
 */
54
inline bool Datagram::get_stdfloat_double(void) const;

873 11 operator == 0 4 1295 21 Datagram::operator == 0 1 231 0
63
inline bool Datagram::operator ==(Datagram const &other) const;

874 11 operator != 0 4 1295 21 Datagram::operator != 0 1 232 0
63
inline bool Datagram::operator !=(Datagram const &other) const;

875 10 operator < 0 4 1295 20 Datagram::operator < 0 1 233 0
62
inline bool Datagram::operator <(Datagram const &other) const;

876 6 output 0 4 1295 16 Datagram::output 0 1 234 67
/**
 * Write a string representation of this instance to <out>.
 */
47
void Datagram::output(std::ostream &out) const;

877 5 write 0 4 1295 15 Datagram::write 0 1 235 67
/**
 * Write a string representation of this instance to <out>.
 */
71
void Datagram::write(std::ostream &out, unsigned int indent = 0) const;

878 14 get_class_type 0 4 1295 24 Datagram::get_class_type 0 1 236 0
49
static TypeHandle Datagram::get_class_type(void);

879 18 ~DatagramGenerator 0 6 1297 37 DatagramGenerator::~DatagramGenerator 0 0 82
/**
 * Does nothing since this is class is just the definition of an interface
 */
52
virtual DatagramGenerator::~DatagramGenerator(void);

880 12 get_datagram 0 6 1297 31 DatagramGenerator::get_datagram 0 1 237 0
65
virtual bool DatagramGenerator::get_datagram(Datagram &data) = 0;

881 13 save_datagram 0 6 1297 32 DatagramGenerator::save_datagram 0 1 238 391
/**
 * Skips over the next datagram without extracting it, but saves the relevant
 * file information in the SubfileInfo object so that its data may be read
 * later.  For non-file-based datagram generators, this may mean creating a
 * temporary file and copying the contents of the datagram to disk.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.
 */
65
virtual bool DatagramGenerator::save_datagram(SubfileInfo &info);

882 6 is_eof 0 6 1297 25 DatagramGenerator::is_eof 0 1 239 0
49
virtual bool DatagramGenerator::is_eof(void) = 0;

883 8 is_error 0 6 1297 27 DatagramGenerator::is_error 0 1 240 0
51
virtual bool DatagramGenerator::is_error(void) = 0;

884 12 get_filename 0 6 1297 31 DatagramGenerator::get_filename 0 1 241 159
/**
 * Returns the filename that provides the source for these datagrams, if any,
 * or empty string if the datagrams do not originate from a file on disk.
 */
62
virtual Filename const &DatagramGenerator::get_filename(void);

885 13 get_timestamp 0 6 1297 32 DatagramGenerator::get_timestamp 0 1 242 138
/**
 * Returns the on-disk timestamp of the file that was read, at the time it was
 * opened, if that is available, or 0 if it is not.
 */
60
virtual time_t DatagramGenerator::get_timestamp(void) const;

886 8 get_file 0 6 1297 27 DatagramGenerator::get_file 0 1 243 156
/**
 * Returns the FileReference that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a file on disk.
 */
63
virtual FileReference const *DatagramGenerator::get_file(void);

887 9 get_vfile 0 6 1297 28 DatagramGenerator::get_vfile 0 1 244 153
/**
 * Returns the VirtualFile that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a VirtualFile.
 */
56
virtual VirtualFile *DatagramGenerator::get_vfile(void);

888 12 get_file_pos 0 6 1297 31 DatagramGenerator::get_file_pos 0 1 245 327
/**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramGenerators that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * get_datagram().
 */
61
virtual std::streamoff DatagramGenerator::get_file_pos(void);

889 16 DatagramIterator 0 4 1298 34 DatagramIterator::DatagramIterator 0 3 246 247 248 22
/**
 *
 */

/**
 *
 */
220
inline DatagramIterator::DatagramIterator(void);
inline DatagramIterator::DatagramIterator(Datagram const &datagram, std::size_t offset = 0);
inline DatagramIterator::DatagramIterator(DatagramIterator const &) = default;

890 8 get_bool 0 4 1298 26 DatagramIterator::get_bool 0 1 249 36
/**
 * Extracts a boolean value.
 */
45
inline bool DatagramIterator::get_bool(void);

891 8 get_int8 0 4 1298 26 DatagramIterator::get_int8 0 1 250 43
/**
 * Extracts a signed 8-bit integer.
 */
47
inline int8_t DatagramIterator::get_int8(void);

892 9 get_uint8 0 4 1298 27 DatagramIterator::get_uint8 0 1 251 46
/**
 * Extracts an unsigned 8-bit integer.
 */
49
inline uint8_t DatagramIterator::get_uint8(void);

893 9 get_int16 0 4 1298 27 DatagramIterator::get_int16 0 1 252 44
/**
 * Extracts a signed 16-bit integer.
 */
49
inline int16_t DatagramIterator::get_int16(void);

894 9 get_int32 0 4 1298 27 DatagramIterator::get_int32 0 1 253 44
/**
 * Extracts a signed 32-bit integer.
 */
49
inline int32_t DatagramIterator::get_int32(void);

895 9 get_int64 0 4 1298 27 DatagramIterator::get_int64 0 1 254 44
/**
 * Extracts a signed 64-bit integer.
 */
49
inline int64_t DatagramIterator::get_int64(void);

896 10 get_uint16 0 4 1298 28 DatagramIterator::get_uint16 0 1 255 47
/**
 * Extracts an unsigned 16-bit integer.
 */
51
inline uint16_t DatagramIterator::get_uint16(void);

897 10 get_uint32 0 4 1298 28 DatagramIterator::get_uint32 0 1 256 47
/**
 * Extracts an unsigned 32-bit integer.
 */
51
inline uint32_t DatagramIterator::get_uint32(void);

898 10 get_uint64 0 4 1298 28 DatagramIterator::get_uint64 0 1 257 47
/**
 * Extracts an unsigned 64-bit integer.
 */
51
inline uint64_t DatagramIterator::get_uint64(void);

899 11 get_float32 0 4 1298 29 DatagramIterator::get_float32 0 1 258 68
/**
 * Extracts a 32-bit single-precision floating-point number.
 */
54
inline PN_float32 DatagramIterator::get_float32(void);

900 11 get_float64 0 4 1298 29 DatagramIterator::get_float64 0 1 259 51
/**
 * Extracts a 64-bit floating-point number.
 */
54
inline PN_float64 DatagramIterator::get_float64(void);

901 12 get_stdfloat 0 4 1298 30 DatagramIterator::get_stdfloat 0 1 260 119
/**
 * Extracts either a 32-bit or a 64-bit floating-point number, according to
 * Datagram::set_stdfloat_double().
 */
56
inline PN_stdfloat DatagramIterator::get_stdfloat(void);

902 12 get_be_int16 0 4 1298 30 DatagramIterator::get_be_int16 0 1 261 55
/**
 * Extracts a signed 16-bit big-endian integer.
 */
52
inline int16_t DatagramIterator::get_be_int16(void);

903 12 get_be_int32 0 4 1298 30 DatagramIterator::get_be_int32 0 1 262 55
/**
 * Extracts a signed 32-bit big-endian integer.
 */
52
inline int32_t DatagramIterator::get_be_int32(void);

904 12 get_be_int64 0 4 1298 30 DatagramIterator::get_be_int64 0 1 263 55
/**
 * Extracts a signed 64-bit big-endian integer.
 */
52
inline int64_t DatagramIterator::get_be_int64(void);

905 13 get_be_uint16 0 4 1298 31 DatagramIterator::get_be_uint16 0 1 264 58
/**
 * Extracts an unsigned 16-bit big-endian integer.
 */
54
inline uint16_t DatagramIterator::get_be_uint16(void);

906 13 get_be_uint32 0 4 1298 31 DatagramIterator::get_be_uint32 0 1 265 58
/**
 * Extracts an unsigned 32-bit big-endian integer.
 */
54
inline uint32_t DatagramIterator::get_be_uint32(void);

907 13 get_be_uint64 0 4 1298 31 DatagramIterator::get_be_uint64 0 1 266 58
/**
 * Extracts an unsigned 64-bit big-endian integer.
 */
54
inline uint64_t DatagramIterator::get_be_uint64(void);

908 14 get_be_float32 0 4 1298 32 DatagramIterator::get_be_float32 0 1 267 79
/**
 * Extracts a 32-bit big-endian single-precision floating-point number.
 */
57
inline PN_float32 DatagramIterator::get_be_float32(void);

909 14 get_be_float64 0 4 1298 32 DatagramIterator::get_be_float64 0 1 268 62
/**
 * Extracts a 64-bit big-endian floating-point number.
 */
57
inline PN_float64 DatagramIterator::get_be_float64(void);

910 10 get_string 0 4 1298 28 DatagramIterator::get_string 0 1 269 45
/**
 * Extracts a variable-length string.
 */
47
std::string DatagramIterator::get_string(void);

911 12 get_string32 0 4 1298 30 DatagramIterator::get_string32 0 1 270 72
/**
 * Extracts a variable-length string with a 32-bit length field.
 */
49
std::string DatagramIterator::get_string32(void);

912 12 get_z_string 0 4 1298 30 DatagramIterator::get_z_string 0 1 271 74
/**
 * Extracts a variable-length string, as a NULL-terminated string.
 */
49
std::string DatagramIterator::get_z_string(void);

913 16 get_fixed_string 0 4 1298 34 DatagramIterator::get_fixed_string 0 1 272 128
/**
 * Extracts a fixed-length string.  However, if a zero byte occurs within the
 * string, it marks the end of the string.
 */
65
std::string DatagramIterator::get_fixed_string(std::size_t size);

914 11 get_wstring 0 4 1298 29 DatagramIterator::get_wstring 0 1 273 75
/**
 * Extracts a variable-length wstring (with a 32-bit length field).
 */
49
std::wstring DatagramIterator::get_wstring(void);

915 8 get_blob 0 4 1298 26 DatagramIterator::get_blob 0 1 274 50
/**
 * Extracts a variable-length binary blob.
 */
53
inline vector_uchar DatagramIterator::get_blob(void);

916 10 get_blob32 0 4 1298 28 DatagramIterator::get_blob32 0 1 275 75
/**
 * Extracts a variable-length binary blob with a 32-bit size field.
 */
55
inline vector_uchar DatagramIterator::get_blob32(void);

917 10 skip_bytes 0 4 1298 28 DatagramIterator::skip_bytes 0 1 276 68
/**
 * Skips over the indicated number of bytes in the datagram.
 */
59
inline void DatagramIterator::skip_bytes(std::size_t size);

918 13 extract_bytes 0 4 1298 31 DatagramIterator::extract_bytes 0 1 277 346
/**
 * Extracts the indicated number of bytes in the datagram and returns them as
 * a string.
 */

/**
 * Extracts the indicated number of bytes in the datagram into the given
 * character buffer.  Assumes that the buffer is big enough to hold the
 * requested number of bytes.  Returns the number of bytes that were
 * successfully written.
 */
147
vector_uchar DatagramIterator::extract_bytes(std::size_t size);
std::size_t DatagramIterator::extract_bytes(unsigned char *into, std::size_t size);

919 19 get_remaining_bytes 0 4 1298 37 DatagramIterator::get_remaining_bytes 0 1 278 115
/**
 * Returns the remaining bytes in the datagram as a string, but does not
 * extract them from the iterator.
 */
70
inline vector_uchar DatagramIterator::get_remaining_bytes(void) const;

920 18 get_remaining_size 0 4 1298 36 DatagramIterator::get_remaining_size 0 1 279 49
/**
 * Return the bytes left in the datagram.
 */
68
inline std::size_t DatagramIterator::get_remaining_size(void) const;

921 12 get_datagram 0 4 1298 30 DatagramIterator::get_datagram 0 1 280 48
/**
 * Return the datagram of this iterator.
 */
66
inline Datagram const &DatagramIterator::get_datagram(void) const;

922 17 get_current_index 0 4 1298 35 DatagramIterator::get_current_index 0 1 281 100
/**
 * Returns the current position within the datagram of the next piece of data
 * to extract.
 */
67
inline std::size_t DatagramIterator::get_current_index(void) const;

923 6 output 0 4 1298 24 DatagramIterator::output 0 1 282 67
/**
 * Write a string representation of this instance to <out>.
 */
55
void DatagramIterator::output(std::ostream &out) const;

924 5 write 0 4 1298 23 DatagramIterator::write 0 1 283 67
/**
 * Write a string representation of this instance to <out>.
 */
79
void DatagramIterator::write(std::ostream &out, unsigned int indent = 0) const;

925 14 get_class_type 0 4 1298 32 DatagramIterator::get_class_type 0 1 284 0
57
static TypeHandle DatagramIterator::get_class_type(void);

926 17 ~DatagramIterator 0 4 1298 35 DatagramIterator::~DatagramIterator 0 0 0
42
DatagramIterator::~DatagramIterator(void);

927 13 ~DatagramSink 0 6 1299 27 DatagramSink::~DatagramSink 0 0 82
/**
 * Does nothing since this is class is just the definition of an interface
 */
42
virtual DatagramSink::~DatagramSink(void);

928 12 put_datagram 0 6 1299 26 DatagramSink::put_datagram 0 1 285 0
66
virtual bool DatagramSink::put_datagram(Datagram const &data) = 0;

929 13 copy_datagram 0 6 1299 27 DatagramSink::copy_datagram 0 2 286 287 713
/**
 * Copies the file data from the entire indicated file (via the vfs) as the
 * next datagram.  This is intended to support potentially very large
 * datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */

/**
 * Copies the file data from the range of the indicated file (outside of the
 * vfs) as the next datagram.  This is intended to support potentially very
 * large datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */
178
virtual bool DatagramSink::copy_datagram(SubfileInfo &result, Filename const &filename);
virtual bool DatagramSink::copy_datagram(SubfileInfo &result, SubfileInfo const &source);

930 8 is_error 0 6 1299 22 DatagramSink::is_error 0 1 288 0
46
virtual bool DatagramSink::is_error(void) = 0;

931 5 flush 0 6 1299 19 DatagramSink::flush 0 1 289 0
43
virtual void DatagramSink::flush(void) = 0;

932 12 get_filename 0 6 1299 26 DatagramSink::get_filename 0 1 290 159
/**
 * Returns the filename that provides the target for these datagrams, if any,
 * or empty string if the datagrams do not get written to a file on disk.
 */
57
virtual Filename const &DatagramSink::get_filename(void);

933 8 get_file 0 6 1299 22 DatagramSink::get_file 0 1 291 152
/**
 * Returns the FileReference that provides the target for these datagrams, if
 * any, or NULL if the datagrams do not written to a file on disk.
 */
58
virtual FileReference const *DatagramSink::get_file(void);

934 12 get_file_pos 0 6 1299 26 DatagramSink::get_file_pos 0 1 292 322
/**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramSinks that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * put_datagram().
 */
56
virtual std::streamoff DatagramSink::get_file_pos(void);

935 21 upcast_to_TypedObject 0 12 1305 42 TypedReferenceCount::upcast_to_TypedObject 0 1 298 46
upcast from TypedReferenceCount to TypedObject
62
TypedObject *TypedReferenceCount::upcast_to_TypedObject(void);

936 31 downcast_to_TypedReferenceCount 0 12 1296 44 TypedObject::downcast_to_TypedReferenceCount 0 0 48
downcast from TypedObject to TypedReferenceCount
72
TypedReferenceCount *TypedObject::downcast_to_TypedReferenceCount(void);

937 24 upcast_to_ReferenceCount 0 12 1305 45 TypedReferenceCount::upcast_to_ReferenceCount 0 1 299 49
upcast from TypedReferenceCount to ReferenceCount
68
ReferenceCount *TypedReferenceCount::upcast_to_ReferenceCount(void);

938 31 downcast_to_TypedReferenceCount 0 12 1290 47 ReferenceCount::downcast_to_TypedReferenceCount 0 0 51
downcast from ReferenceCount to TypedReferenceCount
75
TypedReferenceCount *ReferenceCount::downcast_to_TypedReferenceCount(void);

939 14 get_class_type 0 4 1305 35 TypedReferenceCount::get_class_type 0 1 297 0
60
static TypeHandle TypedReferenceCount::get_class_type(void);

940 20 ~TypedReferenceCount 0 4 1305 41 TypedReferenceCount::~TypedReferenceCount 0 0 0
48
TypedReferenceCount::~TypedReferenceCount(void);

941 13 FileReference 0 4 1304 28 FileReference::FileReference 0 2 293 294 10
/**
 *
 */
132
inline FileReference::FileReference(Filename const &filename);
inline FileReference::FileReference(FileReference const &) = default;

942 12 get_filename 0 4 1304 27 FileReference::get_filename 0 1 295 49
/**
 * Returns the filename of the reference.
 */
63
inline Filename const &FileReference::get_filename(void) const;

943 14 get_class_type 0 4 1304 29 FileReference::get_class_type 0 1 296 0
54
static TypeHandle FileReference::get_class_type(void);

944 14 ~FileReference 0 4 1304 29 FileReference::~FileReference 0 0 0
36
FileReference::~FileReference(void);

945 14 encrypt_string 0 1 0 14 encrypt_string 0 1 625 0
171
std::string encrypt_string(std::string const &source, std::string const &password, std::string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

946 14 decrypt_string 0 1 0 14 decrypt_string 0 1 626 0
83
std::string decrypt_string(std::string const &source, std::string const &password);

947 12 encrypt_file 0 1 0 12 encrypt_file 0 1 627 0
181
bool encrypt_file(Filename const &source, Filename const &dest, std::string const &password, std::string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

948 12 decrypt_file 0 1 0 12 decrypt_file 0 1 628 0
93
bool decrypt_file(Filename const &source, Filename const &dest, std::string const &password);

949 14 encrypt_stream 0 1 0 14 encrypt_stream 0 1 629 0
179
bool encrypt_stream(std::istream &source, std::ostream &dest, std::string const &password, std::string const &algorithm = string(), int key_length = -1, int iteration_count = -1);

950 14 decrypt_stream 0 1 0 14 decrypt_stream 0 1 630 0
91
bool decrypt_stream(std::istream &source, std::ostream &dest, std::string const &password);

951 13 error_to_text 0 1 0 13 error_to_text 0 1 631 10
/**
 *
 */
45
std::string error_to_text(ErrorUtilCode err);

952 15 get_write_error 0 1 0 15 get_write_error 0 1 632 0
26
int get_write_error(void);

953 19 handle_socket_error 0 1 0 19 handle_socket_error 0 1 633 10
/**
 *
 */
38
std::string handle_socket_error(void);

954 17 get_network_error 0 1 0 17 get_network_error 0 1 634 0
28
int get_network_error(void);

955 7 Ramfile 0 4 1309 16 Ramfile::Ramfile 0 2 300 301 10
/**
 *
 */
82
inline Ramfile::Ramfile(void);
inline Ramfile::Ramfile(Ramfile const &) = default;

956 4 seek 0 4 1309 13 Ramfile::seek 0 1 302 130
/**
 * Moves the data pointer to the indicated byte position.  It is not an error
 * to move the pointer past the end of data.
 */
43
inline void Ramfile::seek(std::size_t pos);

957 4 tell 0 4 1309 13 Ramfile::tell 0 1 303 106
/**
 * Returns the current data pointer position as a byte offset from the
 * beginning of the stream.
 */
45
inline std::size_t Ramfile::tell(void) const;

958 4 read 0 4 1309 13 Ramfile::read 0 1 304 319
/**
 * Extracts and returns the indicated number of characters from the current
 * data pointer, and advances the data pointer.  If the data pointer exceeds
 * the end of the buffer, returns empty string.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.read() function.
 */
44
PyObject *Ramfile::read(std::size_t length);

959 8 readline 0 4 1309 17 Ramfile::readline 0 1 305 303
/**
 * Assumes the stream represents a text file, and extracts one line up to and
 * including the trailing newline character.  Returns empty string when the
 * end of file is reached.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.readline() function.
 */
34
PyObject *Ramfile::readline(void);

960 9 readlines 0 4 1309 18 Ramfile::readlines 0 1 306 0
35
PyObject *Ramfile::readlines(void);

961 8 get_data 0 4 1309 17 Ramfile::get_data 0 1 307 101
/**
 * Returns the entire buffer contents as a string, regardless of the current
 * data pointer.
 */
40
PyObject *Ramfile::get_data(void) const;

962 13 get_data_size 0 4 1309 22 Ramfile::get_data_size 0 1 308 58
/**
 * Returns the size of the entire buffer contents.
 */
54
inline std::size_t Ramfile::get_data_size(void) const;

963 5 clear 0 4 1309 14 Ramfile::clear 0 1 309 47
/**
 * Empties the current buffer contents.
 */
33
inline void Ramfile::clear(void);

964 8 ~Ramfile 0 4 1309 17 Ramfile::~Ramfile 0 0 0
24
Ramfile::~Ramfile(void);

965 7 HashVal 0 4 1310 16 HashVal::HashVal 0 2 310 311 22
/**
 *
 */

/**
 *
 */
76
inline HashVal::HashVal(void);
inline HashVal::HashVal(HashVal const &copy);

966 10 operator = 0 4 1310 19 HashVal::operator = 0 1 312 0
53
inline void HashVal::operator =(HashVal const &copy);

967 11 operator == 0 4 1310 20 HashVal::operator == 0 1 313 0
61
inline bool HashVal::operator ==(HashVal const &other) const;

968 11 operator != 0 4 1310 20 HashVal::operator != 0 1 314 0
61
inline bool HashVal::operator !=(HashVal const &other) const;

969 10 operator < 0 4 1310 19 HashVal::operator < 0 1 315 0
60
inline bool HashVal::operator <(HashVal const &other) const;

970 10 compare_to 0 4 1310 19 HashVal::compare_to 0 1 316 10
/**
 *
 */
59
inline int HashVal::compare_to(HashVal const &other) const;

971 10 merge_with 0 4 1310 19 HashVal::merge_with 0 1 317 86
/**
 * Generates a new HashVal representing the xor of this one and the other one.
 */
54
inline void HashVal::merge_with(HashVal const &other);

972 10 output_dec 0 4 1310 19 HashVal::output_dec 0 1 318 65
/**
 * Outputs the HashVal as four unsigned decimal integers.
 */
57
inline void HashVal::output_dec(std::ostream &out) const;

973 9 input_dec 0 4 1310 18 HashVal::input_dec 0 1 319 64
/**
 * Inputs the HashVal as four unsigned decimal integers.
 */
49
inline void HashVal::input_dec(std::istream &in);

974 10 output_hex 0 4 1310 19 HashVal::output_hex 0 1 320 64
/**
 * Outputs the HashVal as a 32-digit hexadecimal number.
 */
50
void HashVal::output_hex(std::ostream &out) const;

975 9 input_hex 0 4 1310 18 HashVal::input_hex 0 1 321 63
/**
 * Inputs the HashVal as a 32-digit hexadecimal number.
 */
42
void HashVal::input_hex(std::istream &in);

976 13 output_binary 0 4 1310 22 HashVal::output_binary 0 1 322 128
/**
 * Outputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order generated by write_stream().
 */
53
void HashVal::output_binary(std::ostream &out) const;

977 12 input_binary 0 4 1310 21 HashVal::input_binary 0 1 323 125
/**
 * Inputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order expected by read_stream().
 */
45
void HashVal::input_binary(std::istream &in);

978 6 output 0 4 1310 15 HashVal::output 0 1 324 10
/**
 *
 */
53
inline void HashVal::output(std::ostream &out) const;

979 6 as_dec 0 4 1310 15 HashVal::as_dec 0 1 325 69
/**
 * Returns the HashVal as a string with four decimal numbers.
 */
40
std::string HashVal::as_dec(void) const;

980 12 set_from_dec 0 4 1310 21 HashVal::set_from_dec 0 1 326 112
/**
 * Sets the HashVal from a string with four decimal numbers.  Returns true if
 * valid, false otherwise.
 */
52
bool HashVal::set_from_dec(std::string const &text);

981 6 as_hex 0 4 1310 15 HashVal::as_hex 0 1 327 63
/**
 * Returns the HashVal as a 32-byte hexadecimal string.
 */
40
std::string HashVal::as_hex(void) const;

982 12 set_from_hex 0 4 1310 21 HashVal::set_from_hex 0 1 328 111
/**
 * Sets the HashVal from a 32-byte hexademical string.  Returns true if
 * successful, false otherwise.
 */
52
bool HashVal::set_from_hex(std::string const &text);

983 6 as_bin 0 4 1310 15 HashVal::as_bin 0 1 329 58
/**
 * Returns the HashVal as a 16-byte binary string.
 */
41
vector_uchar HashVal::as_bin(void) const;

984 12 set_from_bin 0 4 1310 21 HashVal::set_from_bin 0 1 330 106
/**
 * Sets the HashVal from a 16-byte binary string.  Returns true if successful,
 * false otherwise.
 */
53
bool HashVal::set_from_bin(vector_uchar const &text);

985 14 write_datagram 0 4 1310 23 HashVal::write_datagram 0 1 331 10
/**
 *
 */
65
inline void HashVal::write_datagram(Datagram &destination) const;

986 13 read_datagram 0 4 1310 22 HashVal::read_datagram 0 1 332 10
/**
 *
 */
61
inline void HashVal::read_datagram(DatagramIterator &source);

987 12 write_stream 0 4 1310 21 HashVal::write_stream 0 1 333 10
/**
 *
 */
67
inline void HashVal::write_stream(StreamWriter &destination) const;

988 11 read_stream 0 4 1310 20 HashVal::read_stream 0 1 334 10
/**
 *
 */
55
inline void HashVal::read_stream(StreamReader &source);

989 9 hash_file 0 4 1310 18 HashVal::hash_file 0 1 335 232
/**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */
50
bool HashVal::hash_file(Filename const &filename);

990 11 hash_stream 0 4 1310 20 HashVal::hash_stream 0 1 336 232
/**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */
48
bool HashVal::hash_stream(std::istream &stream);

991 12 hash_ramfile 0 4 1310 21 HashVal::hash_ramfile 0 1 337 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
58
inline void HashVal::hash_ramfile(Ramfile const &ramfile);

992 11 hash_string 0 4 1310 20 HashVal::hash_string 0 1 338 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
58
inline void HashVal::hash_string(std::string const &data);

993 10 hash_bytes 0 4 1310 19 HashVal::hash_bytes 0 1 339 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
58
inline void HashVal::hash_bytes(vector_uchar const &data);

994 11 hash_buffer 0 4 1310 20 HashVal::hash_buffer 0 1 340 178
/**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */
58
void HashVal::hash_buffer(char const *buffer, int length);

995 8 ~HashVal 0 4 1310 17 HashVal::~HashVal 0 0 0
24
HashVal::~HashVal(void);

996 19 MemoryUsagePointers 0 4 1311 40 MemoryUsagePointers::MemoryUsagePointers 0 2 341 342 10
/**
 *
 */
135
MemoryUsagePointers::MemoryUsagePointers(void);
inline MemoryUsagePointers::MemoryUsagePointers(MemoryUsagePointers const &) = default;

997 20 ~MemoryUsagePointers 0 4 1311 41 MemoryUsagePointers::~MemoryUsagePointers 0 0 10
/**
 *
 */
48
MemoryUsagePointers::~MemoryUsagePointers(void);

998 16 get_num_pointers 0 4 1311 37 MemoryUsagePointers::get_num_pointers 0 1 343 53
/**
 * Returns the number of pointers in the set.
 */
62
std::size_t MemoryUsagePointers::get_num_pointers(void) const;

999 11 get_pointer 0 4 1311 32 MemoryUsagePointers::get_pointer 0 1 344 46
/**
 * Returns the nth pointer of the set.
 */
70
ReferenceCount *MemoryUsagePointers::get_pointer(std::size_t n) const;

1000 17 get_typed_pointer 0 4 1311 38 MemoryUsagePointers::get_typed_pointer 0 1 345 175
/**
 * Returns the nth pointer of the set, typecast to a TypedObject if possible.
 * If the pointer is not a TypedObject or if the cast cannot be made, returns
 * nullptr.
 */
73
TypedObject *MemoryUsagePointers::get_typed_pointer(std::size_t n) const;

1001 8 get_type 0 4 1311 29 MemoryUsagePointers::get_type 0 1 346 70
/**
 * Returns the actual type of the nth pointer, if it is known.
 */
62
TypeHandle MemoryUsagePointers::get_type(std::size_t n) const;

1002 13 get_type_name 0 4 1311 34 MemoryUsagePointers::get_type_name 0 1 347 68
/**
 * Returns the type name of the nth pointer, if it is known.
 */
68
std::string MemoryUsagePointers::get_type_name(std::size_t n) const;

1003 7 get_age 0 4 1311 28 MemoryUsagePointers::get_age 0 1 348 197
/**
 * Returns the age of the nth pointer: the number of seconds elapsed between
 * the time it was allocated and the time it was added to this set via a call
 * to MemoryUsage::get_pointers().
 */
57
double MemoryUsagePointers::get_age(std::size_t n) const;

1004 18 get_python_pointer 0 4 1311 39 MemoryUsagePointers::get_python_pointer 0 1 349 0
71
PyObject *MemoryUsagePointers::get_python_pointer(std::size_t n) const;

1005 5 clear 0 4 1311 26 MemoryUsagePointers::clear 0 1 350 39
/**
 * Empties the set of pointers.
 */
38
void MemoryUsagePointers::clear(void);

1006 6 output 0 4 1311 27 MemoryUsagePointers::output 0 1 351 10
/**
 *
 */
58
void MemoryUsagePointers::output(std::ostream &out) const;

1007 10 ISubStream 0 4 1312 22 ISubStream::ISubStream 0 2 352 353 22
/**
 *
 */

/**
 *
 */
142
inline ISubStream::ISubStream(void);
inline explicit ISubStream::ISubStream(IStreamWrapper *source, std::streamoff start, std::streamoff end);

1008 4 open 0 4 1312 16 ISubStream::open 0 1 354 391
/**
 * Starts the SubStream reading from the indicated source, with the first
 * character being the character at position "start" within the source, for
 * end - start total characters.  The character at "end" within the source
 * will never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the ISubStream will continue until the
 * end of the source stream.
 */
102
inline ISubStream &ISubStream::open(IStreamWrapper *source, std::streamoff start, std::streamoff end);

1009 5 close 0 4 1312 17 ISubStream::close 0 1 355 92
/**
 * Resets the SubStream to empty, but does not actually close the source
 * istream.
 */
43
inline ISubStream &ISubStream::close(void);

1010 11 ~ISubStream 0 4 1312 23 ISubStream::~ISubStream 0 0 0
30
ISubStream::~ISubStream(void);

1011 10 OSubStream 0 4 1314 22 OSubStream::OSubStream 0 2 356 357 22
/**
 *
 */

/**
 *
 */
161
inline OSubStream::OSubStream(void);
inline explicit OSubStream::OSubStream(OStreamWrapper *dest, std::streamoff start, std::streamoff end, bool append = false);

1012 4 open 0 4 1314 16 OSubStream::open 0 1 358 383
/**
 * Starts the SubStream reading from the indicated dest, with the first
 * character being the character at position "start" within the dest, for end
 * - start total characters.  The character at "end" within the dest will
 * never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the OSubStream will continue until the
 * end of the dest stream.
 */
121
inline OSubStream &OSubStream::open(OStreamWrapper *dest, std::streamoff start, std::streamoff end, bool append = false);

1013 5 close 0 4 1314 17 OSubStream::close 0 1 359 90
/**
 * Resets the SubStream to empty, but does not actually close the dest
 * ostream.
 */
43
inline OSubStream &OSubStream::close(void);

1014 11 ~OSubStream 0 4 1314 23 OSubStream::~OSubStream 0 0 0
30
OSubStream::~OSubStream(void);

1015 9 SubStream 0 4 1316 20 SubStream::SubStream 0 2 360 361 22
/**
 *
 */

/**
 *
 */
158
inline SubStream::SubStream(void);
inline explicit SubStream::SubStream(StreamWrapper *nested, std::streamoff start, std::streamoff end, bool append = false);

1016 4 open 0 4 1316 15 SubStream::open 0 1 362 278
/**
 * Starts the SubStream reading and writing from the indicated nested stream,
 * within the indicated range.  "end" is the first character outside of the
 * range.
 *
 * If end is zero, it indicates that the SubStream will continue until the end
 * of the nested stream.
 */
120
inline SubStream &SubStream::open(StreamWrapper *nested, std::streamoff start, std::streamoff end, bool append = false);

1017 5 close 0 4 1316 16 SubStream::close 0 1 363 92
/**
 * Resets the SubStream to empty, but does not actually close the nested
 * ostream.
 */
41
inline SubStream &SubStream::close(void);

1018 10 ~SubStream 0 4 1316 21 SubStream::~SubStream 0 0 0
28
SubStream::~SubStream(void);

1019 9 Multifile 0 4 1318 20 Multifile::Multifile 0 1 364 10
/**
 *
 */
27
Multifile::Multifile(void);

1020 9 open_read 0 4 1318 20 Multifile::open_read 0 2 365 366 687
/**
 * Opens the named Multifile on disk for reading.  The Multifile index is read
 * in, and the list of subfiles becomes available; individual subfiles may
 * then be extracted or read, but the list of subfiles may not be modified.
 *
 * Also see the version of open_read() which accepts an istream.  Returns true
 * on success, false on failure.
 */

/**
 * Opens an anonymous Multifile for reading using an istream.  There must be
 * seek functionality via seekg() and tellg() on the istream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */
214
bool Multifile::open_read(Filename const &multifile_name, std::streamoff const &offset = 0);
bool Multifile::open_read(IStreamWrapper *multifile_stream, bool owns_pointer = false, std::streamoff const &offset = 0);

1021 10 open_write 0 4 1318 21 Multifile::open_write 0 2 367 368 755
/**
 * Opens the named Multifile on disk for writing.  If there already exists a
 * file by that name, it is truncated.  The Multifile is then prepared for
 * accepting a brand new set of subfiles, which will be written to the
 * indicated filename.  Individual subfiles may not be extracted or read.
 *
 * Also see the version of open_write() which accepts an ostream.  Returns
 * true on success, false on failure.
 */

/**
 * Opens an anonymous Multifile for writing using an ostream.  There must be
 * seek functionality via seekp() and tellp() on the pstream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */
146
bool Multifile::open_write(Filename const &multifile_name);
bool Multifile::open_write(std::ostream *multifile_stream, bool owns_pointer = false);

1022 15 open_read_write 0 4 1318 26 Multifile::open_read_write 0 2 369 370 727
/**
 * Opens the named Multifile on disk for reading and writing.  If there
 * already exists a file by that name, its index is read.  Subfiles may be
 * added or removed, and the resulting changes will be written to the named
 * file.
 *
 * Also see the version of open_read_write() which accepts an iostream.
 * Returns true on success, false on failure.
 */

/**
 * Opens an anonymous Multifile for reading and writing using an iostream.
 * There must be seek functionality via seekg()/seekp() and tellg()/tellp() on
 * the iostream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */
157
bool Multifile::open_read_write(Filename const &multifile_name);
bool Multifile::open_read_write(std::iostream *multifile_stream, bool owns_pointer = false);

1023 5 close 0 4 1318 16 Multifile::close 0 1 371 169
/**
 * Closes the Multifile if it is open.  All changes are flushed to disk, and
 * the file becomes invalid for further operations until the next call to
 * open().
 */
28
void Multifile::close(void);

1024 18 get_multifile_name 0 4 1318 29 Multifile::get_multifile_name 0 1 372 69
/**
 * Returns the filename of the Multifile, if it is available.
 */
65
inline Filename const &Multifile::get_multifile_name(void) const;

1025 18 set_multifile_name 0 4 1318 29 Multifile::set_multifile_name 0 1 373 209
/**
 * Replaces the filename of the Multifile.  This is primarily used for
 * documentation purposes only; changing this name does not open the indicated
 * file.  See open_read() or open_write() for that.
 */
74
inline void Multifile::set_multifile_name(Filename const &multifile_name);

1026 13 is_read_valid 0 4 1318 24 Multifile::is_read_valid 0 1 374 154
/**
 * Returns true if the Multifile has been opened for read mode and there have
 * been no errors, and individual Subfile contents may be extracted.
 */
49
inline bool Multifile::is_read_valid(void) const;

1027 14 is_write_valid 0 4 1318 25 Multifile::is_write_valid 0 1 375 162
/**
 * Returns true if the Multifile has been opened for write mode and there have
 * been no errors, and Subfiles may be added or removed from the Multifile.
 */
50
inline bool Multifile::is_write_valid(void) const;

1028 12 needs_repack 0 4 1318 23 Multifile::needs_repack 0 1 376 118
/**
 * Returns true if the Multifile index is suboptimal and should be repacked.
 * Call repack() to achieve this.
 */
48
inline bool Multifile::needs_repack(void) const;

1029 13 get_timestamp 0 4 1318 24 Multifile::get_timestamp 0 1 377 299
/**
 * Returns the modification timestamp of the overall Multifile.  This
 * indicates the most recent date at which subfiles were added or removed from
 * the Multifile.  Note that it is logically possible for an individual
 * subfile to have a more recent timestamp than the overall timestamp.
 */
51
inline time_t Multifile::get_timestamp(void) const;

1030 20 set_record_timestamp 0 4 1318 31 Multifile::set_record_timestamp 0 1 378 529
/**
 * Sets the flag indicating whether timestamps should be recorded within the
 * Multifile or not.  The default is true, indicating the Multifile will
 * record timestamps for the overall file and also for each subfile.
 *
 * If this is false, the Multifile will not record timestamps internally.  In
 * this case, the return value from get_timestamp() or get_subfile_timestamp()
 * will be estimations.
 *
 * You may want to set this false to minimize the bitwise difference between
 * independently-generated Multifiles.
 */
67
inline void Multifile::set_record_timestamp(bool record_timestamp);

1031 20 get_record_timestamp 0 4 1318 31 Multifile::get_record_timestamp 0 1 379 137
/**
 * Returns the flag indicating whether timestamps should be recorded within
 * the Multifile or not.  See set_record_timestamp().
 */
56
inline bool Multifile::get_record_timestamp(void) const;

1032 16 set_scale_factor 0 4 1318 27 Multifile::set_scale_factor 0 1 380 782
/**
 * Changes the internal scale factor for this Multifile.
 *
 * This is normally 1, but it may be set to any arbitrary value (greater than
 * zero) to support Multifile archives that exceed 4GB, if necessary.
 * (Individual subfiles may still not exceed 4GB.)
 *
 * All addresses within the file are rounded up to the next multiple of
 * _scale_factor, and zeros are written to the file to fill the resulting
 * gaps.  Then the address is divided by _scale_factor and written out as a
 * 32-bit integer.  Thus, setting a scale factor of 2 supports up to 8GB
 * files, 3 supports 12GB files, etc.
 *
 * Calling this function on an already-existing Multifile will have no
 * immediate effect until a future call to repack() or close() (or until the
 * Multifile is destructed).
 */
59
void Multifile::set_scale_factor(std::size_t scale_factor);

1033 16 get_scale_factor 0 4 1318 27 Multifile::get_scale_factor 0 1 381 92
/**
 * Returns the internal scale factor for this Multifile.  See
 * set_scale_factor().
 */
59
inline std::size_t Multifile::get_scale_factor(void) const;

1034 19 set_encryption_flag 0 4 1318 30 Multifile::set_encryption_flag 0 1 382 461
/**
 * Sets the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  If true, subfiles will be
 * encrypted; if false (the default), they will be written without encryption.
 *
 * When true, subfiles will be encrypted with the password specified by
 * set_encryption_password().  It is possible to apply a different password to
 * different files, but the resulting file can't be mounted via VFS.
 */
54
inline void Multifile::set_encryption_flag(bool flag);

1035 19 get_encryption_flag 0 4 1318 30 Multifile::get_encryption_flag 0 1 383 163
/**
 * Returns the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  See set_encryption_flag().
 */
55
inline bool Multifile::get_encryption_flag(void) const;

1036 23 set_encryption_password 0 4 1318 34 Multifile::set_encryption_password 0 1 384 369
/**
 * Specifies the password that will be used to encrypt subfiles subsequently
 * added to the multifile, if the encryption flag is also set true (see
 * set_encryption_flag()).
 *
 * It is possible to apply a different password to different files, but the
 * resulting file can't be mounted via VFS.  Changing this value may cause an
 * implicit call to flush().
 */
87
inline void Multifile::set_encryption_password(std::string const &encryption_password);

1037 23 get_encryption_password 0 4 1318 34 Multifile::get_encryption_password 0 1 385 141
/**
 * Returns the password that will be used to encrypt subfiles subsequently
 * added to the multifile.  See set_encryption_password().
 */
73
inline std::string const &Multifile::get_encryption_password(void) const;

1038 24 set_encryption_algorithm 0 4 1318 35 Multifile::set_encryption_algorithm 0 1 386 659
/**
 * Specifies the encryption algorithm that should be used for future calls to
 * add_subfile().  The default is whatever is specified by the encryption-
 * algorithm config variable.  The complete set of available algorithms is
 * defined by the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but flush() will fail and the file will be invalid.
 *
 * It is possible to apply a different encryption algorithm to different
 * files, and unlike the password, this does not interfere with mounting the
 * multifile via VFS.  Changing this value may cause an implicit call to
 * flush().
 */
89
inline void Multifile::set_encryption_algorithm(std::string const &encryption_algorithm);

1039 24 get_encryption_algorithm 0 4 1318 35 Multifile::get_encryption_algorithm 0 1 387 96
/**
 * Returns the encryption algorithm that was specified by
 * set_encryption_algorithm().
 */
74
inline std::string const &Multifile::get_encryption_algorithm(void) const;

1040 25 set_encryption_key_length 0 4 1318 36 Multifile::set_encryption_key_length 0 1 388 611
/**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to add_subfile().  The default is whatever is
 * specified by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but flush() will fail and the file will be
 * invalid.
 *
 * It is possible to apply a different key length to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS. Changing this value may cause an implicit call to flush().
 */
76
inline void Multifile::set_encryption_key_length(int encryption_key_length);

1041 25 get_encryption_key_length 0 4 1318 36 Multifile::get_encryption_key_length 0 1 389 108
/**
 * Returns the encryption key length, in bits, that was specified by
 * set_encryption_key_length().
 */
60
inline int Multifile::get_encryption_key_length(void) const;

1042 30 set_encryption_iteration_count 0 4 1318 41 Multifile::set_encryption_iteration_count 0 1 390 740
/**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to add_subfile().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the multifile-encryption-iteration-
 * count config variable.
 *
 * It is possible to apply a different iteration count to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS.  Changing this value causes an implicit call to flush().
 */
86
inline void Multifile::set_encryption_iteration_count(int encryption_iteration_count);

1043 30 get_encryption_iteration_count 0 4 1318 41 Multifile::get_encryption_iteration_count 0 1 391 84
/**
 * Returns the value that was specified by set_encryption_iteration_count().
 */
65
inline int Multifile::get_encryption_iteration_count(void) const;

1044 11 add_subfile 0 4 1318 22 Multifile::add_subfile 0 2 392 393 1397
/**
 * Adds a file on disk as a subfile to the Multifile.  The file named by
 * filename will be read and added to the Multifile at the next call to
 * flush().  If there already exists a subfile with the indicated name, it is
 * replaced without examining its contents (but see also update_subfile).
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */

/**
 * Adds a file from a stream as a subfile to the Multifile.  The indicated
 * istream will be read and its contents added to the Multifile at the next
 * call to flush(). The file will be added as a binary subfile.
 *
 * Note that the istream must remain untouched and unused by any other code
 * until flush() is called.  At that time, the Multifile will read the entire
 * contents of the istream from the current file position to the end of the
 * file.  Subsequently, the Multifile will *not* close or delete the istream.
 * It is the caller's responsibility to ensure that the istream pointer does
 * not destruct during the lifetime of the Multifile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */
237
std::string Multifile::add_subfile(std::string const &subfile_name, Filename const &filename, int compression_level);
std::string Multifile::add_subfile(std::string const &subfile_name, std::istream *subfile_data, int compression_level);

1045 14 update_subfile 0 4 1318 25 Multifile::update_subfile 0 1 394 451
/**
 * Adds a file on disk to the subfile.  If a subfile already exists with the
 * same name, its contents are compared byte-for-byte to the disk file, and it
 * is replaced only if it is different; otherwise, the multifile is left
 * unchanged.
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 */
120
std::string Multifile::update_subfile(std::string const &subfile_name, Filename const &filename, int compression_level);

1046 13 add_signature 0 4 1318 24 Multifile::add_signature 0 2 395 396 3062
/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * The chain filename may be empty if the certificate does not require an
 * authenticating certificate chain (e.g.  because it is self-signed).
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 *
 * This flavor of add_signature() reads the certificate and private key from a
 * PEM-formatted file, for instance as generated by the openssl command.  If
 * the private key file is password-encrypted, the third parameter will be
 * used as the password to decrypt it.
 */

/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * This flavor of add_signature() reads the certificate, private key, and
 * certificate chain from the same PEM-formatted file.  It takes the first
 * private key found as the intended key, and then uses the first certificate
 * found that matches that key as the signing certificate.  Any other
 * certificates in the file are taken to be part of the chain.
 */

/**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * The signature certificate is the first certificate on the CertChain object.
 * Any remaining certificates are support certificates to authenticate the
 * first one.
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 */
230
bool Multifile::add_signature(Filename const &certificate, Filename const &chain, Filename const &pkey, std::string const &password = "");
bool Multifile::add_signature(Filename const &composite, std::string const &password = "");

1047 18 get_num_signatures 0 4 1318 29 Multifile::get_num_signatures 0 1 397 555
/**
 * Returns the number of matching signatures found on the Multifile.  These
 * signatures may be iterated via get_signature() and related methods.
 *
 * A signature on this list is guaranteed to match the Multifile contents,
 * proving that the Multifile has been unmodified since the signature was
 * applied.  However, this does not guarantee that the certificate itself is
 * actually from who it says it is from; only that it matches the Multifile
 * contents.  See validate_signature_certificate() to authenticate a
 * particular certificate.
 */
46
int Multifile::get_num_signatures(void) const;

1048 26 get_signature_subject_name 0 4 1318 37 Multifile::get_signature_subject_name 0 1 398 352
/**
 * Returns the "subject name" for the nth signature found on the Multifile.
 * This is a string formatted according to RFC2253 that should more-or-less
 * identify a particular certificate; when paired with the public key (see
 * get_signature_public_key()), it can uniquely identify a certificate.  See
 * the comments in get_num_signatures().
 */
63
std::string Multifile::get_signature_subject_name(int n) const;

1049 27 get_signature_friendly_name 0 4 1318 38 Multifile::get_signature_friendly_name 0 1 399 299
/**
 * Returns a "friendly name" for the nth signature found on the Multifile.
 * This attempts to extract out the most meaningful part of the subject name.
 * It returns the emailAddress, if it is defined; otherwise, it returns the
 * commonName.
 *
 * See the comments in get_num_signatures().
 */
64
std::string Multifile::get_signature_friendly_name(int n) const;

1050 24 get_signature_public_key 0 4 1318 35 Multifile::get_signature_public_key 0 1 400 379
/**
 * Returns the public key used for the nth signature found on the Multifile.
 * This is encoded in DER form and returned as a string of hex digits.
 *
 * This can be used, in conjunction with the subject name (see
 * get_signature_subject_name()), to uniquely identify a particular
 * certificate and its subsequent reissues.  See the comments in
 * get_num_signatures().
 */
61
std::string Multifile::get_signature_public_key(int n) const;

1051 27 print_signature_certificate 0 4 1318 38 Multifile::print_signature_certificate 0 1 401 158
/**
 * Writes the certificate for the nth signature, in user-readable verbose
 * form, to the indicated stream.  See the comments in get_num_signatures().
 */
76
void Multifile::print_signature_certificate(int n, std::ostream &out) const;

1052 27 write_signature_certificate 0 4 1318 38 Multifile::write_signature_certificate 0 1 402 140
/**
 * Writes the certificate for the nth signature, in PEM form, to the indicated
 * stream.  See the comments in get_num_signatures().
 */
76
void Multifile::write_signature_certificate(int n, std::ostream &out) const;

1053 30 validate_signature_certificate 0 4 1318 41 Multifile::validate_signature_certificate 0 1 403 289
/**
 * Checks that the certificate used for the nth signature is a valid,
 * authorized certificate with some known certificate authority.  Returns 0 if
 * it is valid, -1 if there is some error, or the corresponding OpenSSL error
 * code if it is invalid, out-of-date, or self-signed.
 */
59
int Multifile::validate_signature_certificate(int n) const;

1054 5 flush 0 4 1318 16 Multifile::flush 0 1 404 691
/**
 * Writes all contents of the Multifile to disk.  Until flush() is called,
 * add_subfile() and remove_subfile() do not actually do anything to disk.  At
 * this point, all of the recently-added subfiles are read and their contents
 * are added to the end of the Multifile, and the recently-removed subfiles
 * are marked gone from the Multifile.
 *
 * This may result in a suboptimal index.  To guarantee that the index is
 * written at the beginning of the file, call repack() instead of flush().
 *
 * It is not necessary to call flush() explicitly unless you are concerned
 * about reading the recently-added subfiles immediately.
 *
 * Returns true on success, false on failure.
 */
28
bool Multifile::flush(void);

1055 6 repack 0 4 1318 17 Multifile::repack 0 1 405 587
/**
 * Forces a complete rewrite of the Multifile and all of its contents, so that
 * its index will appear at the beginning of the file with all of the subfiles
 * listed in alphabetical order.  This is considered optimal for reading, and
 * is the standard configuration; but it is not essential to do this.
 *
 * It is only valid to call this if the Multifile was opened using
 * open_read_write() and an explicit filename, rather than an iostream.  Also,
 * we must have write permission to the directory containing the Multifile.
 *
 * Returns true on success, false on failure.
 */
29
bool Multifile::repack(void);

1056 16 get_num_subfiles 0 4 1318 27 Multifile::get_num_subfiles 0 1 406 169
/**
 * Returns the number of subfiles within the Multifile.  The subfiles may be
 * accessed in alphabetical order by iterating through [0 ..
 * get_num_subfiles()).
 */
44
int Multifile::get_num_subfiles(void) const;

1057 12 find_subfile 0 4 1318 23 Multifile::find_subfile 0 1 407 127
/**
 * Returns the index of the subfile with the indicated name, or -1 if the
 * named subfile is not within the Multifile.
 */
67
int Multifile::find_subfile(std::string const &subfile_name) const;

1058 13 has_directory 0 4 1318 24 Multifile::has_directory 0 1 408 203
/**
 * Returns true if the indicated subfile name is the directory prefix to one
 * or more files within the Multifile.  That is, the Multifile contains at
 * least one file named "subfile_name/...".
 */
69
bool Multifile::has_directory(std::string const &subfile_name) const;

1059 14 scan_directory 0 4 1318 25 Multifile::scan_directory 0 1 409 420
/**
 * Considers subfile_name to be the name of a subdirectory within the
 * Multifile, but not a file itself; fills the given vector up with the sorted
 * list of subdirectories or files within the named directory.
 *
 * Note that directories do not exist explicitly within a Multifile; this just
 * checks for the existence of files with the given initial prefix.
 *
 * Returns true if successful, false otherwise.
 */
95
bool Multifile::scan_directory(vector_string &contents, std::string const &subfile_name) const;

1060 14 remove_subfile 0 4 1318 25 Multifile::remove_subfile 0 2 410 411 912
/**
 * Removes the named subfile from the Multifile, if it exists; returns true if
 * successfully removed, or false if it did not exist in the first place.  The
 * file will not actually be removed from the disk until the next call to
 * flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */

/**
 * Removes the nth subfile from the Multifile.  This will cause all subsequent
 * index numbers to decrease by one.  The file will not actually be removed
 * from the disk until the next call to flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */
114
void Multifile::remove_subfile(int index);
inline bool Multifile::remove_subfile(std::string const &subfile_name);

1061 16 get_subfile_name 0 4 1318 27 Multifile::get_subfile_name 0 1 412 47
/**
 * Returns the name of the nth subfile.
 */
64
std::string const &Multifile::get_subfile_name(int index) const;

1062 18 get_subfile_length 0 4 1318 29 Multifile::get_subfile_length 0 1 413 170
/**
 * Returns the uncompressed data length of the nth subfile.  This might return
 * 0 if the subfile has recently been added and flush() has not yet been
 * called.
 */
59
std::size_t Multifile::get_subfile_length(int index) const;

1063 21 get_subfile_timestamp 0 4 1318 32 Multifile::get_subfile_timestamp 0 1 414 270
/**
 * Returns the modification time of the nth subfile.  If this is called on an
 * older .mf file, which did not store individual timestamps in the file (or
 * if get_record_timestamp() is false), this will return the modification time
 * of the overall multifile.
 */
57
time_t Multifile::get_subfile_timestamp(int index) const;

1064 21 is_subfile_compressed 0 4 1318 32 Multifile::is_subfile_compressed 0 1 415 120
/**
 * Returns true if the indicated subfile has been compressed when stored
 * within the archive, false otherwise.
 */
55
bool Multifile::is_subfile_compressed(int index) const;

1065 20 is_subfile_encrypted 0 4 1318 31 Multifile::is_subfile_encrypted 0 1 416 119
/**
 * Returns true if the indicated subfile has been encrypted when stored within
 * the archive, false otherwise.
 */
54
bool Multifile::is_subfile_encrypted(int index) const;

1066 15 is_subfile_text 0 4 1318 26 Multifile::is_subfile_text 0 1 417 343
/**
 * Returns true if the indicated subfile represents text data, or false if it
 * represents binary data.  If the file is text data, it may have been
 * processed by end-of-line conversion when it was added.  (But the actual
 * bits in the multifile will represent the standard Unix end-of-line
 * convention, e.g.  \n instead of \r\n.)
 */
49
bool Multifile::is_subfile_text(int index) const;

1067 13 get_index_end 0 4 1318 24 Multifile::get_index_end 0 1 418 371
/**
 * Returns the first byte that is guaranteed to follow any index byte already
 * written to disk in the Multifile.
 *
 * This number is largely meaningless in many cases, but if needs_repack() is
 * false, and the file is flushed, this will indicate the number of bytes in
 * the header + index.  Everything at this byte position and later will be
 * actual data.
 */
52
std::streamoff Multifile::get_index_end(void) const;

1068 26 get_subfile_internal_start 0 4 1318 37 Multifile::get_subfile_internal_start 0 1 419 338
/**
 * Returns the starting byte position within the Multifile at which the
 * indicated subfile begins.  This may be used, with
 * get_subfile_internal_length(), for low-level access to the subfile, but
 * usually it is better to use open_read_subfile() instead (which
 * automatically decrypts and/or uncompresses the subfile data).
 */
70
std::streamoff Multifile::get_subfile_internal_start(int index) const;

1069 27 get_subfile_internal_length 0 4 1318 38 Multifile::get_subfile_internal_length 0 1 420 322
/**
 * Returns the number of bytes the indicated subfile consumes within the
 * archive.  For compressed subfiles, this will generally be smaller than
 * get_subfile_length(); for encrypted (but noncompressed) subfiles, it may be
 * slightly different, for noncompressed and nonencrypted subfiles, it will be
 * equal.
 */
68
std::size_t Multifile::get_subfile_internal_length(int index) const;

1070 12 read_subfile 0 4 1318 23 Multifile::read_subfile 0 1 421 253
/**
 * Returns a vector_uchar that contains the entire contents of the indicated
 * subfile.
 */

/**
 * Fills a string with the entire contents of the indicated subfile.
 */

/**
 * Fills a pvector with the entire contents of the indicated subfile.
 */
55
inline vector_uchar Multifile::read_subfile(int index);

1071 17 open_read_subfile 0 4 1318 28 Multifile::open_read_subfile 0 1 422 937
/**
 * Returns an istream that may be used to read the indicated subfile.  You may
 * seek() within this istream to your heart's content; even though it will be
 * a reference to the already-opened pfstream of the Multifile itself, byte 0
 * appears to be the beginning of the subfile and EOF appears to be the end of
 * the subfile.
 *
 * The returned istream will have been allocated via new; you should pass the
 * pointer to close_read_subfile() when you are finished with it to delete it
 * and release its resources.
 *
 * Any future calls to repack() or close() (or the Multifile destructor) will
 * invalidate all currently open subfile pointers.
 *
 * The return value will be NULL if the stream cannot be opened for some
 * reason.
 */

/**
 * This variant of open_read_subfile() is used internally only, and accepts a
 * pointer to the internal Subfile object, which is assumed to be valid and
 * written to the multifile.
 */
54
std::istream *Multifile::open_read_subfile(int index);

1072 18 close_read_subfile 0 4 1318 29 Multifile::close_read_subfile 0 1 423 246
/**
 * Closes a file opened by a previous call to open_read_subfile().  This
 * really just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
64
static void Multifile::close_read_subfile(std::istream *stream);

1073 15 extract_subfile 0 4 1318 26 Multifile::extract_subfile 0 1 424 68
/**
 * Extracts the nth subfile into a file with the given name.
 */
69
bool Multifile::extract_subfile(int index, Filename const &filename);

1074 18 extract_subfile_to 0 4 1318 29 Multifile::extract_subfile_to 0 1 425 61
/**
 * Extracts the nth subfile to the indicated ostream.
 */
65
bool Multifile::extract_subfile_to(int index, std::ostream &out);

1075 15 compare_subfile 0 4 1318 26 Multifile::compare_subfile 0 1 426 509
/**
 * Performs a byte-for-byte comparison of the indicated file on disk with the
 * nth subfile.  Returns true if the files are equivalent, or false if they
 * are different (or the file is missing).
 *
 * If Filename::set_binary() or set_text() has already been called, it
 * specifies the nature of the source file.  If this is different from the
 * text flag of the subfile, the comparison will always return false.  If this
 * has not been specified, it will be set from the text flag of the subfile.
 */
69
bool Multifile::compare_subfile(int index, Filename const &filename);

1076 6 output 0 4 1318 17 Multifile::output 0 1 427 10
/**
 *
 */
48
void Multifile::output(std::ostream &out) const;

1077 2 ls 0 4 1318 13 Multifile::ls 0 1 428 61
/**
 * Shows a list of all subfiles within the Multifile.
 */
58
void Multifile::ls(std::ostream &out = ::std::cout) const;

1078 16 get_magic_number 0 4 1318 27 Multifile::get_magic_number 0 1 429 108
/**
 * Returns a string with the first n bytes written to a Multifile, to identify
 * it as a Multifile.
 */
60
static inline std::string Multifile::get_magic_number(void);

1079 17 set_header_prefix 0 4 1318 28 Multifile::set_header_prefix 0 1 430 644
/**
 * Sets the string which is written to the Multifile before the Multifile
 * header.  This string must begin with a hash mark and end with a newline
 * character; and if it includes embedded newline characters, each one must be
 * followed by a hash mark.  If these conditions are not initially true, the
 * string will be modified as necessary to make it so.
 *
 * This is primarily useful as a simple hack to allow p3d applications to be
 * run directly from the command line on Unix-like systems.
 *
 * The return value is true if successful, or false on failure (for instance,
 * because the header prefix violates the above rules).
 */
68
void Multifile::set_header_prefix(std::string const &header_prefix);

1080 17 get_header_prefix 0 4 1318 28 Multifile::get_header_prefix 0 1 431 113
/**
 * Returns the string that preceded the Multifile header on the file, if any.
 * See set_header_prefix().
 */
67
inline std::string const &Multifile::get_header_prefix(void) const;

1081 7 Namable 0 4 1321 16 Namable::Namable 0 2 432 433 10
/**
 *
 */
123
inline explicit Namable::Namable(std::string const &initial_name = "");
inline Namable::Namable(Namable const &) = default;

1082 8 set_name 0 4 1321 17 Namable::set_name 0 1 434 10
/**
 *
 */
55
inline void Namable::set_name(std::string const &name);

1083 10 clear_name 0 4 1321 19 Namable::clear_name 0 1 435 46
/**
 * Resets the Namable's name to empty.
 */
38
inline void Namable::clear_name(void);

1084 8 has_name 0 4 1321 17 Namable::has_name 0 1 436 94
/**
 * Returns true if the Namable has a nonempty name set, false if the name is
 * empty.
 */
42
inline bool Namable::has_name(void) const;

1085 8 get_name 0 4 1321 17 Namable::get_name 0 1 437 10
/**
 *
 */
56
inline std::string const &Namable::get_name(void) const;

1086 6 output 0 4 1321 15 Namable::output 0 1 438 251
// In the absence of any definition to the contrary, outputting a Namable
// will write out its name.

/**
 * Outputs the Namable.  This function simply writes the name to the output
 * stream; most Namable derivatives will probably redefine this.
 */
53
inline void Namable::output(std::ostream &out) const;

1087 14 get_class_type 0 4 1321 23 Namable::get_class_type 0 1 439 0
48
static TypeHandle Namable::get_class_type(void);

1088 8 ~Namable 0 4 1321 17 Namable::~Namable 0 0 0
24
Namable::~Namable(void);

1089 18 clear_certificates 0 4 1323 34 OpenSSLWrapper::clear_certificates 0 1 440 200
/**
 * Removes all the certificates from the global store, including the compiled-
 * in certificates loaded from ca_bundle_data.c.  You can add new certificates
 * by calling load_certificates().
 */
46
void OpenSSLWrapper::clear_certificates(void);

1090 17 load_certificates 0 4 1323 33 OpenSSLWrapper::load_certificates 0 1 441 436
/**
 * Reads the PEM-formatted certificate(s) (delimited by -----BEGIN
 * CERTIFICATE----- and -----END CERTIFICATE-----) from the indicated file and
 * adds them to the global store object, retrieved via get_x509_store().
 *
 * Returns the number of certificates read on success, or 0 on failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */
64
int OpenSSLWrapper::load_certificates(Filename const &filename);

1091 30 load_certificates_from_pem_ram 0 4 1323 46 OpenSSLWrapper::load_certificates_from_pem_ram 0 2 442 443 754
/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */

/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */
176
int OpenSSLWrapper::load_certificates_from_pem_ram(char const *data, std::size_t data_size);
inline int OpenSSLWrapper::load_certificates_from_pem_ram(std::string const &data);

1092 30 load_certificates_from_der_ram 0 4 1323 46 OpenSSLWrapper::load_certificates_from_der_ram 0 2 444 445 754
/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */

/**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */
176
int OpenSSLWrapper::load_certificates_from_der_ram(char const *data, std::size_t data_size);
inline int OpenSSLWrapper::load_certificates_from_der_ram(std::string const &data);

1093 14 get_x509_store 0 4 1323 30 OpenSSLWrapper::get_x509_store 0 1 446 378
/**
 * Returns the global X509_STORE object.
 *
 * It has to be a global object, because OpenSSL seems to store some global
 * pointers associated with this object whether you want it to or not, and
 * keeping independent copies of a local X509_STORE object doesn't seem to
 * work that well.  So, we have one store that keeps all certificates the
 * application might need.
 */
49
X509_STORE *OpenSSLWrapper::get_x509_store(void);

1094 17 notify_ssl_errors 0 4 1323 33 OpenSSLWrapper::notify_ssl_errors 0 1 447 277
/**
 * A convenience function that is itself a wrapper around the OpenSSL
 * convenience function to output the recent OpenSSL errors.  This function
 * sends the error string to express_cat.warning().  If REPORT_OPENSSL_ERRORS
 * is not defined, the function does nothing.
 */
45
void OpenSSLWrapper::notify_ssl_errors(void);

1095 23 notify_debug_ssl_errors 0 4 1323 39 OpenSSLWrapper::notify_debug_ssl_errors 0 1 448 84
/**
 * As notify_ssl_errors(), but sends the output to debug instead of warning.
 */
51
void OpenSSLWrapper::notify_debug_ssl_errors(void);

1096 14 get_global_ptr 0 4 1323 30 OpenSSLWrapper::get_global_ptr 0 1 449 10
/**
 *
 */
60
static OpenSSLWrapper *OpenSSLWrapper::get_global_ptr(void);

1097 11 SubfileInfo 0 4 1324 24 SubfileInfo::SubfileInfo 0 4 450 451 452 453 46
/**
 *
 */

/**
 *
 */

/**
 *
 */

/**
 *
 */
321
inline SubfileInfo::SubfileInfo(void);
inline explicit SubfileInfo::SubfileInfo(FileReference const *file, std::streamoff start, std::streamsize size);
inline explicit SubfileInfo::SubfileInfo(Filename const &filename, std::streamoff start, std::streamsize size);
inline SubfileInfo::SubfileInfo(SubfileInfo const &copy);

1098 10 operator = 0 4 1324 23 SubfileInfo::operator = 0 1 454 0
61
inline void SubfileInfo::operator =(SubfileInfo const &copy);

1099 8 is_empty 0 4 1324 21 SubfileInfo::is_empty 0 1 455 98
/**
 * Returns true if this SubfileInfo doesn't define any file, false if it has
 * real data.
 */
46
inline bool SubfileInfo::is_empty(void) const;

1100 8 get_file 0 4 1324 21 SubfileInfo::get_file 0 1 456 63
/**
 * Returns the FileReference that represents this file.
 */
62
inline FileReference const *SubfileInfo::get_file(void) const;

1101 12 get_filename 0 4 1324 25 SubfileInfo::get_filename 0 1 457 38
/**
 * A shortcut to the filename.
 */
61
inline Filename const &SubfileInfo::get_filename(void) const;

1102 9 get_start 0 4 1324 22 SubfileInfo::get_start 0 1 458 77
/**
 * Returns the offset within the file at which this file data begins.
 */
57
inline std::streamoff SubfileInfo::get_start(void) const;

1103 8 get_size 0 4 1324 21 SubfileInfo::get_size 0 1 459 115
/**
 * Returns the number of consecutive bytes, beginning at get_start(), that
 * correspond to this file data.
 */
57
inline std::streamsize SubfileInfo::get_size(void) const;

1104 6 output 0 4 1324 19 SubfileInfo::output 0 1 460 10
/**
 *
 */
50
void SubfileInfo::output(std::ostream &out) const;

1105 12 ~SubfileInfo 0 4 1324 25 SubfileInfo::~SubfileInfo 0 0 0
32
SubfileInfo::~SubfileInfo(void);

1106 15 get_file_system 0 6 1325 28 VirtualFile::get_file_system 0 1 461 0
72
virtual VirtualFileSystem *VirtualFile::get_file_system(void) const = 0;

1107 12 get_filename 0 6 1325 25 VirtualFile::get_filename 0 1 462 0
59
virtual Filename VirtualFile::get_filename(void) const = 0;

1108 21 get_original_filename 0 4 1325 34 VirtualFile::get_original_filename 0 1 463 166
/**
 * Returns the original filename as it was used to locate this VirtualFile.
 * This is usually, but not always, the same string returned by
 * get_filename().
 */
70
inline Filename const &VirtualFile::get_original_filename(void) const;

1109 8 has_file 0 6 1325 21 VirtualFile::has_file 0 1 464 61
/**
 * Returns true if this file exists, false otherwise.
 */
47
virtual bool VirtualFile::has_file(void) const;

1110 12 is_directory 0 6 1325 25 VirtualFile::is_directory 0 1 465 117
/**
 * Returns true if this file represents a directory (and scan_directory() may
 * be called), false otherwise.
 */
51
virtual bool VirtualFile::is_directory(void) const;

1111 15 is_regular_file 0 6 1325 28 VirtualFile::is_regular_file 0 1 466 115
/**
 * Returns true if this file represents a regular file (and read_file() may be
 * called), false otherwise.
 */
54
virtual bool VirtualFile::is_regular_file(void) const;

1112 11 is_writable 0 6 1325 24 VirtualFile::is_writable 0 1 467 153
/**
 * Returns true if this file may be written to, which implies write_file() may
 * be called (unless it is a directory instead of a regular file).
 */
50
virtual bool VirtualFile::is_writable(void) const;

1113 11 delete_file 0 6 1325 24 VirtualFile::delete_file 0 1 468 199
/**
 * Attempts to delete this file or directory.  This can remove a single file
 * or an empty directory.  It will not remove a nonempty directory.  Returns
 * true on success, false on failure.
 */
44
virtual bool VirtualFile::delete_file(void);

1114 11 rename_file 0 6 1325 24 VirtualFile::rename_file 0 1 469 589
/**
 * Attempts to move or rename this file or directory.  If the original file is
 * an ordinary file, it will quietly replace any already-existing file in the
 * new filename (but not a directory).  If the original file is a directory,
 * the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */
61
virtual bool VirtualFile::rename_file(VirtualFile *new_file);

1115 9 copy_file 0 6 1325 22 VirtualFile::copy_file 0 1 470 123
/**
 * Attempts to copy the contents of this file to the indicated file.  Returns
 * true on success, false on failure.
 */
59
virtual bool VirtualFile::copy_file(VirtualFile *new_file);

1116 14 scan_directory 0 4 1325 27 VirtualFile::scan_directory 0 1 471 247
/**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */
69
PointerTo< VirtualFileList > VirtualFile::scan_directory(void) const;

1117 6 output 0 4 1325 19 VirtualFile::output 0 1 472 10
/**
 *
 */
50
void VirtualFile::output(std::ostream &out) const;

1118 2 ls 0 4 1325 15 VirtualFile::ls 0 1 473 66
/**
 * If the file represents a directory, lists its contents.
 */
60
void VirtualFile::ls(std::ostream &out = ::std::cout) const;

1119 6 ls_all 0 4 1325 19 VirtualFile::ls_all 0 1 474 113
/**
 * If the file represents a directory, recursively lists its contents and
 * those of all subdirectories.
 */
64
void VirtualFile::ls_all(std::ostream &out = ::std::cout) const;

1120 9 read_file 0 4 1325 22 VirtualFile::read_file 0 1 475 352
/**
 * Returns the entire contents of the file as a string.
 */

/**
 * Fills up the indicated string with the contents of the file, if it is a
 * regular file.  Returns true on success, false otherwise.
 */

/**
 * Fills up the indicated pvector with the contents of the file, if it is a
 * regular file.  Returns true on success, false otherwise.
 */
57
PyObject *VirtualFile::read_file(bool auto_unwrap) const;

1121 14 open_read_file 0 6 1325 27 VirtualFile::open_read_file 0 1 476 179
/**
 * Opens the file for reading.  Returns a newly allocated istream on success
 * (which you should eventually delete when you are done reading). Returns
 * NULL on failure.
 */
74
virtual std::istream *VirtualFile::open_read_file(bool auto_unwrap) const;

1122 15 close_read_file 0 6 1325 28 VirtualFile::close_read_file 0 1 477 243
/**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
70
virtual void VirtualFile::close_read_file(std::istream *stream) const;

1123 19 was_read_successful 0 6 1325 32 VirtualFile::was_read_successful 0 1 478 324
/**
 * Call this method after a reading the istream returned by open_read_file()
 * to completion.  If it returns true, the file was read completely and
 * without error; if it returns false, there may have been some errors or a
 * truncated file read.  This is particularly likely if the stream is a
 * VirtualFileHTTP.
 */
58
virtual bool VirtualFile::was_read_successful(void) const;

1124 10 write_file 0 4 1325 23 VirtualFile::write_file 0 1 479 197
/**
 * Writes the entire contents of the file as a string, if it is writable.
 */

/**
 * Writes the indicated data to the file, if it is writable.  Returns true on
 * success, false otherwise.
 */
66
PyObject *VirtualFile::write_file(PyObject *data, bool auto_wrap);

1125 15 open_write_file 0 6 1325 28 VirtualFile::open_write_file 0 1 480 179
/**
 * Opens the file for writing.  Returns a newly allocated ostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */
82
virtual std::ostream *VirtualFile::open_write_file(bool auto_wrap, bool truncate);

1126 16 open_append_file 0 6 1325 29 VirtualFile::open_append_file 0 1 481 180
/**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */
58
virtual std::ostream *VirtualFile::open_append_file(void);

1127 16 close_write_file 0 6 1325 29 VirtualFile::close_write_file 0 1 482 244
/**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
65
virtual void VirtualFile::close_write_file(std::ostream *stream);

1128 20 open_read_write_file 0 6 1325 33 VirtualFile::open_read_write_file 0 1 483 180
/**
 * Opens the file for writing.  Returns a newly allocated iostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */
72
virtual std::iostream *VirtualFile::open_read_write_file(bool truncate);

1129 21 open_read_append_file 0 6 1325 34 VirtualFile::open_read_append_file 0 1 484 194
/**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */
64
virtual std::iostream *VirtualFile::open_read_append_file(void);

1130 21 close_read_write_file 0 6 1325 34 VirtualFile::close_read_write_file 0 1 485 250
/**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
71
virtual void VirtualFile::close_read_write_file(std::iostream *stream);

1131 13 get_file_size 0 6 1325 26 VirtualFile::get_file_size 0 2 486 487 329
/**
 * Returns the current size on disk (or wherever it is) of the already-open
 * file.  Pass in the stream that was returned by open_read_file(); some
 * implementations may require this stream to determine the size.
 */

/**
 * Returns the current size on disk (or wherever it is) of the file before it
 * has been opened.
 */
143
virtual std::streamsize VirtualFile::get_file_size(std::istream *stream) const;
virtual std::streamsize VirtualFile::get_file_size(void) const;

1132 13 get_timestamp 0 6 1325 26 VirtualFile::get_timestamp 0 1 488 434
/**
 * Returns a time_t value that represents the time the file was last modified,
 * to within whatever precision the operating system records this information
 * (on a Windows95 system, for instance, this may only be accurate to within 2
 * seconds).
 *
 * If the timestamp cannot be determined, either because it is not supported
 * by the operating system or because there is some error (such as file not
 * found), returns 0.
 */
54
virtual time_t VirtualFile::get_timestamp(void) const;

1133 15 get_system_info 0 6 1325 28 VirtualFile::get_system_info 0 1 489 330
/**
 * Populates the SubfileInfo structure with the data representing where the
 * file actually resides on disk, if this is knowable.  Returns true if the
 * file might reside on disk, and the info is populated, or false if it does
 * not (or it is not known where the file resides), in which case the info is
 * meaningless.
 */
61
virtual bool VirtualFile::get_system_info(SubfileInfo &info);

1134 14 get_class_type 0 4 1325 27 VirtualFile::get_class_type 0 1 490 0
52
static TypeHandle VirtualFile::get_class_type(void);

1135 12 ~VirtualFile 0 4 1325 25 VirtualFile::~VirtualFile 0 0 0
32
VirtualFile::~VirtualFile(void);

1136 14 get_class_type 0 4 1326 36 VirtualFileComposite::get_class_type 0 1 491 0
61
static TypeHandle VirtualFileComposite::get_class_type(void);

1137 21 ~VirtualFileComposite 0 4 1326 43 VirtualFileComposite::~VirtualFileComposite 0 0 0
50
VirtualFileComposite::~VirtualFileComposite(void);

1138 15 get_file_system 0 4 1327 33 VirtualFileMount::get_file_system 0 1 492 68
/**
 * Returns the file system this mount object is attached to.
 */
72
inline VirtualFileSystem *VirtualFileMount::get_file_system(void) const;

1139 15 get_mount_point 0 4 1327 33 VirtualFileMount::get_mount_point 0 1 493 161
/**
 * Returns the name of the directory within the virtual file system that this
 * mount object is attached to.  This directory name will end with a slash.
 */
69
inline Filename const &VirtualFileMount::get_mount_point(void) const;

1140 15 get_mount_flags 0 4 1327 33 VirtualFileMount::get_mount_flags 0 1 494 100
/**
 * Returns the set of flags passed by the user to the
 * VirtualFileSystem::mount() command.
 */
57
inline int VirtualFileMount::get_mount_flags(void) const;

1141 6 output 0 6 1327 24 VirtualFileMount::output 0 1 495 10
/**
 *
 */
63
virtual void VirtualFileMount::output(std::ostream &out) const;

1142 5 write 0 6 1327 23 VirtualFileMount::write 0 1 496 10
/**
 *
 */
62
virtual void VirtualFileMount::write(std::ostream &out) const;

1143 14 get_class_type 0 4 1327 32 VirtualFileMount::get_class_type 0 1 497 0
57
static TypeHandle VirtualFileMount::get_class_type(void);

1144 25 VirtualFileMountMultifile 0 4 1328 52 VirtualFileMountMultifile::VirtualFileMountMultifile 0 1 498 10
/**
 *
 */
82
inline VirtualFileMountMultifile::VirtualFileMountMultifile(Multifile *multifile);

1145 13 get_multifile 0 4 1328 40 VirtualFileMountMultifile::get_multifile 0 1 499 76
/**
 * Returns the Multifile pointer that this mount object is based on.
 */
71
inline Multifile *VirtualFileMountMultifile::get_multifile(void) const;

1146 14 get_class_type 0 4 1328 41 VirtualFileMountMultifile::get_class_type 0 1 500 0
66
static TypeHandle VirtualFileMountMultifile::get_class_type(void);

1147 23 VirtualFileMountRamdisk 0 4 1329 48 VirtualFileMountRamdisk::VirtualFileMountRamdisk 0 1 501 10
/**
 *
 */
55
VirtualFileMountRamdisk::VirtualFileMountRamdisk(void);

1148 14 get_class_type 0 4 1329 39 VirtualFileMountRamdisk::get_class_type 0 1 502 0
64
static TypeHandle VirtualFileMountRamdisk::get_class_type(void);

1149 24 ~VirtualFileMountRamdisk 0 4 1329 49 VirtualFileMountRamdisk::~VirtualFileMountRamdisk 0 0 0
56
VirtualFileMountRamdisk::~VirtualFileMountRamdisk(void);

1150 22 VirtualFileMountSystem 0 4 1330 46 VirtualFileMountSystem::VirtualFileMountSystem 0 1 503 10
/**
 *
 */
89
inline VirtualFileMountSystem::VirtualFileMountSystem(Filename const &physical_filename);

1151 21 get_physical_filename 0 4 1330 45 VirtualFileMountSystem::get_physical_filename 0 1 504 112
/**
 * Returns the name of the source file on the OS filesystem of the directory
 * or file that is mounted.
 */
81
inline Filename const &VirtualFileMountSystem::get_physical_filename(void) const;

1152 14 get_class_type 0 4 1330 38 VirtualFileMountSystem::get_class_type 0 1 505 0
63
static TypeHandle VirtualFileMountSystem::get_class_type(void);

1153 23 ~VirtualFileMountSystem 0 4 1330 47 VirtualFileMountSystem::~VirtualFileMountSystem 0 0 0
54
VirtualFileMountSystem::~VirtualFileMountSystem(void);

1154 9 get_mount 0 4 1331 28 VirtualFileSimple::get_mount 0 1 506 69
/**
 * Returns the VirtualFileMount this file is associated with.
 */
66
inline VirtualFileMount *VirtualFileSimple::get_mount(void) const;

1155 19 is_implicit_pz_file 0 4 1331 38 VirtualFileSimple::is_implicit_pz_file 0 1 507 174
/**
 * Returns true if this file is a .pz file that should be implicitly
 * decompressed on load, or false if it is not a .pz file or if it should not
 * be decompressed.
 */
63
inline bool VirtualFileSimple::is_implicit_pz_file(void) const;

1156 14 get_class_type 0 4 1331 33 VirtualFileSimple::get_class_type 0 1 508 0
58
static TypeHandle VirtualFileSimple::get_class_type(void);

1157 18 ~VirtualFileSimple 0 4 1331 37 VirtualFileSimple::~VirtualFileSimple 0 0 0
44
VirtualFileSimple::~VirtualFileSimple(void);

1158 13 TemporaryFile 0 4 1332 28 TemporaryFile::TemporaryFile 0 2 509 510 10
/**
 *
 */
141
inline explicit TemporaryFile::TemporaryFile(Filename const &filename);
inline TemporaryFile::TemporaryFile(TemporaryFile const &) = default;

1159 14 get_class_type 0 4 1332 29 TemporaryFile::get_class_type 0 1 511 0
54
static TypeHandle TemporaryFile::get_class_type(void);

1160 17 IDecompressStream 0 4 1333 36 IDecompressStream::IDecompressStream 0 2 512 513 22
/**
 *
 */

/**
 *
 */
144
inline IDecompressStream::IDecompressStream(void);
inline explicit IDecompressStream::IDecompressStream(std::istream *source, bool owns_source);

1161 4 open 0 4 1333 23 IDecompressStream::open 0 1 514 10
/**
 *
 */
90
inline IDecompressStream &IDecompressStream::open(std::istream *source, bool owns_source);

1162 5 close 0 4 1333 24 IDecompressStream::close 0 1 515 118
/**
 * Resets the ZStream to empty, but does not actually close the source istream
 * unless owns_source was true.
 */
57
inline IDecompressStream &IDecompressStream::close(void);

1163 18 ~IDecompressStream 0 4 1333 37 IDecompressStream::~IDecompressStream 0 0 0
44
IDecompressStream::~IDecompressStream(void);

1164 15 OCompressStream 0 4 1334 32 OCompressStream::OCompressStream 0 2 516 517 22
/**
 *
 */

/**
 *
 */
159
inline OCompressStream::OCompressStream(void);
inline explicit OCompressStream::OCompressStream(std::ostream *dest, bool owns_dest, int compression_level = 6);

1165 4 open 0 4 1334 21 OCompressStream::open 0 1 518 10
/**
 *
 */
109
inline OCompressStream &OCompressStream::open(std::ostream *dest, bool owns_dest, int compression_level = 6);

1166 5 close 0 4 1334 22 OCompressStream::close 0 1 519 114
/**
 * Resets the ZStream to empty, but does not actually close the dest ostream
 * unless owns_dest was true.
 */
53
inline OCompressStream &OCompressStream::close(void);

1167 16 ~OCompressStream 0 4 1334 33 OCompressStream::~OCompressStream 0 0 0
40
OCompressStream::~OCompressStream(void);

1168 13 get_num_files 0 4 1335 30 VirtualFileList::get_num_files 0 1 521 51
/**
 * Returns the number of files in the list.
 */
62
inline std::size_t VirtualFileList::get_num_files(void) const;

1169 8 get_file 0 4 1335 25 VirtualFileList::get_file 0 1 522 44
/**
 * Returns the nth file in the list.
 */
67
inline VirtualFile *VirtualFileList::get_file(std::size_t n) const;

1170 11 operator [] 0 4 1335 28 VirtualFileList::operator [] 0 1 523 44
/**
 * Returns the nth file in the list.
 */
70
inline VirtualFile *VirtualFileList::operator [](std::size_t n) const;

1171 4 size 0 4 1335 21 VirtualFileList::size 0 1 524 51
/**
 * Returns the number of files in the list.
 */
53
inline std::size_t VirtualFileList::size(void) const;

1172 11 operator += 0 4 1335 28 VirtualFileList::operator += 0 1 525 0
71
inline void VirtualFileList::operator +=(VirtualFileList const &other);

1173 10 operator + 0 4 1335 27 VirtualFileList::operator + 0 1 526 0
87
inline VirtualFileList VirtualFileList::operator +(VirtualFileList const &other) const;

1174 15 VirtualFileList 0 4 1335 32 VirtualFileList::VirtualFileList 0 1 520 10
/**
 *
 */
75
inline VirtualFileList::VirtualFileList(VirtualFileList const &) = default;

1175 17 VirtualFileSystem 0 4 1336 36 VirtualFileSystem::VirtualFileSystem 0 1 527 10
/**
 *
 */
43
VirtualFileSystem::VirtualFileSystem(void);

1176 18 ~VirtualFileSystem 0 4 1336 37 VirtualFileSystem::~VirtualFileSystem 0 0 10
/**
 *
 */
44
VirtualFileSystem::~VirtualFileSystem(void);

1177 5 mount 0 4 1336 24 VirtualFileSystem::mount 0 3 528 529 530 1288
/**
 * Mounts the indicated Multifile at the given mount point.
 */

/**
 * Mounts the indicated system file or directory at the given mount point.  If
 * the named file is a directory, mounts the directory.  If the named file is
 * a Multifile, mounts it as a Multifile.  Returns true on success, false on
 * failure.
 *
 * A given system directory may be mounted to multiple different mount point,
 * and the same mount point may share multiple system directories.  In the
 * case of ambiguities (that is, two different files with exactly the same
 * full pathname), the most-recently mounted system wins.
 *
 * The filename specified as the first parameter must refer to a real,
 * physical filename on disk; it cannot be a virtual file already appearing
 * within the vfs filespace.  However, it is possible to mount such a file;
 * see mount_loop() for this.
 *
 * Note that a mounted VirtualFileSystem directory is fully case-sensitive,
 * unlike the native Windows file system, so you must refer to files within
 * the virtual file system with exactly the right case.
 */

/**
 * Adds the given VirtualFileMount object to the mount list.  This is a lower-
 * level function than the other flavors of mount(); it requires you to create
 * a VirtualFileMount object specifically.
 */
328
bool VirtualFileSystem::mount(Multifile *multifile, Filename const &mount_point, int flags);
bool VirtualFileSystem::mount(Filename const &physical_filename, Filename const &mount_point, int flags, std::string const &password = "");
bool VirtualFileSystem::mount(VirtualFileMount *mount, Filename const &mount_point, int flags);

1178 10 mount_loop 0 4 1336 29 VirtualFileSystem::mount_loop 0 1 531 587
/**
 * This is similar to mount(), but it receives the name of a Multifile that
 * already appears within the virtual file system.  It can be used to mount a
 * Multifile that is itself hosted within a virtually-mounted Multifile.
 *
 * This interface can also be used to mount physical files (that appear within
 * the virtual filespace), but it cannot be used to mount directories.  Use
 * mount() if you need to mount a directory.
 *
 * Note that there is additional overhead, in the form of additional buffer
 * copies of the data, for recursively mounting a multifile like this.
 */
143
bool VirtualFileSystem::mount_loop(Filename const &virtual_filename, Filename const &mount_point, int flags, std::string const &password = "");

1179 7 unmount 0 4 1336 26 VirtualFileSystem::unmount 0 3 532 533 534 419
/**
 * Unmounts all appearances of the indicated Multifile from the file system.
 * Returns the number of appearances unmounted.
 */

/**
 * Unmounts all appearances of the indicated directory name or multifile name
 * from the file system.  Returns the number of appearances unmounted.
 */

/**
 * Unmounts the indicated VirtualFileMount object from the file system.
 * Returns the number of appearances unmounted.
 */
177
int VirtualFileSystem::unmount(Multifile *multifile);
int VirtualFileSystem::unmount(Filename const &physical_filename);
int VirtualFileSystem::unmount(VirtualFileMount *mount);

1180 13 unmount_point 0 4 1336 32 VirtualFileSystem::unmount_point 0 1 535 136
/**
 * Unmounts all systems attached to the given mount point from the file
 * system.  Returns the number of appearances unmounted.
 */
66
int VirtualFileSystem::unmount_point(Filename const &mount_point);

1181 11 unmount_all 0 4 1336 30 VirtualFileSystem::unmount_all 0 1 536 96
/**
 * Unmounts all files from the file system.  Returns the number of systems
 * unmounted.
 */
41
int VirtualFileSystem::unmount_all(void);

1182 14 get_num_mounts 0 4 1336 33 VirtualFileSystem::get_num_mounts 0 1 537 65
/**
 * Returns the number of individual mounts in the system.
 */
50
int VirtualFileSystem::get_num_mounts(void) const;

1183 9 get_mount 0 4 1336 28 VirtualFileSystem::get_mount 0 1 538 47
/**
 * Returns the nth mount in the system.
 */
72
PointerTo< VirtualFileMount > VirtualFileSystem::get_mount(int n) const;

1184 5 clear 0 4 1339 40 PointerToBase< VirtualFileMount >::clear 0 1 578 0
59
inline void PointerToBase< VirtualFileMount >::clear(void);

1185 6 output 0 4 1339 41 PointerToBase< VirtualFileMount >::output 0 1 579 0
72
void PointerToBase< VirtualFileMount >::output(std::ostream &out) const;

1186 9 PointerTo 0 4 1338 40 PointerTo< VirtualFileMount >::PointerTo 0 4 569 570 571 572 0
353
inline constexpr PointerTo< VirtualFileMount >::PointerTo(void) noexcept = default;
inline explicit constexpr PointerTo< VirtualFileMount >::PointerTo(decltype(nullptr) ) noexcept;
inline PointerTo< VirtualFileMount >::PointerTo(VirtualFileMount *ptr) noexcept;
inline PointerTo< VirtualFileMount >::PointerTo(PointerTo< VirtualFileMount > const &copy);

1187 1 p 0 4 1338 32 PointerTo< VirtualFileMount >::p 0 1 573 289
// If your base class is a derivative of TypedObject, you might want to use
// the DCAST macro defined in typedObject.h instead, e.g.  DCAST(MyType,
// ptr).  This provides a clean downcast that doesn't require .p() or any
// double-casting, and it can be run-time checked for correctness.
82
constexpr VirtualFileMount *PointerTo< VirtualFileMount >::p(void) const noexcept;

1188 10 operator = 0 4 1338 41 PointerTo< VirtualFileMount >::operator = 0 2 574 575 0
175
inline void PointerTo< VirtualFileMount >::operator =(VirtualFileMount *ptr);
inline void PointerTo< VirtualFileMount >::operator =(PointerTo< VirtualFileMount > const &copy);

1189 7 is_null 0 4 1338 38 PointerTo< VirtualFileMount >::is_null 0 1 576 0
63
inline bool PointerTo< VirtualFileMount >::is_null(void) const;

1190 5 clear 0 4 1338 36 PointerTo< VirtualFileMount >::clear 0 1 577 0
55
inline void PointerTo< VirtualFileMount >::clear(void);

1191 10 ~PointerTo 0 4 1338 41 PointerTo< VirtualFileMount >::~PointerTo 0 0 0
48
PointerTo< VirtualFileMount >::~PointerTo(void);

1192 5 chdir 0 4 1336 24 VirtualFileSystem::chdir 0 1 539 171
/**
 * Changes the current directory.  This is used to resolve relative pathnames
 * in get_file() and/or find_file().  Returns true if successful, false
 * otherwise.
 */
61
bool VirtualFileSystem::chdir(Filename const &new_directory);

1193 7 get_cwd 0 4 1336 26 VirtualFileSystem::get_cwd 0 1 540 60
/**
 * Returns the current directory name.  See chdir().
 */
48
Filename VirtualFileSystem::get_cwd(void) const;

1194 14 make_directory 0 4 1336 33 VirtualFileSystem::make_directory 0 1 541 263
/**
 * Attempts to create a directory within the file system.  Returns true on
 * success, false on failure (for instance, because the parent directory does
 * not exist, or is read-only).  If the directory already existed prior to
 * this call, returns true.
 */
65
bool VirtualFileSystem::make_directory(Filename const &filename);

1195 19 make_directory_full 0 4 1336 38 VirtualFileSystem::make_directory_full 0 1 542 169
/**
 * Attempts to create a directory within the file system.  Will also create
 * any intervening directories needed.  Returns true on success, false on
 * failure.
 */
70
bool VirtualFileSystem::make_directory_full(Filename const &filename);

1196 8 get_file 0 4 1336 27 VirtualFileSystem::get_file 0 1 543 537
/**
 * Looks up the file by the indicated name in the file system.  Returns a
 * VirtualFile pointer representing the file if it is found, or NULL if it is
 * not.
 *
 * If status_only is true, the file will be checked for existence and length
 * and so on, but the returned file's contents cannot be read.  This is an
 * optimization which is especially important for certain mount types, for
 * instance HTTP, for which opening a file to determine its status is
 * substantially less expensive than opening it to read its contents.
 */
111
PointerTo< VirtualFile > VirtualFileSystem::get_file(Filename const &filename, bool status_only = false) const;

1197 11 create_file 0 4 1336 30 VirtualFileSystem::create_file 0 1 544 298
/**
 * Attempts to create a file by the indicated name in the filesystem, if
 * possible, and returns it.  If a file by this name already exists, returns
 * the same thing as get_file().  If the filename is located within a read-
 * only directory, or the directory doesn't exist, returns NULL.
 */
82
PointerTo< VirtualFile > VirtualFileSystem::create_file(Filename const &filename);

1198 9 find_file 0 4 1336 28 VirtualFileSystem::find_file 0 1 545 173
/**
 * Uses the indicated search path to find the file within the file system.
 * Returns the first occurrence of the file found, or NULL if the file cannot
 * be found.
 */
143
PointerTo< VirtualFile > VirtualFileSystem::find_file(Filename const &filename, DSearchPath const &searchpath, bool status_only = false) const;

1199 11 delete_file 0 4 1336 30 VirtualFileSystem::delete_file 0 1 546 208
/**
 * Attempts to delete the indicated file or directory.  This can remove a
 * single file or an empty directory.  It will not remove a nonempty
 * directory.  Returns true on success, false on failure.
 */
62
bool VirtualFileSystem::delete_file(Filename const &filename);

1200 11 rename_file 0 4 1336 30 VirtualFileSystem::rename_file 0 1 547 599
/**
 * Attempts to move or rename the indicated file or directory.  If the
 * original file is an ordinary file, it will quietly replace any already-
 * existing file in the new filename (but not a directory).  If the original
 * file is a directory, the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */
97
bool VirtualFileSystem::rename_file(Filename const &orig_filename, Filename const &new_filename);

1201 9 copy_file 0 4 1336 28 VirtualFileSystem::copy_file 0 1 548 131
/**
 * Attempts to copy the contents of the indicated file to the indicated file.
 * Returns true on success, false on failure.
 */
95
bool VirtualFileSystem::copy_file(Filename const &orig_filename, Filename const &new_filename);

1202 16 resolve_filename 0 4 1336 35 VirtualFileSystem::resolve_filename 0 1 549 174
/**
 * Searches the given search path for the filename.  If it is found, updates
 * the filename to the full pathname found and returns true; otherwise,
 * returns false.
 */
147
bool VirtualFileSystem::resolve_filename(Filename &filename, DSearchPath const &searchpath, std::string const &default_extension = string()) const;

1203 14 find_all_files 0 4 1336 33 VirtualFileSystem::find_all_files 0 1 550 363
/**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */
132
int VirtualFileSystem::find_all_files(Filename const &filename, DSearchPath const &searchpath, DSearchPath::Results &results) const;

1204 6 exists 0 4 1336 25 VirtualFileSystem::exists 0 1 551 71
/**
 * Convenience function; returns true if the named file exists.
 */
70
inline bool VirtualFileSystem::exists(Filename const &filename) const;

1205 12 is_directory 0 4 1336 31 VirtualFileSystem::is_directory 0 1 552 93
/**
 * Convenience function; returns true if the named file exists and is a
 * directory.
 */
76
inline bool VirtualFileSystem::is_directory(Filename const &filename) const;

1206 15 is_regular_file 0 4 1336 34 VirtualFileSystem::is_regular_file 0 1 553 96
/**
 * Convenience function; returns true if the named file exists and is a
 * regular file.
 */
79
inline bool VirtualFileSystem::is_regular_file(Filename const &filename) const;

1207 14 scan_directory 0 4 1336 33 VirtualFileSystem::scan_directory 0 1 554 247
/**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */
102
inline PointerTo< VirtualFileList > VirtualFileSystem::scan_directory(Filename const &filename) const;

1208 2 ls 0 4 1336 21 VirtualFileSystem::ls 0 1 555 80
/**
 * Convenience function; lists the files within the indicated directory.
 */
66
inline void VirtualFileSystem::ls(Filename const &filename) const;

1209 6 ls_all 0 4 1336 25 VirtualFileSystem::ls_all 0 1 556 117
/**
 * Convenience function; lists the files within the indicated directory, and
 * all files below, recursively.
 */
70
inline void VirtualFileSystem::ls_all(Filename const &filename) const;

1210 5 write 0 4 1336 24 VirtualFileSystem::write 0 1 557 75
/**
 * Print debugging information.  (e.g.  from Python or gdb prompt).
 */
55
void VirtualFileSystem::write(std::ostream &out) const;

1211 14 get_global_ptr 0 4 1336 33 VirtualFileSystem::get_global_ptr 0 1 558 423
/**
 * Returns the default global VirtualFileSystem.  You may create your own
 * personal VirtualFileSystem objects and use them for whatever you like, but
 * Panda will attempt to load models and stuff from this default object.
 *
 * Initially, the global VirtualFileSystem is set up to mount the OS
 * filesystem to root; i.e.  it is equivalent to the OS filesystem.  This may
 * be subsequently adjusted by the user.
 */
66
static VirtualFileSystem *VirtualFileSystem::get_global_ptr(void);

1212 9 read_file 0 4 1336 28 VirtualFileSystem::read_file 0 1 559 1244
/**
 * Convenience function; returns the entire contents of the indicated file as
 * a string.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */

/**
 * Convenience function; fills the string up with the data from the indicated
 * file, if it exists and can be read.  Returns true on success, false
 * otherwise.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */

/**
 * Convenience function; fills the pvector up with the data from the indicated
 * file, if it exists and can be read.  Returns true on success, false
 * otherwise.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */
89
PyObject *VirtualFileSystem::read_file(Filename const &filename, bool auto_unwrap) const;

1213 14 open_read_file 0 4 1336 33 VirtualFileSystem::open_read_file 0 1 560 424
/**
 * Convenience function; returns a newly allocated istream if the file exists
 * and can be read, or NULL otherwise.  Does not return an invalid istream.
 *
 * If auto_unwrap is true, an explicitly-named .pz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */
98
std::istream *VirtualFileSystem::open_read_file(Filename const &filename, bool auto_unwrap) const;

1214 15 close_read_file 0 4 1336 34 VirtualFileSystem::close_read_file 0 1 561 243
/**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
69
static void VirtualFileSystem::close_read_file(std::istream *stream);

1215 10 write_file 0 4 1336 29 VirtualFileSystem::write_file 0 1 562 409
/**
 * Convenience function; writes the entire contents of the indicated file as a
 * string.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.
 */

/**
 * Convenience function; writes the entire contents of the indicated file as a
 * block of data.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.
 */
98
PyObject *VirtualFileSystem::write_file(Filename const &filename, PyObject *data, bool auto_wrap);

1216 15 open_write_file 0 4 1336 34 VirtualFileSystem::open_write_file 0 1 563 345
/**
 * Convenience function; returns a newly allocated ostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid ostream.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.  If truncate is true, the file is truncated to
 * zero length before writing.
 */
106
std::ostream *VirtualFileSystem::open_write_file(Filename const &filename, bool auto_wrap, bool truncate);

1217 16 open_append_file 0 4 1336 35 VirtualFileSystem::open_append_file 0 1 564 180
/**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */
76
std::ostream *VirtualFileSystem::open_append_file(Filename const &filename);

1218 16 close_write_file 0 4 1336 35 VirtualFileSystem::close_write_file 0 1 565 244
/**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
70
static void VirtualFileSystem::close_write_file(std::ostream *stream);

1219 20 open_read_write_file 0 4 1336 39 VirtualFileSystem::open_read_write_file 0 1 566 169
/**
 * Convenience function; returns a newly allocated iostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid
 * iostream.
 */
96
std::iostream *VirtualFileSystem::open_read_write_file(Filename const &filename, bool truncate);

1220 21 open_read_append_file 0 4 1336 40 VirtualFileSystem::open_read_append_file 0 1 567 194
/**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */
82
std::iostream *VirtualFileSystem::open_read_append_file(Filename const &filename);

1221 21 close_read_write_file 0 4 1336 40 VirtualFileSystem::close_read_write_file 0 1 568 250
/**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */
76
static void VirtualFileSystem::close_read_write_file(std::iostream *stream);

1222 13 get_long_time 0 4 1340 24 TrueClock::get_long_time 0 1 580 420
// get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul.

// get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul.

/**
 *
 */
38
double TrueClock::get_long_time(void);

1223 14 get_short_time 0 4 1340 25 TrueClock::get_short_time 0 1 581 426
// get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely.

// get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely.

/**
 *
 */
46
inline double TrueClock::get_short_time(void);

1224 18 get_short_raw_time 0 4 1340 29 TrueClock::get_short_raw_time 0 1 582 302
// get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS.

// get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS.

/**
 *
 */
43
double TrueClock::get_short_raw_time(void);

1225 15 get_error_count 0 4 1340 26 TrueClock::get_error_count 0 1 583 369
/**
 * Returns the number of clock errors that have been detected.  Each time a
 * clock error is detected, in which the value returned by either of the above
 * methods is suspect, the value returned by this method will be incremented.
 * Applications can monitor this value and react, for instance, by
 * resynchronizing their clocks each time this value changes.
 */
50
inline int TrueClock::get_error_count(void) const;

1226 14 get_global_ptr 0 4 1340 25 TrueClock::get_global_ptr 0 1 584 70
/**
 * Returns a pointer to the one TrueClock object in the world.
 */
57
static inline TrueClock *TrueClock::get_global_ptr(void);

1227 16 set_cpu_affinity 0 4 1340 27 TrueClock::set_cpu_affinity 0 1 585 10
/**
 *
 */
54
bool TrueClock::set_cpu_affinity(uint32_t mask) const;

1228 9 Patchfile 0 4 1342 20 Patchfile::Patchfile 0 2 586 587 111
/**
 * Create a patch file and initializes internal data
 */

/**
 * Create patch file with buffer to patch
 */
86
Patchfile::Patchfile(void);
explicit Patchfile::Patchfile(PointerTo< Buffer > buffer);

1229 10 ~Patchfile 0 4 1342 21 Patchfile::~Patchfile 0 0 10
/**
 *
 */
28
Patchfile::~Patchfile(void);

1230 5 build 0 4 1342 16 Patchfile::build 0 1 588 359
/**
 *
 * This implementation uses the "greedy differencing algorithm" described in
 * the masters thesis "Differential Compression: A Generalized Solution for
 * Binary Files" by Randal C. Burns (p.13). For an original file of size M and
 * a new file of size N, this algorithm is O(M) in space and O(M*N) (worst-
 * case) in time.  return false on error
 */
82
bool Patchfile::build(Filename file_orig, Filename file_new, Filename patch_name);

1231 11 read_header 0 4 1342 22 Patchfile::read_header 0 1 589 193
/**
 * Opens the patch file for reading, and gets the header information from the
 * file but does not begin to do any real work.  This can be used to query the
 * data stored in the patch.
 */
55
int Patchfile::read_header(Filename const &patch_file);

1232 8 initiate 0 4 1342 19 Patchfile::initiate 0 2 590 591 236
/**
 * Set up to apply the patch to the file (original file and patch are
 * destroyed in the process).
 */

/**
 * Set up to apply the patch to the file.  In this form, neither the original
 * file nor the patch file are destroyed.
 */
183
int Patchfile::initiate(Filename const &patch_file, Filename const &file);
int Patchfile::initiate(Filename const &patch_file, Filename const &orig_file, Filename const &target_file);

1233 3 run 0 4 1342 14 Patchfile::run 0 1 592 350
/**
 * Perform one buffer's worth of patching Returns EU_ok while patching Returns
 * EU_success when done If error happens will return one of: EU_error_abort :
 * Patching has not been initiated EU_error_file_invalid : file is corrupted
 * EU_error_invalid_checksum : incompatible patch file
 * EU_error_write_file_rename : could not rename file
 */
25
int Patchfile::run(void);

1234 5 apply 0 4 1342 16 Patchfile::apply 0 2 593 594 311
/**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will delete the patch file and overwrite the original file.
 */

/**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will not delete any files.
 */
155
bool Patchfile::apply(Filename &patch_file, Filename &file);
bool Patchfile::apply(Filename &patch_file, Filename &orig_file, Filename const &target_file);

1235 12 get_progress 0 4 1342 23 Patchfile::get_progress 0 1 595 125
/**
 * Returns a value in the range 0..1, representing the amount of progress
 * through the patchfile, during a session.
 */
55
inline PN_stdfloat Patchfile::get_progress(void) const;

1236 19 set_allow_multifile 0 4 1342 30 Patchfile::set_allow_multifile 0 1 596 362
/**
 * If this flag is set true, the Patchfile will make a special case for
 * patching Panda Multifiles, if detected, and attempt to patch them on a
 * subfile-by-subfile basis.  If this flag is false, the Patchfile will always
 * patch the file on a full-file basis.
 *
 * This has effect only when building patches; it is not used for applying
 * patches.
 */
65
inline void Patchfile::set_allow_multifile(bool allow_multifile);

1237 19 get_allow_multifile 0 4 1342 30 Patchfile::get_allow_multifile 0 1 597 37
/**
 * See set_allow_multifile().
 */
49
inline bool Patchfile::get_allow_multifile(void);

1238 20 set_footprint_length 0 4 1342 31 Patchfile::set_footprint_length 0 1 598 10
/**
 *
 */
56
inline void Patchfile::set_footprint_length(int length);

1239 20 get_footprint_length 0 4 1342 31 Patchfile::get_footprint_length 0 1 599 10
/**
 *
 */
49
inline int Patchfile::get_footprint_length(void);

1240 22 reset_footprint_length 0 4 1342 33 Patchfile::reset_footprint_length 0 1 600 10
/**
 *
 */
52
inline void Patchfile::reset_footprint_length(void);

1241 15 has_source_hash 0 4 1342 26 Patchfile::has_source_hash 0 1 601 145
/**
 * Returns true if the MD5 hash for the source file is known.  (Some early
 * versions of the patch file did not store this information.)
 */
51
inline bool Patchfile::has_source_hash(void) const;

1242 15 get_source_hash 0 4 1342 26 Patchfile::get_source_hash 0 1 602 52
/**
 * Returns the MD5 hash for the source file.
 */
61
inline HashVal const &Patchfile::get_source_hash(void) const;

1243 15 get_result_hash 0 4 1342 26 Patchfile::get_result_hash 0 1 603 78
/**
 * Returns the MD5 hash for the file after the patch has been applied.
 */
61
inline HashVal const &Patchfile::get_result_hash(void) const;

1244 13 password_hash 0 1 0 13 password_hash 0 1 635 0
103
std::string password_hash(std::string const &password, std::string const &salt, int iters, int keylen);

1245 12 ProfileTimer 0 4 1346 26 ProfileTimer::ProfileTimer 0 2 604 605 0
136
explicit ProfileTimer::ProfileTimer(char const *name = 0, int maxEntries = 4096);
ProfileTimer::ProfileTimer(ProfileTimer const &other);

1246 13 ~ProfileTimer 0 4 1346 27 ProfileTimer::~ProfileTimer 0 0 0
34
ProfileTimer::~ProfileTimer(void);

1247 4 init 0 4 1346 18 ProfileTimer::init 0 1 606 0
65
void ProfileTimer::init(char const *name, int maxEntries = 4096);

1248 2 on 0 4 1346 16 ProfileTimer::on 0 1 607 0
28
void ProfileTimer::on(void);

1249 4 mark 0 4 1346 18 ProfileTimer::mark 0 1 608 0
41
void ProfileTimer::mark(char const *tag);

1250 3 off 0 4 1346 17 ProfileTimer::off 0 2 609 610 0
70
void ProfileTimer::off(void);
void ProfileTimer::off(char const *tag);

1251 12 getTotalTime 0 4 1346 26 ProfileTimer::getTotalTime 0 1 611 110
// Don't call any of the following during timing: (Because they are slow,
// not because anything will break).
46
double ProfileTimer::getTotalTime(void) const;

1252 16 consolidateAllTo 0 4 1346 30 ProfileTimer::consolidateAllTo 0 1 612 0
76
static void ProfileTimer::consolidateAllTo(std::ostream &out = ::std::cout);

1253 13 consolidateTo 0 4 1346 27 ProfileTimer::consolidateTo 0 1 613 0
72
void ProfileTimer::consolidateTo(std::ostream &out = ::std::cout) const;

1254 10 printAllTo 0 4 1346 24 ProfileTimer::printAllTo 0 1 614 0
70
static void ProfileTimer::printAllTo(std::ostream &out = ::std::cout);

1255 7 printTo 0 4 1346 21 ProfileTimer::printTo 0 1 615 0
66
void ProfileTimer::printTo(std::ostream &out = ::std::cout) const;

1256 11 was_deleted 0 4 1347 30 WeakPointerToVoid::was_deleted 0 1 616 384
/**
 * Returns true if the object we are pointing to has been deleted, false
 * otherwise.  If this returns true, it means that the pointer can not yet be
 * reused, but it does not guarantee that it can be safely accessed.  See the
 * lock() method for a safe way to access the underlying pointer.
 *
 * This will always return true for a null pointer, unlike is_valid_pointer().
 */
55
inline bool WeakPointerToVoid::was_deleted(void) const;

1257 16 is_valid_pointer 0 4 1347 35 WeakPointerToVoid::is_valid_pointer 0 1 617 122
/**
 * Returns true if the pointer is not null and the object has not been
 * deleted.  See was_deleted() for caveats.
 */
60
inline bool WeakPointerToVoid::is_valid_pointer(void) const;

1258 18 ~WeakPointerToVoid 0 4 1347 37 WeakPointerToVoid::~WeakPointerToVoid 0 0 0
44
WeakPointerToVoid::~WeakPointerToVoid(void);

635
1 0 0 7 13 1352 654 0 0 1 4 copy 1 1350  
2 0 0 7 13 1352 654 0 0 1 4 copy 1 1353  
3 0 0 4 14 1355 0 0 0 1 4 this 3 1352  
4 0 0 6 15 1289 0 0 0 1 4 this 3 1350  
5 0 0 6 16 1341 0 0 0 2 4 this 3 1350  1 n 1 1289  
6 0 0 6 17 1341 0 0 0 2 4 this 3 1350  1 n 1 1289  
7 0 0 6 18 1356 0 0 0 1 4 this 3 1350  
8 0 0 6 19 1356 0 0 0 3 4 this 3 1350  1 n 1 1289  5 count 1 1289  
9 0 0 6 20 1291 0 0 0 1 4 this 3 1350  
10 0 0 6 21 1291 0 0 0 1 4 this 3 1350  
11 0 0 6 22 1289 0 0 0 2 4 this 3 1350  6 param0 0 1341  
12 0 0 6 23 1291 0 0 0 3 4 this 3 1350  4 view 1 1359  5 flags 1 1291  
13 0 0 4 24 1355 0 0 0 2 4 this 3 1350  4 view 1 1359  
14 0 0 4 10 1355 0 0 0 1 4 this 3 1362  
15 0 0 4 11 1355 0 0 0 2 4 this 3 1363  3 out 1 1365  
16 0 0 6 7 1287 0 0 130 /**
 * Returns true if the PointerTo is a NULL pointer, false otherwise.  (Direct
 * comparison to a NULL pointer also works.)
 */ 1 4 this 3 1366  
17 0 0 6 8 1288 0 0 10 /**
 *
 */ 1 4 this 3 1366  
18 0 0 7 33 1370 670 0 0 1 4 copy 1 1368  
19 0 0 7 33 1370 670 0 0 1 4 copy 1 1371  
20 0 0 4 34 1355 0 0 0 1 4 this 3 1370  
21 0 0 6 35 1289 0 0 0 1 4 this 3 1368  
22 0 0 6 36 1344 0 0 0 2 4 this 3 1368  1 n 1 1289  
23 0 0 6 37 1344 0 0 0 2 4 this 3 1368  1 n 1 1289  
24 0 0 6 38 1356 0 0 0 1 4 this 3 1368  
25 0 0 6 39 1356 0 0 0 3 4 this 3 1368  1 n 1 1289  5 count 1 1289  
26 0 0 6 40 1291 0 0 0 1 4 this 3 1368  
27 0 0 6 41 1291 0 0 0 1 4 this 3 1368  
28 0 0 6 42 1289 0 0 0 2 4 this 3 1368  6 param0 0 1344  
29 0 0 6 43 1291 0 0 0 3 4 this 3 1368  4 view 1 1359  5 flags 1 1291  
30 0 0 4 44 1355 0 0 0 2 4 this 3 1368  4 view 1 1359  
31 0 0 4 30 1355 0 0 0 1 4 this 3 1373  
32 0 0 4 31 1355 0 0 0 2 4 this 3 1374  3 out 1 1365  
33 0 0 7 53 1378 686 0 0 1 4 copy 1 1376  
34 0 0 7 53 1378 686 0 0 1 4 copy 1 1379  
35 0 0 4 54 1355 0 0 0 1 4 this 3 1378  
36 0 0 6 55 1289 0 0 0 1 4 this 3 1376  
37 0 0 6 56 1291 0 0 0 2 4 this 3 1376  1 n 1 1289  
38 0 0 6 57 1291 0 0 0 2 4 this 3 1376  1 n 1 1289  
39 0 0 6 58 1356 0 0 0 1 4 this 3 1376  
40 0 0 6 59 1356 0 0 0 3 4 this 3 1376  1 n 1 1289  5 count 1 1289  
41 0 0 6 60 1291 0 0 0 1 4 this 3 1376  
42 0 0 6 61 1291 0 0 0 1 4 this 3 1376  
43 0 0 6 62 1289 0 0 0 2 4 this 3 1376  6 param0 0 1291  
44 0 0 6 63 1291 0 0 0 3 4 this 3 1376  4 view 1 1359  5 flags 1 1291  
45 0 0 4 64 1355 0 0 0 2 4 this 3 1376  4 view 1 1359  
46 0 0 4 50 1355 0 0 0 1 4 this 3 1381  
47 0 0 4 51 1355 0 0 0 2 4 this 3 1382  3 out 1 1365  
48 0 0 7 73 1386 702 0 0 1 4 copy 1 1384  
49 0 0 7 73 1386 702 0 0 1 4 copy 1 1387  
50 0 0 4 74 1355 0 0 0 1 4 this 3 1386  
51 0 0 6 75 1289 0 0 0 1 4 this 3 1384  
52 0 0 6 76 1389 0 0 0 2 4 this 3 1384  1 n 1 1289  
53 0 0 6 77 1389 0 0 0 2 4 this 3 1384  1 n 1 1289  
54 0 0 6 78 1356 0 0 0 1 4 this 3 1384  
55 0 0 6 79 1356 0 0 0 3 4 this 3 1384  1 n 1 1289  5 count 1 1289  
56 0 0 6 80 1291 0 0 0 1 4 this 3 1384  
57 0 0 6 81 1291 0 0 0 1 4 this 3 1384  
58 0 0 6 82 1289 0 0 0 2 4 this 3 1384  6 param0 0 1389  
59 0 0 6 83 1291 0 0 0 3 4 this 3 1384  4 view 1 1359  5 flags 1 1291  
60 0 0 4 84 1355 0 0 0 2 4 this 3 1384  4 view 1 1359  
61 0 0 4 70 1355 0 0 0 1 4 this 3 1390  
62 0 0 4 71 1355 0 0 0 2 4 this 3 1391  3 out 1 1365  
63 0 0 7 88 1393 722 0 0 1 4 copy 1 1353  
64 0 0 7 88 1393 722 0 0 1 6 source 1 1356  
65 0 0 7 88 1393 722 0 0 1 11 type_handle 1 1394  
66 0 0 7 89 1393 722 0 0 2 1 n 1 1289  11 type_handle 1 1394  
67 0 0 4 90 1355 0 0 0 1 4 this 3 1393  
68 0 0 6 91 1289 0 0 0 1 4 this 3 1353  
69 0 0 4 92 1355 0 0 0 2 4 this 3 1393  1 x 1 1341  
70 0 0 4 93 1355 0 0 0 1 4 this 3 1393  
71 0 0 6 94 1341 0 0 0 2 4 this 3 1353  1 n 1 1289  
72 0 0 4 95 1355 0 0 0 3 4 this 3 1393  1 n 1 1289  5 value 1 1341  
73 0 0 6 96 1341 0 0 0 2 4 this 3 1353  1 n 1 1289  
74 0 0 4 97 1355 0 0 0 3 4 this 3 1393  1 n 1 1289  5 value 1 1341  
75 0 0 6 98 1356 0 0 0 1 4 this 3 1353  
76 0 0 4 99 1355 0 0 0 2 4 this 3 1393  4 data 1 1356  
77 0 0 6 100 1356 0 0 0 3 4 this 3 1353  1 n 1 1289  5 count 1 1289  
78 0 0 4 101 1355 0 0 0 4 4 this 3 1393  1 n 1 1289  5 count 1 1289  4 data 1 1396  
79 0 0 6 102 1291 0 0 0 1 4 this 3 1353  
80 0 0 6 103 1291 0 0 0 1 4 this 3 1353  
81 0 0 6 104 1289 0 0 0 2 4 this 3 1353  6 param0 0 1341  
82 0 0 6 105 1291 0 0 0 3 4 this 3 1393  4 view 1 1359  5 flags 1 1291  
83 0 0 4 106 1355 0 0 0 2 4 this 3 1353  4 view 1 1359  
84 0 0 7 110 1397 742 0 0 1 4 copy 1 1371  
85 0 0 7 110 1397 742 0 0 1 6 source 1 1356  
86 0 0 7 110 1397 742 0 0 1 11 type_handle 1 1394  
87 0 0 7 111 1397 742 0 0 2 1 n 1 1289  11 type_handle 1 1394  
88 0 0 4 112 1355 0 0 0 1 4 this 3 1397  
89 0 0 6 113 1289 0 0 0 1 4 this 3 1371  
90 0 0 4 114 1355 0 0 0 2 4 this 3 1397  1 x 1 1344  
91 0 0 4 115 1355 0 0 0 1 4 this 3 1397  
92 0 0 6 116 1344 0 0 0 2 4 this 3 1371  1 n 1 1289  
93 0 0 4 117 1355 0 0 0 3 4 this 3 1397  1 n 1 1289  5 value 1 1344  
94 0 0 6 118 1344 0 0 0 2 4 this 3 1371  1 n 1 1289  
95 0 0 4 119 1355 0 0 0 3 4 this 3 1397  1 n 1 1289  5 value 1 1344  
96 0 0 6 120 1356 0 0 0 1 4 this 3 1371  
97 0 0 4 121 1355 0 0 0 2 4 this 3 1397  4 data 1 1356  
98 0 0 6 122 1356 0 0 0 3 4 this 3 1371  1 n 1 1289  5 count 1 1289  
99 0 0 4 123 1355 0 0 0 4 4 this 3 1397  1 n 1 1289  5 count 1 1289  4 data 1 1396  
100 0 0 6 124 1291 0 0 0 1 4 this 3 1371  
101 0 0 6 125 1291 0 0 0 1 4 this 3 1371  
102 0 0 6 126 1289 0 0 0 2 4 this 3 1371  6 param0 0 1344  
103 0 0 6 127 1291 0 0 0 3 4 this 3 1397  4 view 1 1359  5 flags 1 1291  
104 0 0 4 128 1355 0 0 0 2 4 this 3 1371  4 view 1 1359  
105 0 0 7 132 1398 762 0 0 1 4 copy 1 1379  
106 0 0 7 132 1398 762 0 0 1 6 source 1 1356  
107 0 0 7 132 1398 762 0 0 1 11 type_handle 1 1394  
108 0 0 7 133 1398 762 0 0 2 1 n 1 1289  11 type_handle 1 1394  
109 0 0 4 134 1355 0 0 0 1 4 this 3 1398  
110 0 0 6 135 1289 0 0 0 1 4 this 3 1379  
111 0 0 4 136 1355 0 0 0 2 4 this 3 1398  1 x 1 1291  
112 0 0 4 137 1355 0 0 0 1 4 this 3 1398  
113 0 0 6 138 1291 0 0 0 2 4 this 3 1379  1 n 1 1289  
114 0 0 4 139 1355 0 0 0 3 4 this 3 1398  1 n 1 1289  5 value 1 1291  
115 0 0 6 140 1291 0 0 0 2 4 this 3 1379  1 n 1 1289  
116 0 0 4 141 1355 0 0 0 3 4 this 3 1398  1 n 1 1289  5 value 1 1291  
117 0 0 6 142 1356 0 0 0 1 4 this 3 1379  
118 0 0 4 143 1355 0 0 0 2 4 this 3 1398  4 data 1 1356  
119 0 0 6 144 1356 0 0 0 3 4 this 3 1379  1 n 1 1289  5 count 1 1289  
120 0 0 4 145 1355 0 0 0 4 4 this 3 1398  1 n 1 1289  5 count 1 1289  4 data 1 1396  
121 0 0 6 146 1291 0 0 0 1 4 this 3 1379  
122 0 0 6 147 1291 0 0 0 1 4 this 3 1379  
123 0 0 6 148 1289 0 0 0 2 4 this 3 1379  6 param0 0 1291  
124 0 0 6 149 1291 0 0 0 3 4 this 3 1398  4 view 1 1359  5 flags 1 1291  
125 0 0 4 150 1355 0 0 0 2 4 this 3 1379  4 view 1 1359  
126 0 0 7 154 1399 782 0 0 1 4 copy 1 1387  
127 0 0 7 154 1399 782 0 0 1 6 source 1 1356  
128 0 0 7 154 1399 782 0 0 1 11 type_handle 1 1394  
129 0 0 7 155 1399 782 0 0 2 1 n 1 1289  11 type_handle 1 1394  
130 0 0 4 156 1355 0 0 0 1 4 this 3 1399  
131 0 0 6 157 1289 0 0 0 1 4 this 3 1387  
132 0 0 4 158 1355 0 0 0 2 4 this 3 1399  1 x 1 1389  
133 0 0 4 159 1355 0 0 0 1 4 this 3 1399  
134 0 0 6 160 1389 0 0 0 2 4 this 3 1387  1 n 1 1289  
135 0 0 4 161 1355 0 0 0 3 4 this 3 1399  1 n 1 1289  5 value 1 1389  
136 0 0 6 162 1389 0 0 0 2 4 this 3 1387  1 n 1 1289  
137 0 0 4 163 1355 0 0 0 3 4 this 3 1399  1 n 1 1289  5 value 1 1389  
138 0 0 6 164 1356 0 0 0 1 4 this 3 1387  
139 0 0 4 165 1355 0 0 0 2 4 this 3 1399  4 data 1 1356  
140 0 0 6 166 1356 0 0 0 3 4 this 3 1387  1 n 1 1289  5 count 1 1289  
141 0 0 4 167 1355 0 0 0 4 4 this 3 1399  1 n 1 1289  5 count 1 1289  4 data 1 1396  
142 0 0 6 168 1291 0 0 0 1 4 this 3 1387  
143 0 0 6 169 1291 0 0 0 1 4 this 3 1387  
144 0 0 6 170 1289 0 0 0 2 4 this 3 1387  6 param0 0 1389  
145 0 0 6 171 1291 0 0 0 3 4 this 3 1399  4 view 1 1359  5 flags 1 1291  
146 0 0 4 172 1355 0 0 0 2 4 this 3 1387  4 view 1 1359  
147 0 0 7 209 1402 804 0 0 1 6 param0 0 1400  
148 0 0 6 176 1287 0 0 125 /**
 * Returns true if the MemoryUsage object is currently tracking memory (e.g.
 * track-memory-usage is configured #t).
 */ 0 
149 0 0 6 177 1287 0 0 168 /**
 * Returns true if the MemoryUsage object is currently at least counting
 * memory (e.g.  this is a Windows debug build), even if it's not fully
 * tracking it.
 */ 0 
150 0 0 6 178 1288 0 0 136 /**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, not including the memory previously frozen.
 */ 0 
151 0 0 6 179 1288 0 0 132 /**
 * Returns the total number of bytes of allocated memory consumed by C++
 * objects, including the memory previously frozen.
 */ 0 
152 0 0 6 180 1288 0 0 119 /**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for individual objects.
 */ 0 
153 0 0 6 181 1288 0 0 107 /**
 * Returns the total number of bytes allocated from the heap from code within
 * Panda, for arrays.
 */ 0 
154 0 0 6 182 1288 0 0 190 /**
 * Returns the extra bytes allocated from the system that are not immediately
 * used for holding allocated objects.  This can only be determined if
 * ALTERNATIVE_MALLOC is enabled.
 */ 0 
155 0 0 6 183 1288 0 0 110 /**
 * Returns the total number of bytes allocated from the virtual memory pool
 * from code within Panda.
 */ 0 
156 0 0 6 184 1288 0 0 496 /**
 * Returns the total number of bytes of allocated memory in the heap that
 * Panda didn't seem to be responsible for.  This includes a few bytes for
 * very low-level objects (like ConfigVariables) that cannot use Panda memory
 * tracking because they are so very low-level.
 *
 * This also includes all of the memory that might have been allocated by a
 * high-level interpreter, like Python.
 *
 * This number is only available if Panda is able to hook into the actual heap
 * callback.
 */ 0 
157 0 0 6 185 1288 0 0 113 /**
 * Returns the total size of allocated memory consumed by the process, as
 * nearly as can be determined.
 */ 0 
158 0 0 6 186 1291 0 0 59 /**
 * Returns the number of pointers currently active.
 */ 0 
159 0 0 4 187 1355 0 0 100 /**
 * Fills the indicated MemoryUsagePointers with the set of all pointers
 * currently active.
 */ 1 6 result 1 1403  
160 0 0 4 188 1355 0 0 122 /**
 * Fills the indicated MemoryUsagePointers with the set of all pointers of the
 * indicated type currently active.
 */ 2 6 result 1 1403  4 type 1 1394  
161 0 0 4 189 1355 0 0 159 /**
 * Fills the indicated MemoryUsagePointers with the set of all pointers that
 * were allocated within the range of the indicated number of seconds ago.
 */ 3 6 result 1 1403  4 from 1 1341  2 to 1 1341  
162 0 0 4 190 1355 0 0 852 /**
 * Fills the indicated MemoryUsagePointers with the set of all currently
 * active pointers (that is, pointers allocated since the last call to
 * freeze(), and not yet freed) that have a zero reference count.
 *
 * Generally, an undeleted pointer with a zero reference count means its
 * reference count has never been incremented beyond zero (since once it has
 * been incremented, the only way it can return to zero would free the
 * pointer).  This may include objects that are allocated statically or on the
 * stack, which are never intended to be deleted.  Or, it might represent a
 * programmer or compiler error.
 *
 * This function has the side-effect of incrementing each of their reference
 * counts by one, thus preventing them from ever being freed--but since they
 * hadn't been freed anyway, probably no additional harm is done.
 */ 1 6 result 1 1403  
163 0 0 4 191 1355 0 0 285 /**
 * 'Freezes' all pointers currently stored so that they are no longer
 * reported; only newly allocate pointers from this point on will appear in
 * future information requests.  This makes it easier to differentiate between
 * continuous leaks and one-time memory allocations.
 */ 0 
164 0 0 4 192 1355 0 0 70 /**
 * Shows the breakdown of types of all of the active pointers.
 */ 0 
165 0 0 4 193 1355 0 0 118 /**
 * Shows the breakdown of types of all of the pointers allocated and freed
 * since the last call to freeze().
 */ 0 
166 0 0 4 194 1355 0 0 69 /**
 * Shows the breakdown of ages of all of the active pointers.
 */ 0 
167 0 0 4 195 1355 0 0 117 /**
 * Shows the breakdown of ages of all of the pointers allocated and freed
 * since the last call to freeze().
 */ 0 
168 0 0 6 215 1291 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 1404  
169 0 0 4 216 1355 0 0 538 /**
 * Explicitly increments the reference count.  User code should avoid using
 * ref() and unref() directly, which can result in missed reference counts.
 * Instead, let a PointerTo object manage the reference counting
 * automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 */ 1 4 this 3 1404  
170 0 0 6 217 1287 0 0 865 /**
 * Explicitly decrements the reference count.  Note that the object will not
 * be implicitly deleted by unref() simply because the reference count drops
 * to zero.  (Having a member function delete itself is problematic.) However,
 * see the helper function unref_delete().
 *
 * User code should avoid using ref() and unref() directly, which can result
 * in missed reference counts.  Instead, let a PointerTo object manage the
 * reference counting automatically.
 *
 * This function is const, even though it changes the object, because
 * generally fiddling with an object's reference count isn't considered part
 * of fiddling with the object.  An object might be const in other ways, but
 * we still need to accurately count the number of references to it.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 1404  
171 0 0 6 220 1287 0 0 135 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.  Returns true if ok, false otherwise.
 */ 1 4 this 3 1404  
172 0 0 6 221 1287 0 0 144 /**
 * Does some easy checks to make sure that the reference count isn't zero, or
 * completely bogus.  Returns true if ok, false otherwise.
 */ 1 4 this 3 1404  
173 0 0 7 222 1394 0 0 0 0 
174 0 0 6 212 1407 0 0 0 1 4 this 3 1406  
175 0 0 7 225 1410 807 0 0 1 6 param0 0 1408  
176 0 0 6 224 1291 0 0 10 /**
 *
 */ 1 4 this 3 1408  
177 0 0 4 234 1355 0 0 0 2 4 this 3 1411  5 level 1 1341  
178 0 0 6 236 1291 0 0 47 /**
 * Returns the current reference count.
 */ 1 4 this 3 1412  
179 0 0 4 237 1355 0 0 107 /**
 * Explicitly increments the node reference count and the normal reference
 * count simultaneously.
 */ 1 4 this 3 1412  
180 0 0 6 238 1287 0 0 201 /**
 * Explicitly decrements the node reference count and the normal reference
 * count simultaneously.
 *
 * The return value is true if the new reference count is nonzero, false if it
 * is zero.
 */ 1 4 this 3 1412  
181 0 0 6 239 1287 0 0 97 /**
 * Does some easy checks to make sure that the reference count isn't
 * completely bogus.
 */ 1 4 this 3 1412  
182 0 0 4 240 1355 0 0 186 /**
 * Decrements the node reference count without affecting the normal reference
 * count.  Intended to be called by derived classes only, presumably to
 * reimplement node_unref().
 */ 1 4 this 3 1412  
183 0 0 7 241 1394 0 0 0 0 
184 0 0 7 244 1414 0 0 0 0 
185 0 0 7 244 1414 0 0 0 1 4 from 1 1414  
186 0 0 7 244 1414 0 0 0 1 4 copy 1 1415  
187 0 0 7 244 1414 0 0 64 /**
 * Constructs a datagram from an existing block of data.
 */ 1 4 data 1 1417  
188 0 0 6 245 1414 0 0 0 2 4 this 3 1414  4 from 1 1414  
189 0 0 6 245 1414 0 0 0 2 4 this 3 1414  4 copy 1 1415  
190 0 0 4 246 1355 0 0 90 /**
 * Resets the datagram to empty, in preparation for building up a new
 * datagram.
 */ 1 4 this 3 1414  
191 0 0 4 247 1355 0 0 111 /**
 * Writes a representation of the entire datagram contents, as a sequence of
 * hex (and ASCII) values.
 */ 3 4 this 3 1415  3 out 1 1365  6 indent 1 1419  
192 0 0 4 248 1355 0 0 48 /**
 * Adds a boolean value to the datagram.
 */ 2 4 this 3 1414  5 value 1 1287  
193 0 0 4 249 1355 0 0 55 /**
 * Adds a signed 8-bit integer to the datagram.
 */ 2 4 this 3 1414  5 value 1 1420  
194 0 0 4 250 1355 0 0 58 /**
 * Adds an unsigned 8-bit integer to the datagram.
 */ 2 4 this 3 1414  5 value 1 1422  
195 0 0 4 251 1355 0 0 56 /**
 * Adds a signed 16-bit integer to the datagram.
 */ 2 4 this 3 1414  5 value 1 1423  
196 0 0 4 252 1355 0 0 56 /**
 * Adds a signed 32-bit integer to the datagram.
 */ 2 4 this 3 1414  5 value 1 1425  
197 0 0 4 253 1355 0 0 56 /**
 * Adds a signed 64-bit integer to the datagram.
 */ 2 4 this 3 1414  5 value 1 1426  
198 0 0 4 254 1355 0 0 59 /**
 * Adds an unsigned 16-bit integer to the datagram.
 */ 2 4 this 3 1414  5 value 1 1427  
199 0 0 4 255 1355 0 0 59 /**
 * Adds an unsigned 32-bit integer to the datagram.
 */ 2 4 this 3 1414  5 value 1 1429  
200 0 0 4 256 1355 0 0 59 /**
 * Adds an unsigned 64-bit integer to the datagram.
 */ 2 4 this 3 1414  5 value 1 1430  
201 0 0 4 257 1355 0 0 197 /**
 * Adds a 32-bit single-precision floating-point number to the datagram.
 * Since this kind of float is not necessarily portable across different
 * architectures, special care is required.
 */ 2 4 this 3 1414  5 value 1 1432  
202 0 0 4 258 1355 0 0 63 /**
 * Adds a 64-bit floating-point number to the datagram.
 */ 2 4 this 3 1414  5 value 1 1433  
203 0 0 4 259 1355 0 0 105 /**
 * Adds either a 32-bit or a 64-bit floating-point number, according to
 * set_stdfloat_double().
 */ 2 4 this 3 1414  5 value 1 1343  
204 0 0 4 260 1355 0 0 67 // These functions pack numbers big-endian, in case that's desired. 2 4 this 3 1414  5 value 1 1423  
205 0 0 4 261 1355 0 0 67 /**
 * Adds a signed 32-bit big-endian integer to the datagram.
 */ 2 4 this 3 1414  5 value 1 1425  
206 0 0 4 262 1355 0 0 67 /**
 * Adds a signed 64-bit big-endian integer to the datagram.
 */ 2 4 this 3 1414  5 value 1 1426  
207 0 0 4 263 1355 0 0 70 /**
 * Adds an unsigned 16-bit big-endian integer to the datagram.
 */ 2 4 this 3 1414  5 value 1 1427  
208 0 0 4 264 1355 0 0 70 /**
 * Adds an unsigned 32-bit big-endian integer to the datagram.
 */ 2 4 this 3 1414  5 value 1 1429  
209 0 0 4 265 1355 0 0 70 /**
 * Adds an unsigned 64-bit big-endian integer to the datagram.
 */ 2 4 this 3 1414  5 value 1 1430  
210 0 0 4 266 1355 0 0 94 /**
 * Adds a 32-bit single-precision big-endian floating-point number to the
 * datagram.
 */ 2 4 this 3 1414  5 value 1 1432  
211 0 0 4 267 1355 0 0 74 /**
 * Adds a 64-bit big-endian floating-point number to the datagram.
 */ 2 4 this 3 1414  5 value 1 1433  
212 0 0 4 268 1355 0 0 109 /**
 * Adds a variable-length string to the datagram.  This actually adds a count
 * followed by n bytes.
 */ 2 4 this 3 1414  3 str 1 1396  
213 0 0 4 269 1355 0 0 116 /**
 * Adds a variable-length string to the datagram, using a 32-bit length field
 * to allow very long strings.
 */ 2 4 this 3 1414  3 str 1 1396  
214 0 0 4 270 1355 0 0 86 /**
 * Adds a variable-length string to the datagram, as a NULL-terminated string.
 */ 2 4 this 3 1414  3 str 1 1396  
215 0 0 4 271 1355 0 0 238 /**
 * Adds a fixed-length string to the datagram.  If the string given is less
 * than the requested size, this will pad the string out with zeroes; if it is
 * greater than the requested size, this will silently truncate the string.
 */ 3 4 this 3 1414  3 str 1 1396  4 size 1 1288  
216 0 0 4 272 1355 0 0 58 /**
 * Adds a variable-length wstring to the datagram.
 */ 2 4 this 3 1414  3 str 1 1396  
217 0 0 4 273 1355 0 0 114 /**
 * Adds a variable-length binary blob to the datagram.  This actually adds a
 * count followed by n bytes.
 */ 2 4 this 3 1414  6 param0 0 1417  
218 0 0 4 274 1355 0 0 119 /**
 * Adds a variable-length binary blob to the datagram, using a 32-bit length
 * field to allow very long blobs.
 */ 2 4 this 3 1414  6 param0 0 1417  
219 0 0 4 275 1355 0 0 67 /**
 * Adds the indicated number of zero bytes to the datagram.
 */ 2 4 this 3 1414  4 size 1 1288  
220 0 0 4 276 1355 0 0 65 /**
 * Appends some more raw data to the end of the datagram.
 */ 2 4 this 3 1414  4 data 1 1417  
221 0 0 6 277 1356 0 0 51 /**
 * Returns the datagram's data as a string.
 */ 1 4 this 3 1415  
222 0 0 6 278 1356 0 0 0 1 4 this 3 1415  
223 0 0 6 279 1356 0 0 0 1 4 this 3 1415  
224 0 0 6 280 1288 0 0 55 /**
 * Returns the number of bytes in the datagram.
 */ 1 4 this 3 1415  
225 0 0 4 281 1355 0 0 199 /**
 * Replaces the data in the Datagram with the data in the indicated PTA_uchar.
 * This is assignment by reference: subsequent changes to the Datagram will
 * also change the source PTA_uchar.
 */ 2 4 this 3 1414  4 data 1 1434  
226 0 0 4 282 1355 0 0 237 /**
 * Replaces the data in the Datagram with a copy of the data in the indicated
 * CPTA_uchar.  Unlike set_array(), a complete copy is made of the data;
 * subsequent changes to the Datagram will *not* change the source CPTA_uchar.
 */ 2 4 this 3 1414  4 data 1 1435  
227 0 0 7 283 1435 0 0 70 /**
 * Returns a const pointer to the actual data in the Datagram.
 */ 1 4 this 3 1415  
228 0 0 7 284 1434 0 0 75 /**
 * Returns a modifiable pointer to the actual data in the Datagram.
 */ 1 4 this 3 1414  
229 0 0 4 285 1355 0 0 343 /**
 * Changes the stdfloat_double flag, which defines the operation performed by
 * add_stdfloat() and DatagramIterator::get_stdfloat().  When this is true,
 * add_stdfloat() adds a 64-bit floating-point number; when it is false, it
 * adds a 32-bit floating-point number.  The default is based on the
 * STDFLOAT_DOUBLE compilation flag.
 */ 2 4 this 3 1414  15 stdfloat_double 1 1287  
230 0 0 6 286 1287 0 0 72 /**
 * Returns the stdfloat_double flag.  See set_stdfloat_double().
 */ 1 4 this 3 1415  
231 0 0 6 287 1287 0 0 0 2 4 this 3 1415  5 other 1 1415  
232 0 0 6 288 1287 0 0 0 2 4 this 3 1415  5 other 1 1415  
233 0 0 6 289 1287 0 0 0 2 4 this 3 1415  5 other 1 1415  
234 0 0 4 290 1355 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 2 4 this 3 1415  3 out 1 1365  
235 0 0 4 291 1355 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 3 4 this 3 1415  3 out 1 1365  6 indent 1 1419  
236 0 0 7 292 1394 0 0 0 0 
237 0 0 6 295 1287 0 0 0 2 4 this 3 1436  4 data 1 1414  
238 0 0 6 296 1287 0 0 391 /**
 * Skips over the next datagram without extracting it, but saves the relevant
 * file information in the SubfileInfo object so that its data may be read
 * later.  For non-file-based datagram generators, this may mean creating a
 * temporary file and copying the contents of the datagram to disk.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.
 */ 2 4 this 3 1436  4 info 1 1437  
239 0 0 6 297 1287 0 0 0 1 4 this 3 1436  
240 0 0 6 298 1287 0 0 0 1 4 this 3 1436  
241 0 0 6 299 1438 0 0 159 /**
 * Returns the filename that provides the source for these datagrams, if any,
 * or empty string if the datagrams do not originate from a file on disk.
 */ 1 4 this 3 1436  
242 0 0 6 300 1441 0 0 138 /**
 * Returns the on-disk timestamp of the file that was read, at the time it was
 * opened, if that is available, or 0 if it is not.
 */ 1 4 this 3 1439  
243 0 0 7 301 1302 0 0 156 /**
 * Returns the FileReference that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a file on disk.
 */ 1 4 this 3 1436  
244 0 0 7 302 1443 1135 0 153 /**
 * Returns the VirtualFile that provides the source for these datagrams, if
 * any, or NULL if the datagrams do not originate from a VirtualFile.
 */ 1 4 this 3 1436  
245 0 0 6 303 1306 0 0 327 /**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramGenerators that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * get_datagram().
 */ 1 4 this 3 1436  
246 0 0 7 305 1444 926 0 10 /**
 *
 */ 0 
247 0 0 7 305 1444 926 0 10 /**
 *
 */ 2 8 datagram 1 1415  6 offset 1 1288  
248 0 0 7 305 1444 926 0 0 1 6 param0 0 1445  
249 0 0 6 306 1287 0 0 36 /**
 * Extracts a boolean value.
 */ 1 4 this 3 1444  
250 0 0 6 307 1420 0 0 43 /**
 * Extracts a signed 8-bit integer.
 */ 1 4 this 3 1444  
251 0 0 6 308 1422 0 0 46 /**
 * Extracts an unsigned 8-bit integer.
 */ 1 4 this 3 1444  
252 0 0 6 309 1423 0 0 44 /**
 * Extracts a signed 16-bit integer.
 */ 1 4 this 3 1444  
253 0 0 6 310 1425 0 0 44 /**
 * Extracts a signed 32-bit integer.
 */ 1 4 this 3 1444  
254 0 0 6 311 1426 0 0 44 /**
 * Extracts a signed 64-bit integer.
 */ 1 4 this 3 1444  
255 0 0 6 312 1427 0 0 47 /**
 * Extracts an unsigned 16-bit integer.
 */ 1 4 this 3 1444  
256 0 0 6 313 1429 0 0 47 /**
 * Extracts an unsigned 32-bit integer.
 */ 1 4 this 3 1444  
257 0 0 6 314 1430 0 0 47 /**
 * Extracts an unsigned 64-bit integer.
 */ 1 4 this 3 1444  
258 0 0 6 315 1432 0 0 68 /**
 * Extracts a 32-bit single-precision floating-point number.
 */ 1 4 this 3 1444  
259 0 0 6 316 1433 0 0 51 /**
 * Extracts a 64-bit floating-point number.
 */ 1 4 this 3 1444  
260 0 0 6 317 1343 0 0 119 /**
 * Extracts either a 32-bit or a 64-bit floating-point number, according to
 * Datagram::set_stdfloat_double().
 */ 1 4 this 3 1444  
261 0 0 6 318 1423 0 0 55 /**
 * Extracts a signed 16-bit big-endian integer.
 */ 1 4 this 3 1444  
262 0 0 6 319 1425 0 0 55 /**
 * Extracts a signed 32-bit big-endian integer.
 */ 1 4 this 3 1444  
263 0 0 6 320 1426 0 0 55 /**
 * Extracts a signed 64-bit big-endian integer.
 */ 1 4 this 3 1444  
264 0 0 6 321 1427 0 0 58 /**
 * Extracts an unsigned 16-bit big-endian integer.
 */ 1 4 this 3 1444  
265 0 0 6 322 1429 0 0 58 /**
 * Extracts an unsigned 32-bit big-endian integer.
 */ 1 4 this 3 1444  
266 0 0 6 323 1430 0 0 58 /**
 * Extracts an unsigned 64-bit big-endian integer.
 */ 1 4 this 3 1444  
267 0 0 6 324 1432 0 0 79 /**
 * Extracts a 32-bit big-endian single-precision floating-point number.
 */ 1 4 this 3 1444  
268 0 0 6 325 1433 0 0 62 /**
 * Extracts a 64-bit big-endian floating-point number.
 */ 1 4 this 3 1444  
269 0 0 6 326 1396 0 0 45 /**
 * Extracts a variable-length string.
 */ 1 4 this 3 1444  
270 0 0 6 327 1396 0 0 72 /**
 * Extracts a variable-length string with a 32-bit length field.
 */ 1 4 this 3 1444  
271 0 0 6 328 1396 0 0 74 /**
 * Extracts a variable-length string, as a NULL-terminated string.
 */ 1 4 this 3 1444  
272 0 0 6 329 1396 0 0 128 /**
 * Extracts a fixed-length string.  However, if a zero byte occurs within the
 * string, it marks the end of the string.
 */ 2 4 this 3 1444  4 size 1 1288  
273 0 0 6 330 1396 0 0 75 /**
 * Extracts a variable-length wstring (with a 32-bit length field).
 */ 1 4 this 3 1444  
274 0 0 6 331 1417 0 0 50 /**
 * Extracts a variable-length binary blob.
 */ 1 4 this 3 1444  
275 0 0 6 332 1417 0 0 75 /**
 * Extracts a variable-length binary blob with a 32-bit size field.
 */ 1 4 this 3 1444  
276 0 0 4 333 1355 0 0 68 /**
 * Skips over the indicated number of bytes in the datagram.
 */ 2 4 this 3 1444  4 size 1 1288  
277 0 0 6 334 1417 0 0 98 /**
 * Extracts the indicated number of bytes in the datagram and returns them as
 * a string.
 */ 2 4 this 3 1444  4 size 1 1288  
278 0 0 6 335 1417 0 0 115 /**
 * Returns the remaining bytes in the datagram as a string, but does not
 * extract them from the iterator.
 */ 1 4 this 3 1445  
279 0 0 6 336 1288 0 0 49 /**
 * Return the bytes left in the datagram.
 */ 1 4 this 3 1445  
280 0 0 6 337 1415 0 0 48 /**
 * Return the datagram of this iterator.
 */ 1 4 this 3 1445  
281 0 0 6 338 1288 0 0 100 /**
 * Returns the current position within the datagram of the next piece of data
 * to extract.
 */ 1 4 this 3 1445  
282 0 0 4 339 1355 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 2 4 this 3 1445  3 out 1 1365  
283 0 0 4 340 1355 0 0 67 /**
 * Write a string representation of this instance to <out>.
 */ 3 4 this 3 1445  3 out 1 1365  6 indent 1 1419  
284 0 0 7 341 1394 0 0 0 0 
285 0 0 6 345 1287 0 0 0 2 4 this 3 1447  4 data 1 1415  
286 0 0 6 346 1287 0 0 349 /**
 * Copies the file data from the entire indicated file (via the vfs) as the
 * next datagram.  This is intended to support potentially very large
 * datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */ 3 4 this 3 1447  6 result 1 1437  8 filename 1 1438  
287 0 0 6 346 1287 0 0 362 /**
 * Copies the file data from the range of the indicated file (outside of the
 * vfs) as the next datagram.  This is intended to support potentially very
 * large datagrams.
 *
 * Returns true on success, false on failure or if this method is
 * unimplemented.  On true, fills "result" with the information that
 * references the copied file, if possible.
 */ 3 4 this 3 1447  6 result 1 1437  6 source 1 1448  
288 0 0 6 347 1287 0 0 0 1 4 this 3 1447  
289 0 0 4 348 1355 0 0 0 1 4 this 3 1447  
290 0 0 6 349 1438 0 0 159 /**
 * Returns the filename that provides the target for these datagrams, if any,
 * or empty string if the datagrams do not get written to a file on disk.
 */ 1 4 this 3 1447  
291 0 0 7 350 1302 0 0 152 /**
 * Returns the FileReference that provides the target for these datagrams, if
 * any, or NULL if the datagrams do not written to a file on disk.
 */ 1 4 this 3 1447  
292 0 0 6 351 1306 0 0 322 /**
 * Returns the current file position within the data stream, if any, or 0 if
 * the file position is not meaningful or cannot be determined.
 *
 * For DatagramSinks that return a meaningful file position, this will be
 * pointing to the first byte following the datagram returned after a call to
 * put_datagram().
 */ 1 4 this 3 1447  
293 0 0 7 366 1450 944 0 0 1 6 param0 0 1302  
294 0 0 7 366 1450 944 0 10 /**
 *
 */ 1 8 filename 1 1438  
295 0 0 6 367 1438 0 0 49 /**
 * Returns the filename of the reference.
 */ 1 4 this 3 1302  
296 0 0 7 368 1394 0 0 0 0 
297 0 0 7 364 1394 0 0 0 0 
298 0 0 6 360 1452 0 0 0 1 4 this 3 1451  
299 0 0 7 362 1406 807 0 0 1 4 this 3 1451  
300 0 0 7 385 1453 964 0 10 /**
 *
 */ 0 
301 0 0 7 385 1453 964 0 0 1 6 param0 0 1454  
302 0 0 4 386 1355 0 0 130 /**
 * Moves the data pointer to the indicated byte position.  It is not an error
 * to move the pointer past the end of data.
 */ 2 4 this 3 1453  3 pos 1 1288  
303 0 0 6 387 1288 0 0 106 /**
 * Returns the current data pointer position as a byte offset from the
 * beginning of the stream.
 */ 1 4 this 3 1454  
304 0 0 6 388 1356 0 0 319 /**
 * Extracts and returns the indicated number of characters from the current
 * data pointer, and advances the data pointer.  If the data pointer exceeds
 * the end of the buffer, returns empty string.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.read() function.
 */ 2 4 this 3 1453  6 length 1 1288  
305 0 0 6 389 1356 0 0 303 /**
 * Assumes the stream represents a text file, and extracts one line up to and
 * including the trailing newline character.  Returns empty string when the
 * end of file is reached.
 *
 * The interface here is intentionally designed to be similar to that for
 * Python's file.readline() function.
 */ 1 4 this 3 1453  
306 0 0 6 390 1356 0 0 0 1 4 this 3 1453  
307 0 0 6 391 1356 0 0 101 /**
 * Returns the entire buffer contents as a string, regardless of the current
 * data pointer.
 */ 1 4 this 3 1454  
308 0 0 6 392 1288 0 0 58 /**
 * Returns the size of the entire buffer contents.
 */ 1 4 this 3 1454  
309 0 0 4 393 1355 0 0 47 /**
 * Empties the current buffer contents.
 */ 1 4 this 3 1453  
310 0 0 7 396 1456 995 0 10 /**
 *
 */ 0 
311 0 0 7 396 1456 995 0 10 /**
 *
 */ 1 4 copy 1 1457  
312 0 0 6 397 1456 0 0 0 2 4 this 3 1456  4 copy 1 1457  
313 0 0 6 398 1287 0 0 0 2 4 this 3 1457  5 other 1 1457  
314 0 0 6 399 1287 0 0 0 2 4 this 3 1457  5 other 1 1457  
315 0 0 6 400 1287 0 0 0 2 4 this 3 1457  5 other 1 1457  
316 0 0 6 401 1291 0 0 10 /**
 *
 */ 2 4 this 3 1457  5 other 1 1457  
317 0 0 4 402 1355 0 0 86 /**
 * Generates a new HashVal representing the xor of this one and the other one.
 */ 2 4 this 3 1456  5 other 1 1457  
318 0 0 4 403 1355 0 0 65 /**
 * Outputs the HashVal as four unsigned decimal integers.
 */ 2 4 this 3 1457  3 out 1 1365  
319 0 0 4 404 1355 0 0 64 /**
 * Inputs the HashVal as four unsigned decimal integers.
 */ 2 4 this 3 1456  2 in 1 1458  
320 0 0 4 405 1355 0 0 64 /**
 * Outputs the HashVal as a 32-digit hexadecimal number.
 */ 2 4 this 3 1457  3 out 1 1365  
321 0 0 4 406 1355 0 0 63 /**
 * Inputs the HashVal as a 32-digit hexadecimal number.
 */ 2 4 this 3 1456  2 in 1 1458  
322 0 0 4 407 1355 0 0 128 /**
 * Outputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order generated by write_stream().
 */ 2 4 this 3 1457  3 out 1 1365  
323 0 0 4 408 1355 0 0 125 /**
 * Inputs the HashVal as a binary stream of bytes in order.  This is not the
 * same order expected by read_stream().
 */ 2 4 this 3 1456  2 in 1 1458  
324 0 0 4 409 1355 0 0 10 /**
 *
 */ 2 4 this 3 1457  3 out 1 1365  
325 0 0 6 410 1396 0 0 69 /**
 * Returns the HashVal as a string with four decimal numbers.
 */ 1 4 this 3 1457  
326 0 0 6 411 1287 0 0 112 /**
 * Sets the HashVal from a string with four decimal numbers.  Returns true if
 * valid, false otherwise.
 */ 2 4 this 3 1456  4 text 1 1396  
327 0 0 6 412 1396 0 0 63 /**
 * Returns the HashVal as a 32-byte hexadecimal string.
 */ 1 4 this 3 1457  
328 0 0 6 413 1287 0 0 111 /**
 * Sets the HashVal from a 32-byte hexademical string.  Returns true if
 * successful, false otherwise.
 */ 2 4 this 3 1456  4 text 1 1396  
329 0 0 6 414 1417 0 0 58 /**
 * Returns the HashVal as a 16-byte binary string.
 */ 1 4 this 3 1457  
330 0 0 6 415 1287 0 0 106 /**
 * Sets the HashVal from a 16-byte binary string.  Returns true if successful,
 * false otherwise.
 */ 2 4 this 3 1456  4 text 1 1417  
331 0 0 4 416 1355 0 0 10 /**
 *
 */ 2 4 this 3 1457  11 destination 1 1414  
332 0 0 4 417 1355 0 0 10 /**
 *
 */ 2 4 this 3 1456  6 source 1 1444  
333 0 0 4 418 1355 0 0 10 /**
 *
 */ 2 4 this 3 1457  11 destination 1 1459  
334 0 0 4 419 1355 0 0 10 /**
 *
 */ 2 4 this 3 1456  6 source 1 1461  
335 0 0 6 420 1287 0 0 232 /**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */ 2 4 this 3 1456  8 filename 1 1438  
336 0 0 6 421 1287 0 0 232 /**
 * Generates the hash value from the indicated file.  Returns true on success,
 * false if the file cannot be read.  This method is only defined if we have
 * the OpenSSL library (which provides md5 functionality) available.
 */ 2 4 this 3 1456  6 stream 1 1458  
337 0 0 4 422 1355 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 2 4 this 3 1456  7 ramfile 1 1454  
338 0 0 4 423 1355 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 2 4 this 3 1456  4 data 1 1396  
339 0 0 4 424 1355 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 2 4 this 3 1456  4 data 1 1417  
340 0 0 4 425 1355 0 0 178 /**
 * Generates the hash value by hashing the indicated data.  This method is
 * only defined if we have the OpenSSL library (which provides md5
 * functionality) available.
 */ 3 4 this 3 1456  6 buffer 1 1396  6 length 1 1291  
341 0 0 7 428 1403 997 0 10 /**
 *
 */ 0 
342 0 0 7 428 1403 997 0 0 1 6 param0 0 1463  
343 0 0 6 430 1288 0 0 53 /**
 * Returns the number of pointers in the set.
 */ 1 4 this 3 1463  
344 0 0 7 431 1406 807 0 46 /**
 * Returns the nth pointer of the set.
 */ 2 4 this 3 1463  1 n 1 1288  
345 0 0 6 433 1452 0 0 175 /**
 * Returns the nth pointer of the set, typecast to a TypedObject if possible.
 * If the pointer is not a TypedObject or if the cast cannot be made, returns
 * nullptr.
 */ 2 4 this 3 1463  1 n 1 1288  
346 0 0 7 435 1394 0 0 70 /**
 * Returns the actual type of the nth pointer, if it is known.
 */ 2 4 this 3 1463  1 n 1 1288  
347 0 0 6 436 1396 0 0 68 /**
 * Returns the type name of the nth pointer, if it is known.
 */ 2 4 this 3 1463  1 n 1 1288  
348 0 0 6 437 1341 0 0 197 /**
 * Returns the age of the nth pointer: the number of seconds elapsed between
 * the time it was allocated and the time it was added to this set via a call
 * to MemoryUsage::get_pointers().
 */ 2 4 this 3 1463  1 n 1 1288  
349 0 0 6 438 1356 0 0 0 2 4 this 3 1463  1 n 1 1288  
350 0 0 4 439 1355 0 0 39 /**
 * Empties the set of pointers.
 */ 1 4 this 3 1403  
351 0 0 4 440 1355 0 0 10 /**
 *
 */ 2 4 this 3 1463  3 out 1 1365  
352 0 0 7 443 1465 1010 0 10 /**
 *
 */ 0 
353 0 0 7 443 1465 1010 0 10 /**
 *
 */ 3 6 source 1 1466  5 start 1 1306  3 end 1 1306  
354 0 0 6 444 1465 0 0 391 /**
 * Starts the SubStream reading from the indicated source, with the first
 * character being the character at position "start" within the source, for
 * end - start total characters.  The character at "end" within the source
 * will never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the ISubStream will continue until the
 * end of the source stream.
 */ 4 4 this 3 1465  6 source 1 1466  5 start 1 1306  3 end 1 1306  
355 0 0 6 445 1465 0 0 92 /**
 * Resets the SubStream to empty, but does not actually close the source
 * istream.
 */ 1 4 this 3 1465  
356 0 0 7 449 1468 1014 0 10 /**
 *
 */ 0 
357 0 0 7 449 1468 1014 0 10 /**
 *
 */ 4 4 dest 1 1469  5 start 1 1306  3 end 1 1306  6 append 1 1287  
358 0 0 6 450 1468 0 0 383 /**
 * Starts the SubStream reading from the indicated dest, with the first
 * character being the character at position "start" within the dest, for end
 * - start total characters.  The character at "end" within the dest will
 * never be read; this will appear to be EOF.
 *
 * If end is zero, it indicates that the OSubStream will continue until the
 * end of the dest stream.
 */ 5 4 this 3 1468  4 dest 1 1469  5 start 1 1306  3 end 1 1306  6 append 1 1287  
359 0 0 6 451 1468 0 0 90 /**
 * Resets the SubStream to empty, but does not actually close the dest
 * ostream.
 */ 1 4 this 3 1468  
360 0 0 7 455 1471 1018 0 10 /**
 *
 */ 0 
361 0 0 7 455 1471 1018 0 10 /**
 *
 */ 4 6 nested 1 1472  5 start 1 1306  3 end 1 1306  6 append 1 1287  
362 0 0 6 456 1471 0 0 278 /**
 * Starts the SubStream reading and writing from the indicated nested stream,
 * within the indicated range.  "end" is the first character outside of the
 * range.
 *
 * If end is zero, it indicates that the SubStream will continue until the end
 * of the nested stream.
 */ 5 4 this 3 1471  6 nested 1 1472  5 start 1 1306  3 end 1 1306  6 append 1 1287  
363 0 0 6 457 1471 0 0 92 /**
 * Resets the SubStream to empty, but does not actually close the nested
 * ostream.
 */ 1 4 this 3 1471  
364 0 0 7 460 1474 807 0 10 /**
 *
 */ 0 
365 0 0 6 461 1287 0 0 352 /**
 * Opens the named Multifile on disk for reading.  The Multifile index is read
 * in, and the list of subfiles becomes available; individual subfiles may
 * then be extracted or read, but the list of subfiles may not be modified.
 *
 * Also see the version of open_read() which accepts an istream.  Returns true
 * on success, false on failure.
 */ 3 4 this 3 1474  14 multifile_name 1 1438  6 offset 1 1306  
366 0 0 6 461 1287 0 0 333 /**
 * Opens an anonymous Multifile for reading using an istream.  There must be
 * seek functionality via seekg() and tellg() on the istream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */ 4 4 this 3 1474  16 multifile_stream 1 1466  12 owns_pointer 1 1287  6 offset 1 1306  
367 0 0 6 462 1287 0 0 420 /**
 * Opens the named Multifile on disk for writing.  If there already exists a
 * file by that name, it is truncated.  The Multifile is then prepared for
 * accepting a brand new set of subfiles, which will be written to the
 * indicated filename.  Individual subfiles may not be extracted or read.
 *
 * Also see the version of open_write() which accepts an ostream.  Returns
 * true on success, false on failure.
 */ 2 4 this 3 1474  14 multifile_name 1 1438  
368 0 0 6 462 1287 0 0 333 /**
 * Opens an anonymous Multifile for writing using an ostream.  There must be
 * seek functionality via seekp() and tellp() on the pstream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */ 3 4 this 3 1474  16 multifile_stream 1 1365  12 owns_pointer 1 1287  
369 0 0 6 463 1287 0 0 360 /**
 * Opens the named Multifile on disk for reading and writing.  If there
 * already exists a file by that name, its index is read.  Subfiles may be
 * added or removed, and the resulting changes will be written to the named
 * file.
 *
 * Also see the version of open_read_write() which accepts an iostream.
 * Returns true on success, false on failure.
 */ 2 4 this 3 1474  14 multifile_name 1 1438  
370 0 0 6 463 1287 0 0 365 /**
 * Opens an anonymous Multifile for reading and writing using an iostream.
 * There must be seek functionality via seekg()/seekp() and tellg()/tellp() on
 * the iostream.
 *
 * If owns_pointer is true, then the Multifile assumes ownership of the stream
 * pointer and will delete it when the multifile is closed, including if this
 * function returns false.
 */ 3 4 this 3 1474  16 multifile_stream 1 1475  12 owns_pointer 1 1287  
371 0 0 4 464 1355 0 0 169 /**
 * Closes the Multifile if it is open.  All changes are flushed to disk, and
 * the file becomes invalid for further operations until the next call to
 * open().
 */ 1 4 this 3 1474  
372 0 0 6 465 1438 0 0 69 /**
 * Returns the filename of the Multifile, if it is available.
 */ 1 4 this 3 1476  
373 0 0 4 466 1355 0 0 209 /**
 * Replaces the filename of the Multifile.  This is primarily used for
 * documentation purposes only; changing this name does not open the indicated
 * file.  See open_read() or open_write() for that.
 */ 2 4 this 3 1474  14 multifile_name 1 1438  
374 0 0 6 467 1287 0 0 154 /**
 * Returns true if the Multifile has been opened for read mode and there have
 * been no errors, and individual Subfile contents may be extracted.
 */ 1 4 this 3 1476  
375 0 0 6 468 1287 0 0 162 /**
 * Returns true if the Multifile has been opened for write mode and there have
 * been no errors, and Subfiles may be added or removed from the Multifile.
 */ 1 4 this 3 1476  
376 0 0 6 469 1287 0 0 118 /**
 * Returns true if the Multifile index is suboptimal and should be repacked.
 * Call repack() to achieve this.
 */ 1 4 this 3 1476  
377 0 0 6 470 1441 0 0 299 /**
 * Returns the modification timestamp of the overall Multifile.  This
 * indicates the most recent date at which subfiles were added or removed from
 * the Multifile.  Note that it is logically possible for an individual
 * subfile to have a more recent timestamp than the overall timestamp.
 */ 1 4 this 3 1476  
378 0 0 4 471 1355 0 0 529 /**
 * Sets the flag indicating whether timestamps should be recorded within the
 * Multifile or not.  The default is true, indicating the Multifile will
 * record timestamps for the overall file and also for each subfile.
 *
 * If this is false, the Multifile will not record timestamps internally.  In
 * this case, the return value from get_timestamp() or get_subfile_timestamp()
 * will be estimations.
 *
 * You may want to set this false to minimize the bitwise difference between
 * independently-generated Multifiles.
 */ 2 4 this 3 1474  16 record_timestamp 1 1287  
379 0 0 6 472 1287 0 0 137 /**
 * Returns the flag indicating whether timestamps should be recorded within
 * the Multifile or not.  See set_record_timestamp().
 */ 1 4 this 3 1476  
380 0 0 4 473 1355 0 0 782 /**
 * Changes the internal scale factor for this Multifile.
 *
 * This is normally 1, but it may be set to any arbitrary value (greater than
 * zero) to support Multifile archives that exceed 4GB, if necessary.
 * (Individual subfiles may still not exceed 4GB.)
 *
 * All addresses within the file are rounded up to the next multiple of
 * _scale_factor, and zeros are written to the file to fill the resulting
 * gaps.  Then the address is divided by _scale_factor and written out as a
 * 32-bit integer.  Thus, setting a scale factor of 2 supports up to 8GB
 * files, 3 supports 12GB files, etc.
 *
 * Calling this function on an already-existing Multifile will have no
 * immediate effect until a future call to repack() or close() (or until the
 * Multifile is destructed).
 */ 2 4 this 3 1474  12 scale_factor 1 1288  
381 0 0 6 474 1288 0 0 92 /**
 * Returns the internal scale factor for this Multifile.  See
 * set_scale_factor().
 */ 1 4 this 3 1476  
382 0 0 4 475 1355 0 0 461 /**
 * Sets the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  If true, subfiles will be
 * encrypted; if false (the default), they will be written without encryption.
 *
 * When true, subfiles will be encrypted with the password specified by
 * set_encryption_password().  It is possible to apply a different password to
 * different files, but the resulting file can't be mounted via VFS.
 */ 2 4 this 3 1474  4 flag 1 1287  
383 0 0 6 476 1287 0 0 163 /**
 * Returns the flag indicating whether subsequently-added subfiles should be
 * encrypted before writing them to the multifile.  See set_encryption_flag().
 */ 1 4 this 3 1476  
384 0 0 4 477 1355 0 0 369 /**
 * Specifies the password that will be used to encrypt subfiles subsequently
 * added to the multifile, if the encryption flag is also set true (see
 * set_encryption_flag()).
 *
 * It is possible to apply a different password to different files, but the
 * resulting file can't be mounted via VFS.  Changing this value may cause an
 * implicit call to flush().
 */ 2 4 this 3 1474  19 encryption_password 1 1396  
385 0 0 6 478 1396 0 0 141 /**
 * Returns the password that will be used to encrypt subfiles subsequently
 * added to the multifile.  See set_encryption_password().
 */ 1 4 this 3 1476  
386 0 0 4 479 1355 0 0 659 /**
 * Specifies the encryption algorithm that should be used for future calls to
 * add_subfile().  The default is whatever is specified by the encryption-
 * algorithm config variable.  The complete set of available algorithms is
 * defined by the current version of OpenSSL.
 *
 * If an invalid algorithm is specified, there is no immediate error return
 * code, but flush() will fail and the file will be invalid.
 *
 * It is possible to apply a different encryption algorithm to different
 * files, and unlike the password, this does not interfere with mounting the
 * multifile via VFS.  Changing this value may cause an implicit call to
 * flush().
 */ 2 4 this 3 1474  20 encryption_algorithm 1 1396  
387 0 0 6 480 1396 0 0 96 /**
 * Returns the encryption algorithm that was specified by
 * set_encryption_algorithm().
 */ 1 4 this 3 1476  
388 0 0 4 481 1355 0 0 611 /**
 * Specifies the length of the key, in bits, that should be used to encrypt
 * the stream in future calls to add_subfile().  The default is whatever is
 * specified by the encryption-key-length config variable.
 *
 * If an invalid key_length for the chosen algorithm is specified, there is no
 * immediate error return code, but flush() will fail and the file will be
 * invalid.
 *
 * It is possible to apply a different key length to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS. Changing this value may cause an implicit call to flush().
 */ 2 4 this 3 1474  21 encryption_key_length 1 1291  
389 0 0 6 482 1291 0 0 108 /**
 * Returns the encryption key length, in bits, that was specified by
 * set_encryption_key_length().
 */ 1 4 this 3 1476  
390 0 0 4 483 1355 0 0 740 /**
 * Specifies the number of times to repeatedly hash the key before writing it
 * to the stream in future calls to add_subfile().  Its purpose is to make it
 * computationally more expensive for an attacker to search the key space
 * exhaustively.  This should be a multiple of 1,000 and should not exceed
 * about 65 million; the value 0 indicates just one application of the hashing
 * algorithm.
 *
 * The default is whatever is specified by the multifile-encryption-iteration-
 * count config variable.
 *
 * It is possible to apply a different iteration count to different files, and
 * unlike the password, this does not interfere with mounting the multifile
 * via VFS.  Changing this value causes an implicit call to flush().
 */ 2 4 this 3 1474  26 encryption_iteration_count 1 1291  
391 0 0 6 484 1291 0 0 84 /**
 * Returns the value that was specified by set_encryption_iteration_count().
 */ 1 4 this 3 1476  
392 0 0 6 485 1396 0 0 618 /**
 * Adds a file on disk as a subfile to the Multifile.  The file named by
 * filename will be read and added to the Multifile at the next call to
 * flush().  If there already exists a subfile with the indicated name, it is
 * replaced without examining its contents (but see also update_subfile).
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */ 4 4 this 3 1474  12 subfile_name 1 1396  8 filename 1 1438  17 compression_level 1 1291  
393 0 0 6 485 1396 0 0 777 /**
 * Adds a file from a stream as a subfile to the Multifile.  The indicated
 * istream will be read and its contents added to the Multifile at the next
 * call to flush(). The file will be added as a binary subfile.
 *
 * Note that the istream must remain untouched and unused by any other code
 * until flush() is called.  At that time, the Multifile will read the entire
 * contents of the istream from the current file position to the end of the
 * file.  Subsequently, the Multifile will *not* close or delete the istream.
 * It is the caller's responsibility to ensure that the istream pointer does
 * not destruct during the lifetime of the Multifile.
 *
 * Returns the subfile name on success (it might have been modified slightly),
 * or empty string on failure.
 */ 4 4 this 3 1474  12 subfile_name 1 1396  12 subfile_data 1 1458  17 compression_level 1 1291  
394 0 0 6 486 1396 0 0 451 /**
 * Adds a file on disk to the subfile.  If a subfile already exists with the
 * same name, its contents are compared byte-for-byte to the disk file, and it
 * is replaced only if it is different; otherwise, the multifile is left
 * unchanged.
 *
 * Either Filename:::set_binary() or set_text() must have been called
 * previously to specify the nature of the source file.  If set_text() was
 * called, the text flag will be set on the subfile.
 */ 4 4 this 3 1474  12 subfile_name 1 1396  8 filename 1 1438  17 compression_level 1 1291  
395 0 0 6 487 1287 0 0 1292 /**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * The chain filename may be empty if the certificate does not require an
 * authenticating certificate chain (e.g.  because it is self-signed).
 *
 * The specified private key must match the certificate, and the Multifile
 * must be open in read-write mode.  The private key is only used for
 * generating the signature; it is not written to the Multifile and cannot be
 * retrieved from the Multifile later.  (However, the certificate *can* be
 * retrieved from the Multifile later, to identify the entity that created the
 * signature.)
 *
 * This implicitly causes a repack() operation if one is needed.  Returns true
 * on success, false on failure.
 *
 * This flavor of add_signature() reads the certificate and private key from a
 * PEM-formatted file, for instance as generated by the openssl command.  If
 * the private key file is password-encrypted, the third parameter will be
 * used as the password to decrypt it.
 */ 5 4 this 3 1474  11 certificate 1 1438  5 chain 1 1438  4 pkey 1 1438  8 password 1 1396  
396 0 0 6 487 1287 0 0 724 /**
 * Adds a new signature to the Multifile.  This signature associates the
 * indicated certificate with the current contents of the Multifile.  When the
 * Multifile is read later, the signature will still be present only if the
 * Multifile is unchanged; any subsequent changes to the Multifile will
 * automatically invalidate and remove the signature.
 *
 * This flavor of add_signature() reads the certificate, private key, and
 * certificate chain from the same PEM-formatted file.  It takes the first
 * private key found as the intended key, and then uses the first certificate
 * found that matches that key as the signing certificate.  Any other
 * certificates in the file are taken to be part of the chain.
 */ 3 4 this 3 1474  9 composite 1 1438  8 password 1 1396  
397 0 0 6 488 1291 0 0 555 /**
 * Returns the number of matching signatures found on the Multifile.  These
 * signatures may be iterated via get_signature() and related methods.
 *
 * A signature on this list is guaranteed to match the Multifile contents,
 * proving that the Multifile has been unmodified since the signature was
 * applied.  However, this does not guarantee that the certificate itself is
 * actually from who it says it is from; only that it matches the Multifile
 * contents.  See validate_signature_certificate() to authenticate a
 * particular certificate.
 */ 1 4 this 3 1476  
398 0 0 6 489 1396 0 0 352 /**
 * Returns the "subject name" for the nth signature found on the Multifile.
 * This is a string formatted according to RFC2253 that should more-or-less
 * identify a particular certificate; when paired with the public key (see
 * get_signature_public_key()), it can uniquely identify a certificate.  See
 * the comments in get_num_signatures().
 */ 2 4 this 3 1476  1 n 1 1291  
399 0 0 6 490 1396 0 0 299 /**
 * Returns a "friendly name" for the nth signature found on the Multifile.
 * This attempts to extract out the most meaningful part of the subject name.
 * It returns the emailAddress, if it is defined; otherwise, it returns the
 * commonName.
 *
 * See the comments in get_num_signatures().
 */ 2 4 this 3 1476  1 n 1 1291  
400 0 0 6 491 1396 0 0 379 /**
 * Returns the public key used for the nth signature found on the Multifile.
 * This is encoded in DER form and returned as a string of hex digits.
 *
 * This can be used, in conjunction with the subject name (see
 * get_signature_subject_name()), to uniquely identify a particular
 * certificate and its subsequent reissues.  See the comments in
 * get_num_signatures().
 */ 2 4 this 3 1476  1 n 1 1291  
401 0 0 4 492 1355 0 0 158 /**
 * Writes the certificate for the nth signature, in user-readable verbose
 * form, to the indicated stream.  See the comments in get_num_signatures().
 */ 3 4 this 3 1476  1 n 1 1291  3 out 1 1365  
402 0 0 4 493 1355 0 0 140 /**
 * Writes the certificate for the nth signature, in PEM form, to the indicated
 * stream.  See the comments in get_num_signatures().
 */ 3 4 this 3 1476  1 n 1 1291  3 out 1 1365  
403 0 0 6 494 1291 0 0 289 /**
 * Checks that the certificate used for the nth signature is a valid,
 * authorized certificate with some known certificate authority.  Returns 0 if
 * it is valid, -1 if there is some error, or the corresponding OpenSSL error
 * code if it is invalid, out-of-date, or self-signed.
 */ 2 4 this 3 1476  1 n 1 1291  
404 0 0 6 495 1287 0 0 691 /**
 * Writes all contents of the Multifile to disk.  Until flush() is called,
 * add_subfile() and remove_subfile() do not actually do anything to disk.  At
 * this point, all of the recently-added subfiles are read and their contents
 * are added to the end of the Multifile, and the recently-removed subfiles
 * are marked gone from the Multifile.
 *
 * This may result in a suboptimal index.  To guarantee that the index is
 * written at the beginning of the file, call repack() instead of flush().
 *
 * It is not necessary to call flush() explicitly unless you are concerned
 * about reading the recently-added subfiles immediately.
 *
 * Returns true on success, false on failure.
 */ 1 4 this 3 1474  
405 0 0 6 496 1287 0 0 587 /**
 * Forces a complete rewrite of the Multifile and all of its contents, so that
 * its index will appear at the beginning of the file with all of the subfiles
 * listed in alphabetical order.  This is considered optimal for reading, and
 * is the standard configuration; but it is not essential to do this.
 *
 * It is only valid to call this if the Multifile was opened using
 * open_read_write() and an explicit filename, rather than an iostream.  Also,
 * we must have write permission to the directory containing the Multifile.
 *
 * Returns true on success, false on failure.
 */ 1 4 this 3 1474  
406 0 0 6 497 1291 0 0 169 /**
 * Returns the number of subfiles within the Multifile.  The subfiles may be
 * accessed in alphabetical order by iterating through [0 ..
 * get_num_subfiles()).
 */ 1 4 this 3 1476  
407 0 0 6 498 1291 0 0 127 /**
 * Returns the index of the subfile with the indicated name, or -1 if the
 * named subfile is not within the Multifile.
 */ 2 4 this 3 1476  12 subfile_name 1 1396  
408 0 0 6 499 1287 0 0 203 /**
 * Returns true if the indicated subfile name is the directory prefix to one
 * or more files within the Multifile.  That is, the Multifile contains at
 * least one file named "subfile_name/...".
 */ 2 4 this 3 1476  12 subfile_name 1 1396  
409 0 0 6 500 1287 0 0 420 /**
 * Considers subfile_name to be the name of a subdirectory within the
 * Multifile, but not a file itself; fills the given vector up with the sorted
 * list of subdirectories or files within the named directory.
 *
 * Note that directories do not exist explicitly within a Multifile; this just
 * checks for the existence of files with the given initial prefix.
 *
 * Returns true if successful, false otherwise.
 */ 3 4 this 3 1476  8 contents 1 1478  12 subfile_name 1 1396  
410 0 0 4 501 1355 0 0 435 /**
 * Removes the nth subfile from the Multifile.  This will cause all subsequent
 * index numbers to decrease by one.  The file will not actually be removed
 * from the disk until the next call to flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */ 2 4 this 3 1474  5 index 1 1291  
411 0 0 6 501 1287 0 0 475 /**
 * Removes the named subfile from the Multifile, if it exists; returns true if
 * successfully removed, or false if it did not exist in the first place.  The
 * file will not actually be removed from the disk until the next call to
 * flush().
 *
 * Note that this does not actually remove the data from the indicated
 * subfile; it simply removes it from the index.  The Multifile will not be
 * reduced in size after this operation, until the next call to repack().
 */ 2 4 this 3 1474  12 subfile_name 1 1396  
412 0 0 6 502 1396 0 0 47 /**
 * Returns the name of the nth subfile.
 */ 2 4 this 3 1476  5 index 1 1291  
413 0 0 6 504 1288 0 0 170 /**
 * Returns the uncompressed data length of the nth subfile.  This might return
 * 0 if the subfile has recently been added and flush() has not yet been
 * called.
 */ 2 4 this 3 1476  5 index 1 1291  
414 0 0 6 505 1441 0 0 270 /**
 * Returns the modification time of the nth subfile.  If this is called on an
 * older .mf file, which did not store individual timestamps in the file (or
 * if get_record_timestamp() is false), this will return the modification time
 * of the overall multifile.
 */ 2 4 this 3 1476  5 index 1 1291  
415 0 0 6 506 1287 0 0 120 /**
 * Returns true if the indicated subfile has been compressed when stored
 * within the archive, false otherwise.
 */ 2 4 this 3 1476  5 index 1 1291  
416 0 0 6 507 1287 0 0 119 /**
 * Returns true if the indicated subfile has been encrypted when stored within
 * the archive, false otherwise.
 */ 2 4 this 3 1476  5 index 1 1291  
417 0 0 6 508 1287 0 0 343 /**
 * Returns true if the indicated subfile represents text data, or false if it
 * represents binary data.  If the file is text data, it may have been
 * processed by end-of-line conversion when it was added.  (But the actual
 * bits in the multifile will represent the standard Unix end-of-line
 * convention, e.g.  \n instead of \r\n.)
 */ 2 4 this 3 1476  5 index 1 1291  
418 0 0 6 509 1306 0 0 371 /**
 * Returns the first byte that is guaranteed to follow any index byte already
 * written to disk in the Multifile.
 *
 * This number is largely meaningless in many cases, but if needs_repack() is
 * false, and the file is flushed, this will indicate the number of bytes in
 * the header + index.  Everything at this byte position and later will be
 * actual data.
 */ 1 4 this 3 1476  
419 0 0 6 510 1306 0 0 338 /**
 * Returns the starting byte position within the Multifile at which the
 * indicated subfile begins.  This may be used, with
 * get_subfile_internal_length(), for low-level access to the subfile, but
 * usually it is better to use open_read_subfile() instead (which
 * automatically decrypts and/or uncompresses the subfile data).
 */ 2 4 this 3 1476  5 index 1 1291  
420 0 0 6 511 1288 0 0 322 /**
 * Returns the number of bytes the indicated subfile consumes within the
 * archive.  For compressed subfiles, this will generally be smaller than
 * get_subfile_length(); for encrypted (but noncompressed) subfiles, it may be
 * slightly different, for noncompressed and nonencrypted subfiles, it will be
 * equal.
 */ 2 4 this 3 1476  5 index 1 1291  
421 0 0 6 512 1417 0 0 96 /**
 * Returns a vector_uchar that contains the entire contents of the indicated
 * subfile.
 */ 2 4 this 3 1474  5 index 1 1291  
422 0 0 6 513 1458 0 0 745 /**
 * Returns an istream that may be used to read the indicated subfile.  You may
 * seek() within this istream to your heart's content; even though it will be
 * a reference to the already-opened pfstream of the Multifile itself, byte 0
 * appears to be the beginning of the subfile and EOF appears to be the end of
 * the subfile.
 *
 * The returned istream will have been allocated via new; you should pass the
 * pointer to close_read_subfile() when you are finished with it to delete it
 * and release its resources.
 *
 * Any future calls to repack() or close() (or the Multifile destructor) will
 * invalidate all currently open subfile pointers.
 *
 * The return value will be NULL if the stream cannot be opened for some
 * reason.
 */ 2 4 this 3 1474  5 index 1 1291  
423 0 0 4 514 1355 0 0 246 /**
 * Closes a file opened by a previous call to open_read_subfile().  This
 * really just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 1458  
424 0 0 6 515 1287 0 0 68 /**
 * Extracts the nth subfile into a file with the given name.
 */ 3 4 this 3 1474  5 index 1 1291  8 filename 1 1438  
425 0 0 6 516 1287 0 0 61 /**
 * Extracts the nth subfile to the indicated ostream.
 */ 3 4 this 3 1474  5 index 1 1291  3 out 1 1365  
426 0 0 6 517 1287 0 0 509 /**
 * Performs a byte-for-byte comparison of the indicated file on disk with the
 * nth subfile.  Returns true if the files are equivalent, or false if they
 * are different (or the file is missing).
 *
 * If Filename::set_binary() or set_text() has already been called, it
 * specifies the nature of the source file.  If this is different from the
 * text flag of the subfile, the comparison will always return false.  If this
 * has not been specified, it will be set from the text flag of the subfile.
 */ 3 4 this 3 1474  5 index 1 1291  8 filename 1 1438  
427 0 0 4 518 1355 0 0 10 /**
 *
 */ 2 4 this 3 1476  3 out 1 1365  
428 0 0 4 519 1355 0 0 61 /**
 * Shows a list of all subfiles within the Multifile.
 */ 2 4 this 3 1476  3 out 1 1365  
429 0 0 6 520 1396 0 0 108 /**
 * Returns a string with the first n bytes written to a Multifile, to identify
 * it as a Multifile.
 */ 0 
430 0 0 4 524 1355 0 0 644 /**
 * Sets the string which is written to the Multifile before the Multifile
 * header.  This string must begin with a hash mark and end with a newline
 * character; and if it includes embedded newline characters, each one must be
 * followed by a hash mark.  If these conditions are not initially true, the
 * string will be modified as necessary to make it so.
 *
 * This is primarily useful as a simple hack to allow p3d applications to be
 * run directly from the command line on Unix-like systems.
 *
 * The return value is true if successful, or false on failure (for instance,
 * because the header prefix violates the above rules).
 */ 2 4 this 3 1474  13 header_prefix 1 1396  
431 0 0 6 525 1396 0 0 113 /**
 * Returns the string that preceded the Multifile header on the file, if any.
 * See set_header_prefix().
 */ 1 4 this 3 1476  
432 0 0 7 527 1483 1088 0 0 1 6 param0 0 1481  
433 0 0 7 527 1483 1088 0 10 /**
 *
 */ 1 12 initial_name 1 1396  
434 0 0 4 528 1355 0 0 10 /**
 *
 */ 2 4 this 3 1483  4 name 1 1396  
435 0 0 4 529 1355 0 0 46 /**
 * Resets the Namable's name to empty.
 */ 1 4 this 3 1483  
436 0 0 6 530 1287 0 0 94 /**
 * Returns true if the Namable has a nonempty name set, false if the name is
 * empty.
 */ 1 4 this 3 1481  
437 0 0 6 531 1396 0 0 10 /**
 *
 */ 1 4 this 3 1481  
438 0 0 4 534 1355 0 0 148 /**
 * Outputs the Namable.  This function simply writes the name to the output
 * stream; most Namable derivatives will probably redefine this.
 */ 2 4 this 3 1481  3 out 1 1365  
439 0 0 7 535 1394 0 0 0 0 
440 0 0 4 538 1355 0 0 200 /**
 * Removes all the certificates from the global store, including the compiled-
 * in certificates loaded from ca_bundle_data.c.  You can add new certificates
 * by calling load_certificates().
 */ 1 4 this 3 1484  
441 0 0 6 539 1291 0 0 436 /**
 * Reads the PEM-formatted certificate(s) (delimited by -----BEGIN
 * CERTIFICATE----- and -----END CERTIFICATE-----) from the indicated file and
 * adds them to the global store object, retrieved via get_x509_store().
 *
 * Returns the number of certificates read on success, or 0 on failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 2 4 this 3 1484  8 filename 1 1438  
442 0 0 6 540 1291 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 3 4 this 3 1484  4 data 1 1396  9 data_size 1 1288  
443 0 0 6 540 1291 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be PEM-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 2 4 this 3 1484  4 data 1 1396  
444 0 0 6 541 1291 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 3 4 this 3 1484  4 data 1 1396  9 data_size 1 1288  
445 0 0 6 541 1291 0 0 376 /**
 * Reads a chain of trusted certificates from the indicated data buffer and
 * adds them to the X509_STORE object.  The data buffer should be DER-
 * formatted.  Returns the number of certificates read on success, or 0 on
 * failure.
 *
 * You should call this only with trusted, locally-stored certificates; not
 * with certificates received from an untrusted source.
 */ 2 4 this 3 1484  4 data 1 1396  
446 0 0 6 542 1485 0 0 378 /**
 * Returns the global X509_STORE object.
 *
 * It has to be a global object, because OpenSSL seems to store some global
 * pointers associated with this object whether you want it to or not, and
 * keeping independent copies of a local X509_STORE object doesn't seem to
 * work that well.  So, we have one store that keeps all certificates the
 * application might need.
 */ 1 4 this 3 1484  
447 0 0 4 543 1355 0 0 277 /**
 * A convenience function that is itself a wrapper around the OpenSSL
 * convenience function to output the recent OpenSSL errors.  This function
 * sends the error string to express_cat.warning().  If REPORT_OPENSSL_ERRORS
 * is not defined, the function does nothing.
 */ 1 4 this 3 1484  
448 0 0 4 544 1355 0 0 84 /**
 * As notify_ssl_errors(), but sends the output to debug instead of warning.
 */ 1 4 this 3 1484  
449 0 0 6 545 1484 0 0 10 /**
 *
 */ 0 
450 0 0 7 547 1437 1105 0 10 /**
 *
 */ 0 
451 0 0 7 547 1437 1105 0 10 /**
 *
 */ 3 4 file 1 1302  5 start 1 1306  4 size 1 1488  
452 0 0 7 547 1437 1105 0 10 /**
 *
 */ 3 8 filename 1 1438  5 start 1 1306  4 size 1 1488  
453 0 0 7 547 1437 1105 0 10 /**
 *
 */ 1 4 copy 1 1448  
454 0 0 6 548 1437 0 0 0 2 4 this 3 1437  4 copy 1 1448  
455 0 0 6 549 1287 0 0 98 /**
 * Returns true if this SubfileInfo doesn't define any file, false if it has
 * real data.
 */ 1 4 this 3 1448  
456 0 0 7 550 1302 0 0 63 /**
 * Returns the FileReference that represents this file.
 */ 1 4 this 3 1448  
457 0 0 6 551 1438 0 0 38 /**
 * A shortcut to the filename.
 */ 1 4 this 3 1448  
458 0 0 6 552 1306 0 0 77 /**
 * Returns the offset within the file at which this file data begins.
 */ 1 4 this 3 1448  
459 0 0 6 553 1488 0 0 115 /**
 * Returns the number of consecutive bytes, beginning at get_start(), that
 * correspond to this file data.
 */ 1 4 this 3 1448  
460 0 0 4 554 1355 0 0 10 /**
 *
 */ 2 4 this 3 1448  3 out 1 1365  
461 0 0 6 557 1492 0 0 0 1 4 this 3 1490  
462 0 0 7 558 1493 0 0 0 1 4 this 3 1490  
463 0 0 6 559 1438 0 0 166 /**
 * Returns the original filename as it was used to locate this VirtualFile.
 * This is usually, but not always, the same string returned by
 * get_filename().
 */ 1 4 this 3 1490  
464 0 0 6 560 1287 0 0 61 /**
 * Returns true if this file exists, false otherwise.
 */ 1 4 this 3 1490  
465 0 0 6 561 1287 0 0 117 /**
 * Returns true if this file represents a directory (and scan_directory() may
 * be called), false otherwise.
 */ 1 4 this 3 1490  
466 0 0 6 562 1287 0 0 115 /**
 * Returns true if this file represents a regular file (and read_file() may be
 * called), false otherwise.
 */ 1 4 this 3 1490  
467 0 0 6 563 1287 0 0 153 /**
 * Returns true if this file may be written to, which implies write_file() may
 * be called (unless it is a directory instead of a regular file).
 */ 1 4 this 3 1490  
468 0 0 6 564 1287 0 0 199 /**
 * Attempts to delete this file or directory.  This can remove a single file
 * or an empty directory.  It will not remove a nonempty directory.  Returns
 * true on success, false on failure.
 */ 1 4 this 3 1443  
469 0 0 6 565 1287 0 0 589 /**
 * Attempts to move or rename this file or directory.  If the original file is
 * an ordinary file, it will quietly replace any already-existing file in the
 * new filename (but not a directory).  If the original file is a directory,
 * the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */ 2 4 this 3 1443  8 new_file 1 1443  
470 0 0 6 566 1287 0 0 123 /**
 * Attempts to copy the contents of this file to the indicated file.  Returns
 * true on success, false on failure.
 */ 2 4 this 3 1443  8 new_file 1 1443  
471 0 0 7 567 1494 807 0 247 /**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */ 1 4 this 3 1490  
472 0 0 4 568 1355 0 0 10 /**
 *
 */ 2 4 this 3 1490  3 out 1 1365  
473 0 0 4 569 1355 0 0 66 /**
 * If the file represents a directory, lists its contents.
 */ 2 4 this 3 1490  3 out 1 1365  
474 0 0 4 570 1355 0 0 113 /**
 * If the file represents a directory, recursively lists its contents and
 * those of all subdirectories.
 */ 2 4 this 3 1490  3 out 1 1365  
475 0 0 6 571 1356 0 0 63 /**
 * Returns the entire contents of the file as a string.
 */ 2 4 this 3 1490  11 auto_unwrap 1 1287  
476 0 0 6 572 1458 0 0 179 /**
 * Opens the file for reading.  Returns a newly allocated istream on success
 * (which you should eventually delete when you are done reading). Returns
 * NULL on failure.
 */ 2 4 this 3 1490  11 auto_unwrap 1 1287  
477 0 0 4 573 1355 0 0 243 /**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 2 4 this 3 1490  6 stream 1 1458  
478 0 0 6 574 1287 0 0 324 /**
 * Call this method after a reading the istream returned by open_read_file()
 * to completion.  If it returns true, the file was read completely and
 * without error; if it returns false, there may have been some errors or a
 * truncated file read.  This is particularly likely if the stream is a
 * VirtualFileHTTP.
 */ 1 4 this 3 1490  
479 0 0 6 575 1356 0 0 0 3 4 this 3 1443  4 data 1 1356  9 auto_wrap 1 1287  
480 0 0 6 576 1365 0 0 179 /**
 * Opens the file for writing.  Returns a newly allocated ostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */ 3 4 this 3 1443  9 auto_wrap 1 1287  8 truncate 1 1287  
481 0 0 6 577 1365 0 0 180 /**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */ 1 4 this 3 1443  
482 0 0 4 578 1355 0 0 244 /**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 2 4 this 3 1443  6 stream 1 1365  
483 0 0 6 579 1475 0 0 180 /**
 * Opens the file for writing.  Returns a newly allocated iostream on success
 * (which you should eventually delete when you are done writing). Returns
 * NULL on failure.
 */ 2 4 this 3 1443  8 truncate 1 1287  
484 0 0 6 580 1475 0 0 194 /**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */ 1 4 this 3 1443  
485 0 0 4 581 1355 0 0 250 /**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 2 4 this 3 1443  6 stream 1 1475  
486 0 0 6 582 1488 0 0 105 /**
 * Returns the current size on disk (or wherever it is) of the file before it
 * has been opened.
 */ 1 4 this 3 1490  
487 0 0 6 582 1488 0 0 222 /**
 * Returns the current size on disk (or wherever it is) of the already-open
 * file.  Pass in the stream that was returned by open_read_file(); some
 * implementations may require this stream to determine the size.
 */ 2 4 this 3 1490  6 stream 1 1458  
488 0 0 6 583 1441 0 0 434 /**
 * Returns a time_t value that represents the time the file was last modified,
 * to within whatever precision the operating system records this information
 * (on a Windows95 system, for instance, this may only be accurate to within 2
 * seconds).
 *
 * If the timestamp cannot be determined, either because it is not supported
 * by the operating system or because there is some error (such as file not
 * found), returns 0.
 */ 1 4 this 3 1490  
489 0 0 6 584 1287 0 0 330 /**
 * Populates the SubfileInfo structure with the data representing where the
 * file actually resides on disk, if this is knowable.  Returns true if the
 * file might reside on disk, and the info is populated, or false if it does
 * not (or it is not known where the file resides), in which case the info is
 * meaningless.
 */ 2 4 this 3 1443  4 info 1 1437  
490 0 0 7 585 1394 0 0 0 0 
491 0 0 7 588 1394 0 0 0 0 
492 0 0 6 591 1492 0 0 68 /**
 * Returns the file system this mount object is attached to.
 */ 1 4 this 3 1495  
493 0 0 6 592 1438 0 0 161 /**
 * Returns the name of the directory within the virtual file system that this
 * mount object is attached to.  This directory name will end with a slash.
 */ 1 4 this 3 1495  
494 0 0 6 593 1291 0 0 100 /**
 * Returns the set of flags passed by the user to the
 * VirtualFileSystem::mount() command.
 */ 1 4 this 3 1495  
495 0 0 4 594 1355 0 0 10 /**
 *
 */ 2 4 this 3 1495  3 out 1 1365  
496 0 0 4 595 1355 0 0 10 /**
 *
 */ 2 4 this 3 1495  3 out 1 1365  
497 0 0 7 596 1394 0 0 0 0 
498 0 0 7 598 1497 940 0 10 /**
 *
 */ 1 9 multifile 1 1474  
499 0 0 7 599 1474 807 0 76 /**
 * Returns the Multifile pointer that this mount object is based on.
 */ 1 4 this 3 1498  
500 0 0 7 600 1394 0 0 0 0 
501 0 0 7 602 1500 1149 0 10 /**
 *
 */ 0 
502 0 0 7 603 1394 0 0 0 0 
503 0 0 7 606 1501 1153 0 10 /**
 *
 */ 1 17 physical_filename 1 1438  
504 0 0 6 607 1438 0 0 112 /**
 * Returns the name of the source file on the OS filesystem of the directory
 * or file that is mounted.
 */ 1 4 this 3 1502  
505 0 0 7 608 1394 0 0 0 0 
506 0 0 7 611 1506 940 0 69 /**
 * Returns the VirtualFileMount this file is associated with.
 */ 1 4 this 3 1504  
507 0 0 6 612 1287 0 0 174 /**
 * Returns true if this file is a .pz file that should be implicitly
 * decompressed on load, or false if it is not a .pz file or if it should not
 * be decompressed.
 */ 1 4 this 3 1504  
508 0 0 7 613 1394 0 0 0 0 
509 0 0 7 616 1507 944 0 10 /**
 *
 */ 1 8 filename 1 1438  
510 0 0 7 616 1507 944 0 0 1 6 param0 0 1508  
511 0 0 7 617 1394 0 0 0 0 
512 0 0 7 619 1510 1163 0 10 /**
 *
 */ 0 
513 0 0 7 619 1510 1163 0 10 /**
 *
 */ 2 6 source 1 1458  11 owns_source 1 1287  
514 0 0 6 620 1510 0 0 10 /**
 *
 */ 3 4 this 3 1510  6 source 1 1458  11 owns_source 1 1287  
515 0 0 6 621 1510 0 0 118 /**
 * Resets the ZStream to empty, but does not actually close the source istream
 * unless owns_source was true.
 */ 1 4 this 3 1510  
516 0 0 7 624 1511 1167 0 10 /**
 *
 */ 0 
517 0 0 7 624 1511 1167 0 10 /**
 *
 */ 3 4 dest 1 1365  9 owns_dest 1 1287  17 compression_level 1 1291  
518 0 0 6 625 1511 0 0 10 /**
 *
 */ 4 4 this 3 1511  4 dest 1 1365  9 owns_dest 1 1287  17 compression_level 1 1291  
519 0 0 6 626 1511 0 0 114 /**
 * Resets the ZStream to empty, but does not actually close the dest ostream
 * unless owns_dest was true.
 */ 1 4 this 3 1511  
520 0 0 7 636 1494 807 0 0 1 6 param0 0 1512  
521 0 0 6 629 1288 0 0 51 /**
 * Returns the number of files in the list.
 */ 1 4 this 3 1512  
522 0 0 7 630 1443 1135 0 44 /**
 * Returns the nth file in the list.
 */ 2 4 this 3 1512  1 n 1 1288  
523 0 0 7 632 1443 1135 0 44 /**
 * Returns the nth file in the list.
 */ 2 4 this 3 1512  1 n 1 1288  
524 0 0 6 633 1288 0 0 51 /**
 * Returns the number of files in the list.
 */ 1 4 this 3 1512  
525 0 0 7 634 1494 807 0 0 2 4 this 3 1494  5 other 1 1512  
526 0 0 7 635 1494 807 0 0 2 4 this 3 1512  5 other 1 1512  
527 0 0 7 638 1492 1176 0 10 /**
 *
 */ 0 
528 0 0 6 641 1287 0 0 1009 /**
 * Mounts the indicated system file or directory at the given mount point.  If
 * the named file is a directory, mounts the directory.  If the named file is
 * a Multifile, mounts it as a Multifile.  Returns true on success, false on
 * failure.
 *
 * A given system directory may be mounted to multiple different mount point,
 * and the same mount point may share multiple system directories.  In the
 * case of ambiguities (that is, two different files with exactly the same
 * full pathname), the most-recently mounted system wins.
 *
 * The filename specified as the first parameter must refer to a real,
 * physical filename on disk; it cannot be a virtual file already appearing
 * within the vfs filespace.  However, it is possible to mount such a file;
 * see mount_loop() for this.
 *
 * Note that a mounted VirtualFileSystem directory is fully case-sensitive,
 * unlike the native Windows file system, so you must refer to files within
 * the virtual file system with exactly the right case.
 */ 5 4 this 3 1492  17 physical_filename 1 1438  11 mount_point 1 1438  5 flags 1 1291  8 password 1 1396  
529 0 0 6 641 1287 0 0 67 /**
 * Mounts the indicated Multifile at the given mount point.
 */ 4 4 this 3 1492  9 multifile 1 1474  11 mount_point 1 1438  5 flags 1 1291  
530 0 0 6 641 1287 0 0 208 /**
 * Adds the given VirtualFileMount object to the mount list.  This is a lower-
 * level function than the other flavors of mount(); it requires you to create
 * a VirtualFileMount object specifically.
 */ 4 4 this 3 1492  5 mount 1 1506  11 mount_point 1 1438  5 flags 1 1291  
531 0 0 6 642 1287 0 0 587 /**
 * This is similar to mount(), but it receives the name of a Multifile that
 * already appears within the virtual file system.  It can be used to mount a
 * Multifile that is itself hosted within a virtually-mounted Multifile.
 *
 * This interface can also be used to mount physical files (that appear within
 * the virtual filespace), but it cannot be used to mount directories.  Use
 * mount() if you need to mount a directory.
 *
 * Note that there is additional overhead, in the form of additional buffer
 * copies of the data, for recursively mounting a multifile like this.
 */ 5 4 this 3 1492  16 virtual_filename 1 1438  11 mount_point 1 1438  5 flags 1 1291  8 password 1 1396  
532 0 0 6 643 1291 0 0 156 /**
 * Unmounts all appearances of the indicated directory name or multifile name
 * from the file system.  Returns the number of appearances unmounted.
 */ 2 4 this 3 1492  17 physical_filename 1 1438  
533 0 0 6 643 1291 0 0 132 /**
 * Unmounts all appearances of the indicated Multifile from the file system.
 * Returns the number of appearances unmounted.
 */ 2 4 this 3 1492  9 multifile 1 1474  
534 0 0 6 643 1291 0 0 127 /**
 * Unmounts the indicated VirtualFileMount object from the file system.
 * Returns the number of appearances unmounted.
 */ 2 4 this 3 1492  5 mount 1 1506  
535 0 0 6 644 1291 0 0 136 /**
 * Unmounts all systems attached to the given mount point from the file
 * system.  Returns the number of appearances unmounted.
 */ 2 4 this 3 1492  11 mount_point 1 1438  
536 0 0 6 645 1291 0 0 96 /**
 * Unmounts all files from the file system.  Returns the number of systems
 * unmounted.
 */ 1 4 this 3 1492  
537 0 0 6 646 1291 0 0 65 /**
 * Returns the number of individual mounts in the system.
 */ 1 4 this 3 1514  
538 0 0 7 647 1506 940 0 47 /**
 * Returns the nth mount in the system.
 */ 2 4 this 3 1514  1 n 1 1291  
539 0 0 6 660 1287 0 0 171 /**
 * Changes the current directory.  This is used to resolve relative pathnames
 * in get_file() and/or find_file().  Returns true if successful, false
 * otherwise.
 */ 2 4 this 3 1492  13 new_directory 1 1438  
540 0 0 7 661 1493 0 0 60 /**
 * Returns the current directory name.  See chdir().
 */ 1 4 this 3 1514  
541 0 0 6 662 1287 0 0 263 /**
 * Attempts to create a directory within the file system.  Returns true on
 * success, false on failure (for instance, because the parent directory does
 * not exist, or is read-only).  If the directory already existed prior to
 * this call, returns true.
 */ 2 4 this 3 1492  8 filename 1 1438  
542 0 0 6 663 1287 0 0 169 /**
 * Attempts to create a directory within the file system.  Will also create
 * any intervening directories needed.  Returns true on success, false on
 * failure.
 */ 2 4 this 3 1492  8 filename 1 1438  
543 0 0 7 664 1443 1135 0 537 /**
 * Looks up the file by the indicated name in the file system.  Returns a
 * VirtualFile pointer representing the file if it is found, or NULL if it is
 * not.
 *
 * If status_only is true, the file will be checked for existence and length
 * and so on, but the returned file's contents cannot be read.  This is an
 * optimization which is especially important for certain mount types, for
 * instance HTTP, for which opening a file to determine its status is
 * substantially less expensive than opening it to read its contents.
 */ 3 4 this 3 1514  8 filename 1 1438  11 status_only 1 1287  
544 0 0 7 665 1443 1135 0 298 /**
 * Attempts to create a file by the indicated name in the filesystem, if
 * possible, and returns it.  If a file by this name already exists, returns
 * the same thing as get_file().  If the filename is located within a read-
 * only directory, or the directory doesn't exist, returns NULL.
 */ 2 4 this 3 1492  8 filename 1 1438  
545 0 0 7 666 1443 1135 0 173 /**
 * Uses the indicated search path to find the file within the file system.
 * Returns the first occurrence of the file found, or NULL if the file cannot
 * be found.
 */ 4 4 this 3 1514  8 filename 1 1438  10 searchpath 1 1516  11 status_only 1 1287  
546 0 0 6 667 1287 0 0 208 /**
 * Attempts to delete the indicated file or directory.  This can remove a
 * single file or an empty directory.  It will not remove a nonempty
 * directory.  Returns true on success, false on failure.
 */ 2 4 this 3 1492  8 filename 1 1438  
547 0 0 6 668 1287 0 0 599 /**
 * Attempts to move or rename the indicated file or directory.  If the
 * original file is an ordinary file, it will quietly replace any already-
 * existing file in the new filename (but not a directory).  If the original
 * file is a directory, the new filename must not already exist.
 *
 * If the file is a directory, the new filename must be within the same mount
 * point.  If the file is an ordinary file, the new filename may be anywhere;
 * but if it is not within the same mount point then the rename operation is
 * automatically performed as a two-step copy-and-delete operation.
 */ 3 4 this 3 1492  13 orig_filename 1 1438  12 new_filename 1 1438  
548 0 0 6 669 1287 0 0 131 /**
 * Attempts to copy the contents of the indicated file to the indicated file.
 * Returns true on success, false on failure.
 */ 3 4 this 3 1492  13 orig_filename 1 1438  12 new_filename 1 1438  
549 0 0 6 670 1287 0 0 174 /**
 * Searches the given search path for the filename.  If it is found, updates
 * the filename to the full pathname found and returns true; otherwise,
 * returns false.
 */ 4 4 this 3 1514  8 filename 1 1493  10 searchpath 1 1516  17 default_extension 1 1396  
550 0 0 6 671 1291 0 0 363 /**
 * Searches all the directories in the search list for the indicated file, in
 * order.  Fills up the results list with *all* of the matching filenames
 * found, if any.  Returns the number of matches found.
 *
 * It is the responsibility of the the caller to clear the results list first;
 * otherwise, the newly-found files will be appended to the list.
 */ 4 4 this 3 1514  8 filename 1 1438  10 searchpath 1 1516  7 results 1 1519  
551 0 0 6 672 1287 0 0 71 /**
 * Convenience function; returns true if the named file exists.
 */ 2 4 this 3 1514  8 filename 1 1438  
552 0 0 6 673 1287 0 0 93 /**
 * Convenience function; returns true if the named file exists and is a
 * directory.
 */ 2 4 this 3 1514  8 filename 1 1438  
553 0 0 6 674 1287 0 0 96 /**
 * Convenience function; returns true if the named file exists and is a
 * regular file.
 */ 2 4 this 3 1514  8 filename 1 1438  
554 0 0 7 675 1494 807 0 247 /**
 * If the file represents a directory (that is, is_directory() returns true),
 * this returns the list of files within the directory at the current time.
 * Returns NULL if the file is not a directory or if the directory cannot be
 * read.
 */ 2 4 this 3 1514  8 filename 1 1438  
555 0 0 4 676 1355 0 0 80 /**
 * Convenience function; lists the files within the indicated directory.
 */ 2 4 this 3 1514  8 filename 1 1438  
556 0 0 4 677 1355 0 0 117 /**
 * Convenience function; lists the files within the indicated directory, and
 * all files below, recursively.
 */ 2 4 this 3 1514  8 filename 1 1438  
557 0 0 4 678 1355 0 0 75 /**
 * Print debugging information.  (e.g.  from Python or gdb prompt).
 */ 2 4 this 3 1514  3 out 1 1365  
558 0 0 6 679 1492 0 0 423 /**
 * Returns the default global VirtualFileSystem.  You may create your own
 * personal VirtualFileSystem objects and use them for whatever you like, but
 * Panda will attempt to load models and stuff from this default object.
 *
 * Initially, the global VirtualFileSystem is set up to mount the OS
 * filesystem to root; i.e.  it is equivalent to the OS filesystem.  This may
 * be subsequently adjusted by the user.
 */ 0 
559 0 0 6 680 1356 0 0 365 /**
 * Convenience function; returns the entire contents of the indicated file as
 * a string.
 *
 * If auto_unwrap is true, an explicitly-named .pz/.gz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */ 3 4 this 3 1514  8 filename 1 1438  11 auto_unwrap 1 1287  
560 0 0 6 681 1458 0 0 424 /**
 * Convenience function; returns a newly allocated istream if the file exists
 * and can be read, or NULL otherwise.  Does not return an invalid istream.
 *
 * If auto_unwrap is true, an explicitly-named .pz file is automatically
 * decompressed and the decompressed contents are returned.  This is different
 * than vfs-implicit-pz, which will automatically decompress a file if the
 * extension .pz is *not* given.
 */ 3 4 this 3 1514  8 filename 1 1438  11 auto_unwrap 1 1287  
561 0 0 4 682 1355 0 0 243 /**
 * Closes a file opened by a previous call to open_read_file().  This really
 * just deletes the istream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 1458  
562 0 0 6 683 1356 0 0 0 4 4 this 3 1492  8 filename 1 1438  4 data 1 1356  9 auto_wrap 1 1287  
563 0 0 6 684 1365 0 0 345 /**
 * Convenience function; returns a newly allocated ostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid ostream.
 *
 * If auto_wrap is true, an explicitly-named .pz file is automatically
 * compressed while writing.  If truncate is true, the file is truncated to
 * zero length before writing.
 */ 4 4 this 3 1492  8 filename 1 1438  9 auto_wrap 1 1287  8 truncate 1 1287  
564 0 0 6 685 1365 0 0 180 /**
 * Works like open_write_file(), but the file is opened in append mode.  Like
 * open_write_file, the returned pointer should eventually be passed to
 * close_write_file().
 */ 2 4 this 3 1492  8 filename 1 1438  
565 0 0 4 686 1355 0 0 244 /**
 * Closes a file opened by a previous call to open_write_file().  This really
 * just deletes the ostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 1365  
566 0 0 6 687 1475 0 0 169 /**
 * Convenience function; returns a newly allocated iostream if the file exists
 * and can be written, or NULL otherwise.  Does not return an invalid
 * iostream.
 */ 3 4 this 3 1492  8 filename 1 1438  8 truncate 1 1287  
567 0 0 6 688 1475 0 0 194 /**
 * Works like open_read_write_file(), but the file is opened in append mode.
 * Like open_read_write_file, the returned pointer should eventually be passed
 * to close_read_write_file().
 */ 2 4 this 3 1492  8 filename 1 1438  
568 0 0 4 689 1355 0 0 250 /**
 * Closes a file opened by a previous call to open_read_write_file().  This
 * really just deletes the iostream pointer, but it is recommended to use this
 * interface instead of deleting it explicitly, to help work around compiler
 * issues.
 */ 1 6 stream 1 1475  
569 0 0 7 654 1521 1191 0 0 0 
570 0 0 7 654 1521 1191 0 0 1 4 copy 1 1506  
571 0 0 7 654 1521 1191 0 0 1 3 ptr 1 1506  
572 0 0 7 654 1521 1191 0 0 1 6 param0 0 1522  
573 0 0 7 655 1506 940 0 289 // If your base class is a derivative of TypedObject, you might want to use
// the DCAST macro defined in typedObject.h instead, e.g.  DCAST(MyType,
// ptr).  This provides a clean downcast that doesn't require .p() or any
// double-casting, and it can be run-time checked for correctness. 1 4 this 3 1523  
574 0 0 6 656 1521 0 0 0 2 4 this 3 1521  4 copy 1 1506  
575 0 0 6 656 1521 0 0 0 2 4 this 3 1521  3 ptr 1 1506  
576 0 0 6 657 1287 0 0 0 1 4 this 3 1523  
577 0 0 4 658 1355 0 0 0 1 4 this 3 1521  
578 0 0 4 652 1355 0 0 0 1 4 this 3 1525  
579 0 0 4 653 1355 0 0 0 2 4 this 3 1526  3 out 1 1365  
580 0 0 6 691 1341 0 0 203 // get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul. 1 4 this 3 1528  
581 0 0 6 694 1341 0 0 206 // get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely. 1 4 this 3 1528  
582 0 0 6 696 1341 0 0 144 // get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS. 1 4 this 3 1528  
583 0 0 6 698 1291 0 0 369 /**
 * Returns the number of clock errors that have been detected.  Each time a
 * clock error is detected, in which the value returned by either of the above
 * methods is suspect, the value returned by this method will be incremented.
 * Applications can monitor this value and react, for instance, by
 * resynchronizing their clocks each time this value changes.
 */ 1 4 this 3 1529  
584 0 0 6 700 1528 0 0 70 /**
 * Returns a pointer to the one TrueClock object in the world.
 */ 0 
585 0 0 6 701 1287 0 0 10 /**
 *
 */ 2 4 this 3 1529  4 mask 1 1429  
586 0 0 7 703 1531 1229 0 60 /**
 * Create a patch file and initializes internal data
 */ 0 
587 0 0 7 703 1531 1229 0 49 /**
 * Create patch file with buffer to patch
 */ 1 6 buffer 1 1410  
588 0 0 6 705 1287 0 0 359 /**
 *
 * This implementation uses the "greedy differencing algorithm" described in
 * the masters thesis "Differential Compression: A Generalized Solution for
 * Binary Files" by Randal C. Burns (p.13). For an original file of size M and
 * a new file of size N, this algorithm is O(M) in space and O(M*N) (worst-
 * case) in time.  return false on error
 */ 4 4 this 3 1531  9 file_orig 1 1493  8 file_new 1 1493  10 patch_name 1 1493  
589 0 0 6 706 1291 0 0 193 /**
 * Opens the patch file for reading, and gets the header information from the
 * file but does not begin to do any real work.  This can be used to query the
 * data stored in the patch.
 */ 2 4 this 3 1531  10 patch_file 1 1438  
590 0 0 6 707 1291 0 0 107 /**
 * Set up to apply the patch to the file (original file and patch are
 * destroyed in the process).
 */ 3 4 this 3 1531  10 patch_file 1 1438  4 file 1 1438  
591 0 0 6 707 1291 0 0 127 /**
 * Set up to apply the patch to the file.  In this form, neither the original
 * file nor the patch file are destroyed.
 */ 4 4 this 3 1531  10 patch_file 1 1438  9 orig_file 1 1438  11 target_file 1 1438  
592 0 0 6 708 1291 0 0 350 /**
 * Perform one buffer's worth of patching Returns EU_ok while patching Returns
 * EU_success when done If error happens will return one of: EU_error_abort :
 * Patching has not been initiated EU_error_file_invalid : file is corrupted
 * EU_error_invalid_checksum : incompatible patch file
 * EU_error_write_file_rename : could not rename file
 */ 1 4 this 3 1531  
593 0 0 6 709 1287 0 0 171 /**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will delete the patch file and overwrite the original file.
 */ 3 4 this 3 1531  10 patch_file 1 1493  4 file 1 1493  
594 0 0 6 709 1287 0 0 138 /**
 * Patches the entire file in one call returns true on success and false on
 * error
 *
 * This version will not delete any files.
 */ 4 4 this 3 1531  10 patch_file 1 1493  9 orig_file 1 1493  11 target_file 1 1438  
595 0 0 6 710 1343 0 0 125 /**
 * Returns a value in the range 0..1, representing the amount of progress
 * through the patchfile, during a session.
 */ 1 4 this 3 1532  
596 0 0 4 714 1355 0 0 362 /**
 * If this flag is set true, the Patchfile will make a special case for
 * patching Panda Multifiles, if detected, and attempt to patch them on a
 * subfile-by-subfile basis.  If this flag is false, the Patchfile will always
 * patch the file on a full-file basis.
 *
 * This has effect only when building patches; it is not used for applying
 * patches.
 */ 2 4 this 3 1531  15 allow_multifile 1 1287  
597 0 0 6 715 1287 0 0 37 /**
 * See set_allow_multifile().
 */ 1 4 this 3 1531  
598 0 0 4 717 1355 0 0 10 /**
 *
 */ 2 4 this 3 1531  6 length 1 1291  
599 0 0 6 718 1291 0 0 10 /**
 *
 */ 1 4 this 3 1531  
600 0 0 4 719 1355 0 0 10 /**
 *
 */ 1 4 this 3 1531  
601 0 0 6 721 1287 0 0 145 /**
 * Returns true if the MD5 hash for the source file is known.  (Some early
 * versions of the patch file did not store this information.)
 */ 1 4 this 3 1532  
602 0 0 6 722 1457 0 0 52 /**
 * Returns the MD5 hash for the source file.
 */ 1 4 this 3 1532  
603 0 0 6 723 1457 0 0 78 /**
 * Returns the MD5 hash for the file after the patch has been applied.
 */ 1 4 this 3 1532  
604 0 0 7 729 1536 1246 0 0 1 5 other 1 1534  
605 0 0 7 729 1536 1246 0 0 2 4 name 1 1396  10 maxEntries 1 1291  
606 0 0 4 731 1355 0 0 0 3 4 this 3 1536  4 name 1 1396  10 maxEntries 1 1291  
607 0 0 4 732 1355 0 0 0 1 4 this 3 1536  
608 0 0 4 733 1355 0 0 0 2 4 this 3 1536  3 tag 1 1396  
609 0 0 4 734 1355 0 0 0 1 4 this 3 1536  
610 0 0 4 734 1355 0 0 0 2 4 this 3 1536  3 tag 1 1396  
611 0 0 6 735 1341 0 0 110 // Don't call any of the following during timing: (Because they are slow,
// not because anything will break). 1 4 this 3 1534  
612 0 0 4 736 1355 0 0 0 1 3 out 1 1365  
613 0 0 4 737 1355 0 0 0 2 4 this 3 1534  3 out 1 1365  
614 0 0 4 738 1355 0 0 0 1 3 out 1 1365  
615 0 0 4 739 1355 0 0 0 2 4 this 3 1534  3 out 1 1365  
616 0 0 6 741 1287 0 0 384 /**
 * Returns true if the object we are pointing to has been deleted, false
 * otherwise.  If this returns true, it means that the pointer can not yet be
 * reused, but it does not guarantee that it can be safely accessed.  See the
 * lock() method for a safe way to access the underlying pointer.
 *
 * This will always return true for a null pointer, unlike is_valid_pointer().
 */ 1 4 this 3 1537  
617 0 0 6 742 1287 0 0 122 /**
 * Returns true if the pointer is not null and the object has not been
 * deleted.  See was_deleted() for caveats.
 */ 1 4 this 3 1537  
618 0 0 6 226 1396 0 0 0 2 6 source 1 1396  17 compression_level 1 1291  
619 0 0 6 227 1396 0 0 0 1 6 source 1 1396  
620 0 0 6 228 1287 0 0 0 3 6 source 1 1438  4 dest 1 1438  17 compression_level 1 1291  
621 0 0 6 229 1287 0 0 0 2 6 source 1 1438  4 dest 1 1438  
622 0 0 6 230 1287 0 0 0 3 6 source 1 1458  4 dest 1 1365  17 compression_level 1 1291  
623 0 0 6 231 1287 0 0 0 2 6 source 1 1458  4 dest 1 1365  
624 0 0 6 232 1287 0 0 0 2 6 source 1 1458  4 dest 1 1365  
625 0 0 6 373 1396 0 0 0 5 6 source 1 1396  8 password 1 1396  9 algorithm 1 1396  10 key_length 1 1291  15 iteration_count 1 1291  
626 0 0 6 374 1396 0 0 0 2 6 source 1 1396  8 password 1 1396  
627 0 0 6 375 1287 0 0 0 6 6 source 1 1438  4 dest 1 1438  8 password 1 1396  9 algorithm 1 1396  10 key_length 1 1291  15 iteration_count 1 1291  
628 0 0 6 376 1287 0 0 0 3 6 source 1 1438  4 dest 1 1438  8 password 1 1396  
629 0 0 6 377 1287 0 0 0 6 6 source 1 1458  4 dest 1 1365  8 password 1 1396  9 algorithm 1 1396  10 key_length 1 1291  15 iteration_count 1 1291  
630 0 0 6 378 1287 0 0 0 3 6 source 1 1458  4 dest 1 1365  8 password 1 1396  
631 0 0 6 380 1396 0 0 10 /**
 *
 */ 1 3 err 1 1308  
632 0 0 6 381 1291 0 0 0 0 
633 0 0 6 382 1396 0 0 10 /**
 *
 */ 0 
634 0 0 6 383 1291 0 0 0 0 
635 0 0 6 727 1396 0 0 0 4 8 password 1 1396  4 salt 1 1396  5 iters 1 1291  6 keylen 1 1291  
280
1259 11 CPTA_double 0 2105345 11 CPTA_double 11 CPTA_double 0 0 1260 0 0 0 0 0 0 0 0 0 0

1260 29 ConstPointerToArray< double > 0 141313 29 ConstPointerToArray< double > 29 ConstPointerToArray< double > 0 0 0 1 642 654 0 11 643 644 645 646 647 648 649 650 651 652 653 0 0 1 0 1261 0 0 0 0 0

1261 28 PointerToArrayBase< double > 0 26625 28 PointerToArrayBase< double > 28 PointerToArrayBase< double > 0 0 0 0 641 0 0 0 0 1 0 1262 0 0 0 0 0

1262 49 PointerToBase< ReferenceCountedVector< double > > 0 43009 49 PointerToBase< ReferenceCountedVector< double > > 49 PointerToBase< ReferenceCountedVector< double > > 0 0 0 0 0 0 2 639 640 0 0 1 0 1263 0 0 0 0 0

1263 13 PointerToVoid 0 141313 13 PointerToVoid 13 PointerToVoid 0 0 0 0 638 0 2 636 637 0 0 1 0 1264 0 0 0 0 373
/**
 * This is the non-template part of the base class for PointerTo and
 * ConstPointerTo.  It is necessary so we can keep a pointer to a non-template
 * class within the ReferenceCount object, to implement weak reference
 * pointers--we need to have something to clean up when the ReferenceCount
 * object destructs.
 *
 * This is the base class for PointerToBase<T>.
 */

1264 10 MemoryBase 0 2048 10 MemoryBase 10 MemoryBase 0 0 0 0 0 0 0 0 0 0 0 0 428
/**
 * This class is intended to be the base class of all objects in Panda that
 * might be allocated and deleted via the new and delete operators.  It
 * redefines these operators to provide some memory tracking support.
 *
 * We used to try to override the global operator new and delete methods, but
 * that seems to cause problems when including header files for C++-based
 * system libraries (such as are found on OSX).
 */

1265 10 CPTA_float 0 2105345 10 CPTA_float 10 CPTA_float 0 0 1266 0 0 0 0 0 0 0 0 0 0

1266 28 ConstPointerToArray< float > 0 141313 28 ConstPointerToArray< float > 28 ConstPointerToArray< float > 0 0 0 1 658 670 0 11 659 660 661 662 663 664 665 666 667 668 669 0 0 1 0 1267 0 0 0 0 0

1267 27 PointerToArrayBase< float > 0 26625 27 PointerToArrayBase< float > 27 PointerToArrayBase< float > 0 0 0 0 657 0 0 0 0 1 0 1268 0 0 0 0 0

1268 48 PointerToBase< ReferenceCountedVector< float > > 0 43009 48 PointerToBase< ReferenceCountedVector< float > > 48 PointerToBase< ReferenceCountedVector< float > > 0 0 0 0 0 0 2 655 656 0 0 1 0 1263 0 0 0 0 0

1269 8 CPTA_int 0 2105345 8 CPTA_int 8 CPTA_int 0 0 1270 0 0 0 0 0 0 0 0 0 0

1270 26 ConstPointerToArray< int > 0 141313 26 ConstPointerToArray< int > 26 ConstPointerToArray< int > 0 0 0 1 674 686 0 11 675 676 677 678 679 680 681 682 683 684 685 0 0 1 0 1271 0 0 0 0 0

1271 25 PointerToArrayBase< int > 0 26625 25 PointerToArrayBase< int > 25 PointerToArrayBase< int > 0 0 0 0 673 0 0 0 0 1 0 1272 0 0 0 0 0

1272 46 PointerToBase< ReferenceCountedVector< int > > 0 43009 46 PointerToBase< ReferenceCountedVector< int > > 46 PointerToBase< ReferenceCountedVector< int > > 0 0 0 0 0 0 2 671 672 0 0 1 0 1263 0 0 0 0 0

1273 10 CPTA_uchar 0 2105345 10 CPTA_uchar 10 CPTA_uchar 0 0 1274 0 0 0 0 0 0 0 0 0 0

1274 36 ConstPointerToArray< unsigned char > 0 141313 36 ConstPointerToArray< unsigned char > 36 ConstPointerToArray< unsigned char > 0 0 0 1 690 702 0 11 691 692 693 694 695 696 697 698 699 700 701 0 0 1 0 1275 0 0 0 0 0

1275 35 PointerToArrayBase< unsigned char > 0 26625 35 PointerToArrayBase< unsigned char > 35 PointerToArrayBase< unsigned char > 0 0 0 0 689 0 0 0 0 1 0 1276 0 0 0 0 0

1276 56 PointerToBase< ReferenceCountedVector< unsigned char > > 0 43009 56 PointerToBase< ReferenceCountedVector< unsigned char > > 56 PointerToBase< ReferenceCountedVector< unsigned char > > 0 0 0 0 0 0 2 687 688 0 0 1 0 1263 0 0 0 0 0

1277 10 PTA_double 0 2105345 10 PTA_double 10 PTA_double 0 0 1278 0 0 0 0 0 0 0 0 0 0

1278 24 PointerToArray< double > 0 141313 24 PointerToArray< double > 24 PointerToArray< double > 0 0 0 1 703 722 0 18 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 0 0 1 0 1261 0 0 0 0 0

1279 9 PTA_float 0 2105345 9 PTA_float 9 PTA_float 0 0 1280 0 0 0 0 0 0 0 0 0 0

1280 23 PointerToArray< float > 0 141313 23 PointerToArray< float > 23 PointerToArray< float > 0 0 0 1 723 742 0 18 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 0 0 1 0 1267 0 0 0 0 0

1281 7 PTA_int 0 2105345 7 PTA_int 7 PTA_int 0 0 1282 0 0 0 0 0 0 0 0 0 0

1282 21 PointerToArray< int > 0 141313 21 PointerToArray< int > 21 PointerToArray< int > 0 0 0 1 743 762 0 18 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 0 0 1 0 1271 0 0 0 0 0

1283 9 PTA_uchar 0 2105345 9 PTA_uchar 9 PTA_uchar 0 0 1284 0 0 0 0 0 0 0 0 0 0

1284 31 PointerToArray< unsigned char > 0 141313 31 PointerToArray< unsigned char > 31 PointerToArray< unsigned char > 0 0 0 1 763 782 0 18 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 0 0 1 0 1275 0 0 0 0 0

1285 11 MemoryUsage 0 141313 11 MemoryUsage 11 MemoryUsage 0 0 0 1 803 804 10 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 20 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 0 0 1 0 1286 0 0 0 0 292
/**
 * This class is used strictly for debugging purposes, specifically for
 * tracking memory leaks of reference-counted objects: it keeps a record of
 * every such object currently allocated.
 *
 * When compiled with NDEBUG set, this entire class does nothing and compiles
 * to a stub.
 */

1286 10 MemoryHook 0 2048 10 MemoryHook 10 MemoryHook 0 0 0 0 0 0 0 0 0 0 0 0 641
/**
 * This class provides a wrapper around the various possible malloc schemes
 * Panda might employ.  It also exists to allow the MemoryUsage class in Panda
 * to insert callback hooks to track the size of allocated pointers.
 *
 * The PANDA_MALLOC_* and PANDA_FREE_* macros are defined to vector through
 * through this class (except in production builds) to facilitate that.  Every
 * memory allocation call in Panda should therefore use these macros instead
 * of direct calls to malloc or free.  (C++ new and delete operators may be
 * employed for classes which inherit from MemoryBase; otherwise, use the
 * PANDA_MALLOC macros.)
 */

1287 4 bool 0 8194 4 bool 4 bool 0 4 0 0 0 0 0 0 0 0 0 0 0

1288 6 size_t 0 2105344 11 std::size_t 11 std::size_t 0 0 1289 0 0 0 0 0 0 0 0 0 0

1289 17 unsigned long int 0 8214 17 unsigned long int 17 unsigned long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1290 14 ReferenceCount 0 26625 14 ReferenceCount 14 ReferenceCount 0 0 0 0 807 1 1549 6 808 809 810 811 812 813 0 0 1 3 1264 805 806 0 0 203
/**
 * A base class for all things that want to be reference-counted.
 * ReferenceCount works in conjunction with PointerTo to automatically delete
 * objects when the last pointer to them goes away.
 */

1291 3 int 0 8194 3 int 3 int 0 1 0 0 0 0 0 0 0 0 0 0 0

1292 6 Buffer 0 75777 6 Buffer 6 Buffer 0 0 0 1 815 807 0 1 814 0 0 1 0 1290 0 0 0 0 10
/**
 *
 */

1293 25 PStatCollectorForwardBase 0 75777 25 PStatCollectorForwardBase 25 PStatCollectorForwardBase 0 0 0 0 807 0 1 823 0 0 1 0 1290 0 0 0 0 282
/**
 * This class serves as a cheap forward reference to a PStatCollector, which
 * is defined in the pstatclient module (and is not directly accessible here
 * in the express module).
 *
 * This is subclassed as PStatCollectorForward, which defines the actual
 * functionality.
 */

1294 18 NodeReferenceCount 0 43009 18 NodeReferenceCount 18 NodeReferenceCount 0 0 0 0 0 0 6 824 825 826 827 828 829 0 0 1 0 1290 0 0 0 0 603
/**
 * This class specializes ReferenceCount to add an additional counter, called
 * node_ref_count, for the purposes of counting the number of times the object
 * is referenced by a "node", whatever that may mean in context.
 *
 * The new methods node_ref() and node_unref() automatically increment and
 * decrement the primary reference count as well.  There also exists a
 * NodePointerTo<> class to maintain the node_ref counters automatically.
 *
 * See also CachedTypedWritableReferenceCount, which is similar in principle,
 * as well as NodeCachedReferenceCount, which combines both of these.
 */

1295 8 Datagram 0 75777 8 Datagram 8 Datagram 0 0 0 1 830 0 0 48 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 0 0 1 0 1296 0 0 0 0 565
/**
 * An ordered list of data elements, formatted in memory for transmission over
 * a socket or writing to a data file.
 *
 * Data elements should be added one at a time, in order, to the Datagram.
 * The nature and contents of the data elements are totally up to the user.
 * When a Datagram has been transmitted and received, its data elements may be
 * extracted using a DatagramIterator; it is up to the caller to know the
 * correct type of each data element in order.
 *
 * A Datagram is itself headerless; it is simply a collection of data
 * elements.
 */

1296 11 TypedObject 0 2048 11 TypedObject 11 TypedObject 0 0 0 0 0 0 0 0 0 0 0 0 2508
/**
 * This is an abstract class that all classes which use TypeHandle, and also
 * provide virtual functions to support polymorphism, should inherit from.
 * Each derived class should define get_type(), which should return the
 * specific type of the derived class.  Inheriting from this automatically
 * provides support for is_of_type() and is_exact_type().
 *
 * All classes that inherit directly or indirectly from TypedObject should
 * redefine get_type() and force_init_type(), as shown below.  Some classes
 * that do not inherit from TypedObject may still declare TypeHandles for
 * themselves by defining methods called get_class_type() and init_type().
 * Classes such as these may serve as base classes, but the dynamic type
 * identification system will be limited.  Classes that do not inherit from
 * TypedObject need not define the virtual functions get_type() and
 * force_init_type() (or any other virtual functions).
 *
 * There is a specific layout for defining the overrides from this class.
 * Keeping the definitions formatted just like these examples will allow
 * someone in the future to use a sed (or similar) script to make global
 * changes, if necessary.  Avoid rearranging the braces or the order of the
 * functions unless you're ready to change them in every file all at once.
 *
 * What follows are some examples that can be used in new classes that you
 * create.
 *
 * @par In the class definition (.h file):
 * @code
 * public:
 *   static TypeHandle get_class_type() {
 *     return _type_handle;
 *   }
 *   static void init_type() {
 *     <<<BaseClassOne>>>::init_type();
 *     <<<BaseClassTwo>>>::init_type();
 *     <<<BaseClassN>>>::init_type();
 *     register_type(_type_handle, "<<<ThisClassStringName>>>",
 *                   <<<BaseClassOne>>>::get_class_type(),
 *                   <<<BaseClassTwo>>>::get_class_type(),
 *                   <<<BaseClassN>>>::get_class_type());
 *   }
 *   virtual TypeHandle get_type() const {
 *     return get_class_type();
 *   }
 *   virtual TypeHandle force_init_type() {init_type(); return get_class_type();}
 *
 * private:
 *   static TypeHandle _type_handle;
 * @endcode
 *
 * @par In the class .cxx file:
 * @code
 * TypeHandle <<<ThisClassStringName>>>::_type_handle;
 * @endcode
 *
 * @par In the class config_<<<PackageName>>>.cxx file:
 * @code
 * ConfigureFn(config_<<<PackageName>>>) {
 *   <<<ClassOne>>>::init_type();
 *   <<<ClassTwo>>>::init_type();
 *   <<<ClassN>>>::init_type();
 * }
 * @endcode
 */

1297 17 DatagramGenerator 0 26625 17 DatagramGenerator 17 DatagramGenerator 0 0 0 0 879 0 9 880 881 882 883 884 885 886 887 888 0 0 0 0 0 125
/**
 * This class defines the abstract interace to any source of datagrams,
 * whether it be from a file or from the net.
 */

1298 16 DatagramIterator 0 141313 16 DatagramIterator 16 DatagramIterator 0 0 0 1 889 926 0 36 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 0 0 0 0 0 215
/**
 * A class to retrieve the individual data elements previously stored in a
 * Datagram.  Elements may be retrieved one at a time; it is up to the caller
 * to know the correct type and order of each element.
 */

1299 12 DatagramSink 0 26625 12 DatagramSink 12 DatagramSink 0 0 0 0 927 3 1550 1551 1552 7 928 929 930 931 932 933 934 0 0 0 0 0 135
/**
 * This class defines the abstract interface to sending datagrams to any
 * target, whether it be into a file or across the net
 */

1300 14 Filename const 0 8832 14 Filename const 14 Filename const 0 0 1301 0 0 0 0 0 0 0 0 0 0

1301 8 Filename 0 2048 8 Filename 8 Filename 0 0 0 0 0 0 0 0 0 0 0 0 550
/**
 * The name of a file, such as a texture file or an Egg file.  Stores the full
 * pathname, and includes functions for extracting out the directory prefix
 * part and the file extension and stuff.
 *
 * A Filename is also aware of the mapping between the Unix-like filename
 * convention we use internally, and the local OS's specific filename
 * convention, and it knows how to perform basic OS-specific I/O, like testing
 * for file existence and searching a searchpath, as well as the best way to
 * open an fstream for reading or writing.
 */

1302 21 FileReference const * 0 8576 21 FileReference const * 21 FileReference const * 0 0 1303 0 0 0 0 0 0 0 0 0 0

1303 19 FileReference const 0 8832 19 FileReference const 19 FileReference const 0 0 1304 0 0 0 0 0 0 0 0 0 0

1304 13 FileReference 0 141313 13 FileReference 13 FileReference 0 0 0 1 941 944 0 2 942 943 0 0 1 0 1305 0 0 0 0 149
/**
 * Keeps a reference-counted pointer to a file on disk.  As long as the
 * FileReference is held, someone presumably has a use for this file.
 */

1305 19 TypedReferenceCount 0 141313 19 TypedReferenceCount 19 TypedReferenceCount 0 0 0 0 940 0 1 939 0 0 2 3 1296 935 936 3 1290 937 938 0 0 410
/**
 * A base class for things which need to inherit from both TypedObject and
 * from ReferenceCount.  It's convenient to define this intermediate base
 * class instead of multiply inheriting from the two classes each time they
 * are needed, so that we can sensibly pass around pointers to things which
 * are both TypedObjects and ReferenceCounters.
 *
 * See also TypedObject for detailed instructions.
 */

1306 9 streamoff 0 2105344 14 std::streamoff 14 std::streamoff 0 0 1307 0 0 0 0 0 0 0 0 0 0

1307 13 long long int 0 8226 13 long long int 13 long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1308 13 ErrorUtilCode 0 532481 13 ErrorUtilCode 13 ErrorUtilCode 0 0 0 0 0 0 0 0 0 0 37 16 EU_http_redirect 16 EU_http_redirect 0
7 6 EU_eof 6 EU_eof 0
6 18 EU_network_no_data 18 EU_network_no_data 0
5 12 EU_write_ram 12 EU_write_ram 0
4 8 EU_write 8 EU_write 0
3 5 EU_ok 5 EU_ok 0
2 10 EU_success 10 EU_success 0
1 14 EU_error_abort 14 EU_error_abort 17
// General errors
-1 19 EU_error_file_empty 19 EU_error_file_empty 0
-2 21 EU_error_file_invalid 21 EU_error_file_invalid 0
-3 25 EU_error_invalid_checksum 25 EU_error_invalid_checksum 0
-4 21 EU_error_network_dead 21 EU_error_network_dead 25
// General network errors
-30 28 EU_error_network_unreachable 28 EU_error_network_unreachable 0
-31 29 EU_error_network_disconnected 29 EU_error_network_disconnected 0
-32 24 EU_error_network_timeout 24 EU_error_network_timeout 0
-33 24 EU_error_network_no_data 24 EU_error_network_no_data 0
-34 37 EU_error_network_disconnected_locally 37 EU_error_network_disconnected_locally 23
// Local network errors
-40 32 EU_error_network_buffer_overflow 32 EU_error_network_buffer_overflow 0
-41 36 EU_error_network_disk_quota_exceeded 36 EU_error_network_disk_quota_exceeded 0
-42 41 EU_error_network_remote_host_disconnected 41 EU_error_network_remote_host_disconnected 29
// Remote host network errors
-50 33 EU_error_network_remote_host_down 33 EU_error_network_remote_host_down 0
-51 40 EU_error_network_remote_host_unreachable 40 EU_error_network_remote_host_unreachable 0
-52 38 EU_error_network_remote_host_not_found 38 EU_error_network_remote_host_not_found 0
-53 40 EU_error_network_remote_host_no_response 40 EU_error_network_remote_host_no_response 0
-54 27 EU_error_write_out_of_files 27 EU_error_write_out_of_files 23
// General local errors
-60 28 EU_error_write_out_of_memory 28 EU_error_write_out_of_memory 0
-61 32 EU_error_write_sharing_violation 32 EU_error_write_sharing_violation 0
-62 24 EU_error_write_disk_full 24 EU_error_write_disk_full 0
-63 29 EU_error_write_disk_not_found 29 EU_error_write_disk_not_found 0
-64 36 EU_error_write_disk_sector_not_found 36 EU_error_write_disk_sector_not_found 0
-65 25 EU_error_write_disk_fault 25 EU_error_write_disk_fault 0
-66 26 EU_error_write_file_rename 26 EU_error_write_file_rename 0
-67 28 EU_error_http_server_timeout 28 EU_error_http_server_timeout 14
// HTTP errors
-70 29 EU_error_http_gateway_timeout 29 EU_error_http_gateway_timeout 0
-71 33 EU_error_http_service_unavailable 33 EU_error_http_service_unavailable 0
-72 34 EU_error_http_proxy_authentication 34 EU_error_http_proxy_authentication 0
-73 13 EU_error_zlib 13 EU_error_zlib 14
// Zlib errors
-80 0 0

1309 7 Ramfile 0 141313 7 Ramfile 7 Ramfile 0 0 0 1 955 964 0 8 956 957 958 959 960 961 962 963 0 0 0 0 0 85
/**
 * An in-memory buffer specifically designed for downloading files to memory.
 */

1310 7 HashVal 0 141313 7 HashVal 7 HashVal 0 0 0 1 965 995 0 29 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 0 0 0 0 0 109
/**
 * Stores a 128-bit value that represents the hashed contents (typically MD5)
 * of a file or buffer.
 */

1311 19 MemoryUsagePointers 0 26625 19 MemoryUsagePointers 19 MemoryUsagePointers 0 0 0 1 996 997 0 9 998 999 1000 1001 1002 1003 1004 1005 1006 2 1565 1566 0 0 0 0 785
/**
 * This is a list of pointers returned by a MemoryUsage object in response to
 * some query.
 *
 * Warning: once pointers are stored in a MemoryUsagePointers object, they are
 * reference-counted, and will not be freed until the MemoryUsagePointers
 * object is freed (or clear() is called on the object).  However, they may
 * not even be freed then; pointers may leak once they have been added to this
 * structure.  This is because we don't store enough information in this
 * structure to correctly free the pointers that have been added.  Since this
 * is intended primarily as a debugging tool, this is not a major issue.
 *
 * This class is just a user interface to talk about pointers stored in a
 * MemoryUsage object.  It doesn't even exist when compiled with NDEBUG.
 */

1312 10 ISubStream 0 141313 10 ISubStream 10 ISubStream 0 0 0 1 1007 1010 0 2 1008 1009 0 0 1 0 1313 0 0 0 0 392
/**
 * An istream object that presents a subwindow into another istream.  The
 * first character read from this stream will be the "start" character from
 * the source istream; just before the file pointer reaches the "end"
 * character, eof is returned.
 *
 * The source stream must be one that we can randomly seek within.  The
 * resulting ISubStream will also support arbitrary seeks.
 */

1313 7 istream 0 2048 12 std::istream 12 std::istream 0 0 0 0 0 0 0 0 0 0 0 0 0

1314 10 OSubStream 0 141313 10 OSubStream 10 OSubStream 0 0 0 1 1011 1014 0 2 1012 1013 0 0 1 0 1315 0 0 0 0 391
/**
 * An ostream object that presents a subwindow into another ostream.  The
 * first character written to this stream will be the "start" character in the
 * dest istream; no characters may be written to character "end" or later
 * (unless end is zero).
 *
 * The dest stream must be one that we can randomly seek within.  The
 * resulting OSubStream will also support arbitrary seeks.
 */

1315 7 ostream 0 2048 12 std::ostream 12 std::ostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1316 9 SubStream 0 141313 9 SubStream 9 SubStream 0 0 0 1 1015 1018 0 2 1016 1017 0 0 1 0 1317 0 0 0 0 68
/**
 * Combined ISubStream and OSubStream for bidirectional I/O.
 */

1317 8 iostream 0 2048 13 std::iostream 13 std::iostream 0 0 0 0 0 0 0 0 0 0 0 0 0

1318 9 Multifile 0 75777 9 Multifile 9 Multifile 0 0 0 1 1019 807 1 1553 61 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1 1567 0 1 0 1290 0 0 0 0 47
/**
 * A file that contains a set of files.
 */

1319 6 string 0 2105344 11 std::string 11 std::string 0 0 1320 0 0 0 0 0 0 0 0 0 0

1320 20 basic_string< char > 0 2048 25 std::basic_string< char > 25 std::basic_string< char > 0 0 0 0 0 0 0 0 0 0 0 0 0

1321 7 Namable 0 141313 7 Namable 7 Namable 0 0 0 1 1081 1088 1 1554 6 1082 1083 1084 1085 1086 1087 0 0 1 0 1264 0 0 0 0 125
/**
 * A base class for all things which can have a name.  The name is either
 * empty or nonempty, but it is never NULL.
 */

1322 12 string const 0 8832 17 std::string const 17 std::string const 0 0 1319 0 0 0 0 0 0 0 0 0 0

1323 14 OpenSSLWrapper 0 43009 14 OpenSSLWrapper 14 OpenSSLWrapper 0 0 0 0 0 0 8 1089 1090 1091 1092 1093 1094 1095 1096 0 0 0 0 0 205
/**
 * Provides an interface wrapper around the OpenSSL library, to ensure that
 * the library is properly initialized in the application, and to provide some
 * hooks into global OpenSSL context data.
 */

1324 11 SubfileInfo 0 141313 11 SubfileInfo 11 SubfileInfo 0 0 0 1 1097 1105 0 7 1098 1099 1100 1101 1102 1103 1104 0 0 0 0 0 200
/**
 * This class records a particular byte sub-range within an existing file on
 * disk.  Generally, the filename is understood as a physical file on disk,
 * and not to be looked up via the vfs.
 */

1325 11 VirtualFile 0 141313 11 VirtualFile 11 VirtualFile 0 0 0 0 1135 0 29 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 0 0 1 0 1305 0 0 0 0 91
/**
 * The abstract base class for a file or directory within the
 * VirtualFileSystem.
 */

1326 20 VirtualFileComposite 0 141313 20 VirtualFileComposite 20 VirtualFileComposite 0 0 0 0 1137 0 1 1136 0 0 1 0 1325 0 0 0 0 223
/**
 * A composite directory within the VirtualFileSystem: this maps to more than
 * one directory on different mount points.  The resulting directory appears
 * to be the union of all the individual simple directories.
 */

1327 16 VirtualFileMount 0 75777 16 VirtualFileMount 16 VirtualFileMount 0 0 0 0 940 0 6 1138 1139 1140 1141 1142 1143 0 0 1 0 1305 0 0 0 0 159
/**
 * The abstract base class for a mount definition used within a
 * VirtualFileSystem.  Normally users don't need to monkey with this class
 * directly.
 */

1328 25 VirtualFileMountMultifile 0 75777 25 VirtualFileMountMultifile 25 VirtualFileMountMultifile 0 0 0 1 1144 940 0 2 1145 1146 0 0 1 0 1327 0 0 0 0 66
/**
 * Maps a Multifile's contents into the VirtualFileSystem.
 */

1329 23 VirtualFileMountRamdisk 0 141313 23 VirtualFileMountRamdisk 23 VirtualFileMountRamdisk 0 0 0 1 1147 1149 0 1 1148 0 0 1 0 1327 0 0 0 0 384
/**
 * Simulates an actual directory on disk with in-memory storage.  This is
 * useful mainly for performing high level functions that expect disk I/O
 * without actually writing files to disk.  Naturally, there are significant
 * limits to the size of the files that may be written with this system; and
 * "files" written here are not automatically persistent between sessions.
 */

1330 22 VirtualFileMountSystem 0 141313 22 VirtualFileMountSystem 22 VirtualFileMountSystem 0 0 0 1 1150 1153 0 2 1151 1152 0 0 1 0 1327 0 0 0 0 66
/**
 * Maps an actual OS directory into the VirtualFileSystem.
 */

1331 17 VirtualFileSimple 0 141313 17 VirtualFileSimple 17 VirtualFileSimple 0 0 0 0 1157 0 3 1154 1155 1156 0 0 1 0 1325 0 0 0 0 183
/**
 * A simple file or directory within the VirtualFileSystem: this maps to
 * exactly one file on one mount point.  Most directories, and all regular
 * files, are of this kind.
 */

1332 13 TemporaryFile 0 75777 13 TemporaryFile 13 TemporaryFile 0 0 0 1 1158 944 0 1 1159 0 0 1 0 1304 0 0 0 0 206
/**
 * This is a special kind of FileReference class that automatically deletes
 * the file in question when it is deleted.  It is not responsible for
 * creating, opening, or closing the file, however.
 */

1333 17 IDecompressStream 0 141313 17 IDecompressStream 17 IDecompressStream 0 0 0 1 1160 1163 0 2 1161 1162 0 0 1 0 1313 0 0 0 0 323
/**
 * An input stream object that uses zlib to decompress (inflate) the input
 * from another source stream on-the-fly.
 *
 * Attach an IDecompressStream to an existing istream that provides compressed
 * data, and read the corresponding uncompressed data from the
 * IDecompressStream.
 *
 * Seeking is not supported.
 */

1334 15 OCompressStream 0 141313 15 OCompressStream 15 OCompressStream 0 0 0 1 1164 1167 0 2 1165 1166 0 0 1 0 1315 0 0 0 0 311
/**
 * An input stream object that uses zlib to compress (deflate) data to another
 * destination stream on-the-fly.
 *
 * Attach an OCompressStream to an existing ostream that will accept
 * compressed data, and write your uncompressed source data to the
 * OCompressStream.
 *
 * Seeking is not supported.
 */

1335 15 VirtualFileList 0 75777 15 VirtualFileList 15 VirtualFileList 0 0 0 1 1174 807 0 6 1168 1169 1170 1171 1172 1173 1 1568 0 1 0 1290 0 0 0 0 80
/**
 * A list of VirtualFiles, as returned by VirtualFile::scan_directory().
 */

1336 17 VirtualFileSystem 0 26625 17 VirtualFileSystem 17 VirtualFileSystem 0 0 0 1 1175 1176 1 1555 37 1177 1178 1179 1180 1181 1182 1183 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1 1569 0 0 0 1 1337 352
/**
 * A hierarchy of directories and files that appears to be one continuous file
 * system, even though the files may originate from several different sources
 * that may not be related to the actual OS's file system.
 *
 * For instance, a VirtualFileSystem can transparently mount one or more
 * Multifiles as their own subdirectory hierarchies.
 */

1337 10 MountFlags 0 794624 29 VirtualFileSystem::MountFlags 29 VirtualFileSystem::MountFlags 1336 0 0 0 0 0 0 0 0 0 1 12 MF_read_only 31 VirtualFileSystem::MF_read_only 0
2 0 0

1338 29 PointerTo< VirtualFileMount > 0 141313 29 PointerTo< VirtualFileMount > 29 PointerTo< VirtualFileMount > 0 0 0 1 1186 1191 0 4 1187 1188 1189 1190 0 0 1 0 1339 0 0 0 0 0

1339 33 PointerToBase< VirtualFileMount > 0 43009 33 PointerToBase< VirtualFileMount > 33 PointerToBase< VirtualFileMount > 0 0 0 0 0 0 2 1184 1185 0 0 1 0 1263 0 0 0 0 0

1340 9 TrueClock 0 43009 9 TrueClock 9 TrueClock 0 0 0 0 0 4 1556 1557 1558 1559 6 1222 1223 1224 1225 1226 1227 0 0 0 0 0 467
/**
 * An interface to whatever real-time clock we might have available in the
 * current environment.  There is only one TrueClock in existence, and it
 * constructs itself.
 *
 * The TrueClock returns elapsed real time in seconds since some undefined
 * epoch.  Since it is not defined at what time precisely the clock indicates
 * zero, this value can only be meaningfully used to measure elapsed time, by
 * sampling it at two different times and subtracting.
 */

1341 6 double 0 8194 6 double 6 double 0 3 0 0 0 0 0 0 0 0 0 0 0

1342 9 Patchfile 0 26625 9 Patchfile 9 Patchfile 0 0 0 1 1228 1229 5 1560 1561 1562 1563 1564 14 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 0 0 0 0 0 10
/**
 *
 */

1343 11 PN_stdfloat 0 2105344 11 PN_stdfloat 11 PN_stdfloat 0 0 1344 0 0 0 0 0 0 0 0 0 0

1344 5 float 0 8194 5 float 5 float 0 2 0 0 0 0 0 0 0 0 0 0 0

1345 13 HashVal const 0 8832 13 HashVal const 13 HashVal const 0 0 1310 0 0 0 0 0 0 0 0 0 0

1346 12 ProfileTimer 0 26625 12 ProfileTimer 12 ProfileTimer 0 0 0 1 1245 1246 0 9 1247 1248 1249 1250 1251 1252 1253 1254 1255 0 0 0 0 0 713
/*
    ProfileTimer

    HowTo:
      Create a ProfileTimer and hold onto it.
      Call init() whenever you like (the timer doesn't
        start yet).
      Call on() to start the timer.
      While the timer is on, call mark() at each point of interest,
        in the code you are timing.
      You can turn the timer off() and on() to skip things you
        don't want to time.
      When your timing is finished, call printTo() to see the
        results (e.g. myTimer.printTo(cerr)).

    Notes:
      You should be able to time things down to the millisecond
      well enough, but if you call on() and off() within micro-
      seconds of each other, I don't think you'll get very good
      results.
*/

1347 17 WeakPointerToVoid 0 141313 17 WeakPointerToVoid 17 WeakPointerToVoid 0 0 0 0 1258 0 2 1256 1257 0 0 1 0 1263 0 0 0 0 152
/**
 * This is the specialization of PointerToVoid for weak pointers.  It needs an
 * additional flag to indicate that the pointer has been deleted.
 */

1348 12 PTA_stdfloat 0 2105345 12 PTA_stdfloat 12 PTA_stdfloat 0 0 1279 0 0 0 0 0 0 0 0 0 0

1349 13 CPTA_stdfloat 0 2105345 13 CPTA_stdfloat 13 CPTA_stdfloat 0 0 1265 0 0 0 0 0 0 0 0 0 0

1350 37 ConstPointerToArray< double > const * 0 8576 37 ConstPointerToArray< double > const * 37 ConstPointerToArray< double > const * 0 0 1351 0 0 0 0 0 0 0 0 0 0

1351 35 ConstPointerToArray< double > const 0 8832 35 ConstPointerToArray< double > const 35 ConstPointerToArray< double > const 0 0 1260 0 0 0 0 0 0 0 0 0 0

1352 31 ConstPointerToArray< double > * 0 8576 31 ConstPointerToArray< double > * 31 ConstPointerToArray< double > * 0 0 1260 0 0 0 0 0 0 0 0 0 0

1353 32 PointerToArray< double > const * 0 8576 32 PointerToArray< double > const * 32 PointerToArray< double > const * 0 0 1354 0 0 0 0 0 0 0 0 0 0

1354 30 PointerToArray< double > const 0 8832 30 PointerToArray< double > const 30 PointerToArray< double > const 0 0 1278 0 0 0 0 0 0 0 0 0 0

1355 4 void 0 8194 4 void 4 void 0 6 0 0 0 0 0 0 0 0 0 0 0

1356 10 PyObject * 0 8576 10 PyObject * 10 PyObject * 0 0 1357 0 0 0 0 0 0 0 0 0 0

1357 8 PyObject 0 2105344 8 PyObject 8 PyObject 0 0 1358 0 0 0 0 0 0 0 0 0 0

1358 7 _object 0 1024 7 _object 7 _object 0 0 0 0 0 0 0 0 0 0 0 0 0

1359 11 Py_buffer * 0 8576 11 Py_buffer * 11 Py_buffer * 0 0 1360 0 0 0 0 0 0 0 0 0 0

1360 9 Py_buffer 0 2105344 9 Py_buffer 9 Py_buffer 0 0 1361 0 0 0 0 0 0 0 0 0 0

1361 10 bufferinfo 0 1024 10 bufferinfo 10 bufferinfo 0 0 0 0 0 0 0 0 0 0 0 0 0

1362 51 PointerToBase< ReferenceCountedVector< double > > * 0 8576 51 PointerToBase< ReferenceCountedVector< double > > * 51 PointerToBase< ReferenceCountedVector< double > > * 0 0 1262 0 0 0 0 0 0 0 0 0 0

1363 57 PointerToBase< ReferenceCountedVector< double > > const * 0 8576 57 PointerToBase< ReferenceCountedVector< double > > const * 57 PointerToBase< ReferenceCountedVector< double > > const * 0 0 1364 0 0 0 0 0 0 0 0 0 0

1364 55 PointerToBase< ReferenceCountedVector< double > > const 0 8832 55 PointerToBase< ReferenceCountedVector< double > > const 55 PointerToBase< ReferenceCountedVector< double > > const 0 0 1262 0 0 0 0 0 0 0 0 0 0

1365 9 ostream * 0 8576 14 std::ostream * 14 std::ostream * 0 0 1315 0 0 0 0 0 0 0 0 0 0

1366 21 PointerToVoid const * 0 8576 21 PointerToVoid const * 21 PointerToVoid const * 0 0 1367 0 0 0 0 0 0 0 0 0 0

1367 19 PointerToVoid const 0 8832 19 PointerToVoid const 19 PointerToVoid const 0 0 1263 0 0 0 0 0 0 0 0 0 0

1368 36 ConstPointerToArray< float > const * 0 8576 36 ConstPointerToArray< float > const * 36 ConstPointerToArray< float > const * 0 0 1369 0 0 0 0 0 0 0 0 0 0

1369 34 ConstPointerToArray< float > const 0 8832 34 ConstPointerToArray< float > const 34 ConstPointerToArray< float > const 0 0 1266 0 0 0 0 0 0 0 0 0 0

1370 30 ConstPointerToArray< float > * 0 8576 30 ConstPointerToArray< float > * 30 ConstPointerToArray< float > * 0 0 1266 0 0 0 0 0 0 0 0 0 0

1371 31 PointerToArray< float > const * 0 8576 31 PointerToArray< float > const * 31 PointerToArray< float > const * 0 0 1372 0 0 0 0 0 0 0 0 0 0

1372 29 PointerToArray< float > const 0 8832 29 PointerToArray< float > const 29 PointerToArray< float > const 0 0 1280 0 0 0 0 0 0 0 0 0 0

1373 50 PointerToBase< ReferenceCountedVector< float > > * 0 8576 50 PointerToBase< ReferenceCountedVector< float > > * 50 PointerToBase< ReferenceCountedVector< float > > * 0 0 1268 0 0 0 0 0 0 0 0 0 0

1374 56 PointerToBase< ReferenceCountedVector< float > > const * 0 8576 56 PointerToBase< ReferenceCountedVector< float > > const * 56 PointerToBase< ReferenceCountedVector< float > > const * 0 0 1375 0 0 0 0 0 0 0 0 0 0

1375 54 PointerToBase< ReferenceCountedVector< float > > const 0 8832 54 PointerToBase< ReferenceCountedVector< float > > const 54 PointerToBase< ReferenceCountedVector< float > > const 0 0 1268 0 0 0 0 0 0 0 0 0 0

1376 34 ConstPointerToArray< int > const * 0 8576 34 ConstPointerToArray< int > const * 34 ConstPointerToArray< int > const * 0 0 1377 0 0 0 0 0 0 0 0 0 0

1377 32 ConstPointerToArray< int > const 0 8832 32 ConstPointerToArray< int > const 32 ConstPointerToArray< int > const 0 0 1270 0 0 0 0 0 0 0 0 0 0

1378 28 ConstPointerToArray< int > * 0 8576 28 ConstPointerToArray< int > * 28 ConstPointerToArray< int > * 0 0 1270 0 0 0 0 0 0 0 0 0 0

1379 29 PointerToArray< int > const * 0 8576 29 PointerToArray< int > const * 29 PointerToArray< int > const * 0 0 1380 0 0 0 0 0 0 0 0 0 0

1380 27 PointerToArray< int > const 0 8832 27 PointerToArray< int > const 27 PointerToArray< int > const 0 0 1282 0 0 0 0 0 0 0 0 0 0

1381 48 PointerToBase< ReferenceCountedVector< int > > * 0 8576 48 PointerToBase< ReferenceCountedVector< int > > * 48 PointerToBase< ReferenceCountedVector< int > > * 0 0 1272 0 0 0 0 0 0 0 0 0 0

1382 54 PointerToBase< ReferenceCountedVector< int > > const * 0 8576 54 PointerToBase< ReferenceCountedVector< int > > const * 54 PointerToBase< ReferenceCountedVector< int > > const * 0 0 1383 0 0 0 0 0 0 0 0 0 0

1383 52 PointerToBase< ReferenceCountedVector< int > > const 0 8832 52 PointerToBase< ReferenceCountedVector< int > > const 52 PointerToBase< ReferenceCountedVector< int > > const 0 0 1272 0 0 0 0 0 0 0 0 0 0

1384 44 ConstPointerToArray< unsigned char > const * 0 8576 44 ConstPointerToArray< unsigned char > const * 44 ConstPointerToArray< unsigned char > const * 0 0 1385 0 0 0 0 0 0 0 0 0 0

1385 42 ConstPointerToArray< unsigned char > const 0 8832 42 ConstPointerToArray< unsigned char > const 42 ConstPointerToArray< unsigned char > const 0 0 1274 0 0 0 0 0 0 0 0 0 0

1386 38 ConstPointerToArray< unsigned char > * 0 8576 38 ConstPointerToArray< unsigned char > * 38 ConstPointerToArray< unsigned char > * 0 0 1274 0 0 0 0 0 0 0 0 0 0

1387 39 PointerToArray< unsigned char > const * 0 8576 39 PointerToArray< unsigned char > const * 39 PointerToArray< unsigned char > const * 0 0 1388 0 0 0 0 0 0 0 0 0 0

1388 37 PointerToArray< unsigned char > const 0 8832 37 PointerToArray< unsigned char > const 37 PointerToArray< unsigned char > const 0 0 1284 0 0 0 0 0 0 0 0 0 0

1389 13 unsigned char 0 8198 13 unsigned char 13 unsigned char 0 5 0 0 0 0 0 0 0 0 0 0 0

1390 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 0 8576 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 58 PointerToBase< ReferenceCountedVector< unsigned char > > * 0 0 1276 0 0 0 0 0 0 0 0 0 0

1391 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 0 8576 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 64 PointerToBase< ReferenceCountedVector< unsigned char > > const * 0 0 1392 0 0 0 0 0 0 0 0 0 0

1392 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 0 8832 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 62 PointerToBase< ReferenceCountedVector< unsigned char > > const 0 0 1276 0 0 0 0 0 0 0 0 0 0

1393 26 PointerToArray< double > * 0 8576 26 PointerToArray< double > * 26 PointerToArray< double > * 0 0 1278 0 0 0 0 0 0 0 0 0 0

1394 12 TypeHandle * 0 8576 12 TypeHandle * 12 TypeHandle * 0 0 1395 0 0 0 0 0 0 0 0 0 0

1395 10 TypeHandle 0 16779264 10 TypeHandle 10 TypeHandle 0 0 0 0 0 0 0 0 0 0 0 0 732
/**
 * TypeHandle is the identifier used to differentiate C++ class types.  Any
 * C++ classes that inherit from some base class, and must be differentiated
 * at run time, should store a static TypeHandle object that can be queried
 * through a static member function named get_class_type().  Most of the time,
 * it is also desirable to inherit from TypedObject, which provides some
 * virtual functions to return the TypeHandle for a particular instance.
 *
 * At its essence, a TypeHandle is simply a unique identifier that is assigned
 * by the TypeRegistry.  The TypeRegistry stores a tree of TypeHandles, so
 * that ancestry of a particular type may be queried, and the type name may be
 * retrieved for run-time display.
 */

1396 13 atomic string 0 2 13 atomic string 13 atomic string 0 7 0 0 0 0 0 0 0 0 0 0 0

1397 25 PointerToArray< float > * 0 8576 25 PointerToArray< float > * 25 PointerToArray< float > * 0 0 1280 0 0 0 0 0 0 0 0 0 0

1398 23 PointerToArray< int > * 0 8576 23 PointerToArray< int > * 23 PointerToArray< int > * 0 0 1282 0 0 0 0 0 0 0 0 0 0

1399 33 PointerToArray< unsigned char > * 0 8576 33 PointerToArray< unsigned char > * 33 PointerToArray< unsigned char > * 0 0 1284 0 0 0 0 0 0 0 0 0 0

1400 19 MemoryUsage const * 0 8576 19 MemoryUsage const * 19 MemoryUsage const * 0 0 1401 0 0 0 0 0 0 0 0 0 0

1401 17 MemoryUsage const 0 8832 17 MemoryUsage const 17 MemoryUsage const 0 0 1285 0 0 0 0 0 0 0 0 0 0

1402 13 MemoryUsage * 0 8576 13 MemoryUsage * 13 MemoryUsage * 0 0 1285 0 0 0 0 0 0 0 0 0 0

1403 21 MemoryUsagePointers * 0 8576 21 MemoryUsagePointers * 21 MemoryUsagePointers * 0 0 1311 0 0 0 0 0 0 0 0 0 0

1404 22 ReferenceCount const * 0 8576 22 ReferenceCount const * 22 ReferenceCount const * 0 0 1405 0 0 0 0 0 0 0 0 0 0

1405 20 ReferenceCount const 0 8832 20 ReferenceCount const 20 ReferenceCount const 0 0 1290 0 0 0 0 0 0 0 0 0 0

1406 16 ReferenceCount * 0 8576 16 ReferenceCount * 16 ReferenceCount * 0 0 1290 0 0 0 0 0 0 0 0 0 0

1407 12 MemoryBase * 0 8576 12 MemoryBase * 12 MemoryBase * 0 0 1264 0 0 0 0 0 0 0 0 0 0

1408 14 Buffer const * 0 8576 14 Buffer const * 14 Buffer const * 0 0 1409 0 0 0 0 0 0 0 0 0 0

1409 12 Buffer const 0 8832 12 Buffer const 12 Buffer const 0 0 1292 0 0 0 0 0 0 0 0 0 0

1410 8 Buffer * 0 8576 8 Buffer * 8 Buffer * 0 0 1292 0 0 0 0 0 0 0 0 0 0

1411 27 PStatCollectorForwardBase * 0 8576 27 PStatCollectorForwardBase * 27 PStatCollectorForwardBase * 0 0 1293 0 0 0 0 0 0 0 0 0 0

1412 26 NodeReferenceCount const * 0 8576 26 NodeReferenceCount const * 26 NodeReferenceCount const * 0 0 1413 0 0 0 0 0 0 0 0 0 0

1413 24 NodeReferenceCount const 0 8832 24 NodeReferenceCount const 24 NodeReferenceCount const 0 0 1294 0 0 0 0 0 0 0 0 0 0

1414 10 Datagram * 0 8576 10 Datagram * 10 Datagram * 0 0 1295 0 0 0 0 0 0 0 0 0 0

1415 16 Datagram const * 0 8576 16 Datagram const * 16 Datagram const * 0 0 1416 0 0 0 0 0 0 0 0 0 0

1416 14 Datagram const 0 8832 14 Datagram const 14 Datagram const 0 0 1295 0 0 0 0 0 0 0 0 0 0

1417 12 vector_uchar 0 2105344 12 vector_uchar 12 vector_uchar 0 0 1418 0 0 0 0 0 0 0 0 0 0

1418 24 pvector< unsigned char > 0 2048 24 pvector< unsigned char > 24 pvector< unsigned char > 0 0 0 0 0 0 0 0 0 0 0 0 0

1419 12 unsigned int 0 8198 12 unsigned int 12 unsigned int 0 1 0 0 0 0 0 0 0 0 0 0 0

1420 6 int8_t 0 2105344 6 int8_t 6 int8_t 0 0 1421 0 0 0 0 0 0 0 0 0 0

1421 11 signed char 0 8202 11 signed char 11 signed char 0 5 0 0 0 0 0 0 0 0 0 0 0

1422 7 uint8_t 0 2105344 7 uint8_t 7 uint8_t 0 0 1389 0 0 0 0 0 0 0 0 0 0

1423 7 int16_t 0 2105344 7 int16_t 7 int16_t 0 0 1424 0 0 0 0 0 0 0 0 0 0

1424 9 short int 0 8258 9 short int 9 short int 0 1 0 0 0 0 0 0 0 0 0 0 0

1425 7 int32_t 0 2105344 7 int32_t 7 int32_t 0 0 1291 0 0 0 0 0 0 0 0 0 0

1426 7 int64_t 0 2105344 7 int64_t 7 int64_t 0 0 1307 0 0 0 0 0 0 0 0 0 0

1427 8 uint16_t 0 2105344 8 uint16_t 8 uint16_t 0 0 1428 0 0 0 0 0 0 0 0 0 0

1428 18 unsigned short int 0 8262 18 unsigned short int 18 unsigned short int 0 1 0 0 0 0 0 0 0 0 0 0 0

1429 8 uint32_t 0 2105344 8 uint32_t 8 uint32_t 0 0 1419 0 0 0 0 0 0 0 0 0 0

1430 8 uint64_t 0 2105344 8 uint64_t 8 uint64_t 0 0 1431 0 0 0 0 0 0 0 0 0 0

1431 22 unsigned long long int 0 8230 22 unsigned long long int 22 unsigned long long int 0 8 0 0 0 0 0 0 0 0 0 0 0

1432 10 PN_float32 0 2105344 10 PN_float32 10 PN_float32 0 0 1344 0 0 0 0 0 0 0 0 0 0

1433 10 PN_float64 0 2105344 10 PN_float64 10 PN_float64 0 0 1341 0 0 0 0 0 0 0 0 0 0

1434 11 PTA_uchar * 0 8576 11 PTA_uchar * 11 PTA_uchar * 0 0 1283 0 0 0 0 0 0 0 0 0 0

1435 12 CPTA_uchar * 0 8576 12 CPTA_uchar * 12 CPTA_uchar * 0 0 1273 0 0 0 0 0 0 0 0 0 0

1436 19 DatagramGenerator * 0 8576 19 DatagramGenerator * 19 DatagramGenerator * 0 0 1297 0 0 0 0 0 0 0 0 0 0

1437 13 SubfileInfo * 0 8576 13 SubfileInfo * 13 SubfileInfo * 0 0 1324 0 0 0 0 0 0 0 0 0 0

1438 16 Filename const * 0 8576 16 Filename const * 16 Filename const * 0 0 1300 0 0 0 0 0 0 0 0 0 0

1439 25 DatagramGenerator const * 0 8576 25 DatagramGenerator const * 25 DatagramGenerator const * 0 0 1440 0 0 0 0 0 0 0 0 0 0

1440 23 DatagramGenerator const 0 8832 23 DatagramGenerator const 23 DatagramGenerator const 0 0 1297 0 0 0 0 0 0 0 0 0 0

1441 6 time_t 0 2105344 6 time_t 6 time_t 0 0 1442 0 0 0 0 0 0 0 0 0 0

1442 8 long int 0 8210 8 long int 8 long int 0 1 0 0 0 0 0 0 0 0 0 0 0

1443 13 VirtualFile * 0 8576 13 VirtualFile * 13 VirtualFile * 0 0 1325 0 0 0 0 0 0 0 0 0 0

1444 18 DatagramIterator * 0 8576 18 DatagramIterator * 18 DatagramIterator * 0 0 1298 0 0 0 0 0 0 0 0 0 0

1445 24 DatagramIterator const * 0 8576 24 DatagramIterator const * 24 DatagramIterator const * 0 0 1446 0 0 0 0 0 0 0 0 0 0

1446 22 DatagramIterator const 0 8832 22 DatagramIterator const 22 DatagramIterator const 0 0 1298 0 0 0 0 0 0 0 0 0 0

1447 14 DatagramSink * 0 8576 14 DatagramSink * 14 DatagramSink * 0 0 1299 0 0 0 0 0 0 0 0 0 0

1448 19 SubfileInfo const * 0 8576 19 SubfileInfo const * 19 SubfileInfo const * 0 0 1449 0 0 0 0 0 0 0 0 0 0

1449 17 SubfileInfo const 0 8832 17 SubfileInfo const 17 SubfileInfo const 0 0 1324 0 0 0 0 0 0 0 0 0 0

1450 15 FileReference * 0 8576 15 FileReference * 15 FileReference * 0 0 1304 0 0 0 0 0 0 0 0 0 0

1451 21 TypedReferenceCount * 0 8576 21 TypedReferenceCount * 21 TypedReferenceCount * 0 0 1305 0 0 0 0 0 0 0 0 0 0

1452 13 TypedObject * 0 8576 13 TypedObject * 13 TypedObject * 0 0 1296 0 0 0 0 0 0 0 0 0 0

1453 9 Ramfile * 0 8576 9 Ramfile * 9 Ramfile * 0 0 1309 0 0 0 0 0 0 0 0 0 0

1454 15 Ramfile const * 0 8576 15 Ramfile const * 15 Ramfile const * 0 0 1455 0 0 0 0 0 0 0 0 0 0

1455 13 Ramfile const 0 8832 13 Ramfile const 13 Ramfile const 0 0 1309 0 0 0 0 0 0 0 0 0 0

1456 9 HashVal * 0 8576 9 HashVal * 9 HashVal * 0 0 1310 0 0 0 0 0 0 0 0 0 0

1457 15 HashVal const * 0 8576 15 HashVal const * 15 HashVal const * 0 0 1345 0 0 0 0 0 0 0 0 0 0

1458 9 istream * 0 8576 14 std::istream * 14 std::istream * 0 0 1313 0 0 0 0 0 0 0 0 0 0

1459 14 StreamWriter * 0 8576 14 StreamWriter * 14 StreamWriter * 0 0 1460 0 0 0 0 0 0 0 0 0 0

1460 12 StreamWriter 0 2048 12 StreamWriter 12 StreamWriter 0 0 0 0 0 0 0 0 0 0 0 0 300
/**
 * A StreamWriter object is used to write sequential binary data directly to
 * an ostream.  Its interface is very similar to Datagram by design; it's
 * primarily intended as a convenience to eliminate the overhead of writing
 * bytes to a Datagram and then writing the Datagram to a stream.
 */

1461 14 StreamReader * 0 8576 14 StreamReader * 14 StreamReader * 0 0 1462 0 0 0 0 0 0 0 0 0 0

1462 12 StreamReader 0 2048 12 StreamReader 12 StreamReader 0 0 0 0 0 0 0 0 0 0 0 0 158
/**
 * A class to read sequential binary data directly from an istream.  Its
 * interface is similar to DatagramIterator by design; see also StreamWriter.
 */

1463 27 MemoryUsagePointers const * 0 8576 27 MemoryUsagePointers const * 27 MemoryUsagePointers const * 0 0 1464 0 0 0 0 0 0 0 0 0 0

1464 25 MemoryUsagePointers const 0 8832 25 MemoryUsagePointers const 25 MemoryUsagePointers const 0 0 1311 0 0 0 0 0 0 0 0 0 0

1465 12 ISubStream * 0 8576 12 ISubStream * 12 ISubStream * 0 0 1312 0 0 0 0 0 0 0 0 0 0

1466 16 IStreamWrapper * 0 8576 16 IStreamWrapper * 16 IStreamWrapper * 0 0 1467 0 0 0 0 0 0 0 0 0 0

1467 14 IStreamWrapper 0 2048 14 IStreamWrapper 14 IStreamWrapper 0 0 0 0 0 0 0 0 0 0 0 0 168
/**
 * This class provides a locking wrapper around an arbitrary istream pointer.
 * A thread may use this class to perform an atomic seek/read/gcount
 * operation.
 */

1468 12 OSubStream * 0 8576 12 OSubStream * 12 OSubStream * 0 0 1314 0 0 0 0 0 0 0 0 0 0

1469 16 OStreamWrapper * 0 8576 16 OStreamWrapper * 16 OStreamWrapper * 0 0 1470 0 0 0 0 0 0 0 0 0 0

1470 14 OStreamWrapper 0 2048 14 OStreamWrapper 14 OStreamWrapper 0 0 0 0 0 0 0 0 0 0 0 0 159
/**
 * This class provides a locking wrapper around an arbitrary ostream pointer.
 * A thread may use this class to perform an atomic seek/write operation.
 */

1471 11 SubStream * 0 8576 11 SubStream * 11 SubStream * 0 0 1316 0 0 0 0 0 0 0 0 0 0

1472 15 StreamWrapper * 0 8576 15 StreamWrapper * 15 StreamWrapper * 0 0 1473 0 0 0 0 0 0 0 0 0 0

1473 13 StreamWrapper 0 2048 13 StreamWrapper 13 StreamWrapper 0 0 0 0 0 0 0 0 0 0 0 0 97
/**
 * This class provides a locking wrapper around a combination ostream/istream
 * pointer.
 */

1474 11 Multifile * 0 8576 11 Multifile * 11 Multifile * 0 0 1318 0 0 0 0 0 0 0 0 0 0

1475 10 iostream * 0 8576 15 std::iostream * 15 std::iostream * 0 0 1317 0 0 0 0 0 0 0 0 0 0

1476 17 Multifile const * 0 8576 17 Multifile const * 17 Multifile const * 0 0 1477 0 0 0 0 0 0 0 0 0 0

1477 15 Multifile const 0 8832 15 Multifile const 15 Multifile const 0 0 1318 0 0 0 0 0 0 0 0 0 0

1478 15 vector_string * 0 8576 15 vector_string * 15 vector_string * 0 0 1479 0 0 0 0 0 0 0 0 0 0

1479 13 vector_string 0 2105344 13 vector_string 13 vector_string 0 0 1480 0 0 0 0 0 0 0 0 0 0

1480 17 pvector< string > 0 2048 22 pvector< std::string > 22 pvector< std::string > 0 0 0 0 0 0 0 0 0 0 0 0 0

1481 15 Namable const * 0 8576 15 Namable const * 15 Namable const * 0 0 1482 0 0 0 0 0 0 0 0 0 0

1482 13 Namable const 0 8832 13 Namable const 13 Namable const 0 0 1321 0 0 0 0 0 0 0 0 0 0

1483 9 Namable * 0 8576 9 Namable * 9 Namable * 0 0 1321 0 0 0 0 0 0 0 0 0 0

1484 16 OpenSSLWrapper * 0 8576 16 OpenSSLWrapper * 16 OpenSSLWrapper * 0 0 1323 0 0 0 0 0 0 0 0 0 0

1485 12 X509_STORE * 0 8576 12 X509_STORE * 12 X509_STORE * 0 0 1486 0 0 0 0 0 0 0 0 0 0

1486 10 X509_STORE 0 2105344 10 X509_STORE 10 X509_STORE 0 0 1487 0 0 0 0 0 0 0 0 0 0

1487 13 x509_store_st 0 1024 13 x509_store_st 13 x509_store_st 0 0 0 0 0 0 0 0 0 0 0 0 0

1488 10 streamsize 0 2105344 15 std::streamsize 15 std::streamsize 0 0 1489 0 0 0 0 0 0 0 0 0 0

1489 9 ptrdiff_t 0 2105344 14 std::ptrdiff_t 14 std::ptrdiff_t 0 0 1442 0 0 0 0 0 0 0 0 0 0

1490 19 VirtualFile const * 0 8576 19 VirtualFile const * 19 VirtualFile const * 0 0 1491 0 0 0 0 0 0 0 0 0 0

1491 17 VirtualFile const 0 8832 17 VirtualFile const 17 VirtualFile const 0 0 1325 0 0 0 0 0 0 0 0 0 0

1492 19 VirtualFileSystem * 0 8576 19 VirtualFileSystem * 19 VirtualFileSystem * 0 0 1336 0 0 0 0 0 0 0 0 0 0

1493 10 Filename * 0 8576 10 Filename * 10 Filename * 0 0 1301 0 0 0 0 0 0 0 0 0 0

1494 17 VirtualFileList * 0 8576 17 VirtualFileList * 17 VirtualFileList * 0 0 1335 0 0 0 0 0 0 0 0 0 0

1495 24 VirtualFileMount const * 0 8576 24 VirtualFileMount const * 24 VirtualFileMount const * 0 0 1496 0 0 0 0 0 0 0 0 0 0

1496 22 VirtualFileMount const 0 8832 22 VirtualFileMount const 22 VirtualFileMount const 0 0 1327 0 0 0 0 0 0 0 0 0 0

1497 27 VirtualFileMountMultifile * 0 8576 27 VirtualFileMountMultifile * 27 VirtualFileMountMultifile * 0 0 1328 0 0 0 0 0 0 0 0 0 0

1498 33 VirtualFileMountMultifile const * 0 8576 33 VirtualFileMountMultifile const * 33 VirtualFileMountMultifile const * 0 0 1499 0 0 0 0 0 0 0 0 0 0

1499 31 VirtualFileMountMultifile const 0 8832 31 VirtualFileMountMultifile const 31 VirtualFileMountMultifile const 0 0 1328 0 0 0 0 0 0 0 0 0 0

1500 25 VirtualFileMountRamdisk * 0 8576 25 VirtualFileMountRamdisk * 25 VirtualFileMountRamdisk * 0 0 1329 0 0 0 0 0 0 0 0 0 0

1501 24 VirtualFileMountSystem * 0 8576 24 VirtualFileMountSystem * 24 VirtualFileMountSystem * 0 0 1330 0 0 0 0 0 0 0 0 0 0

1502 30 VirtualFileMountSystem const * 0 8576 30 VirtualFileMountSystem const * 30 VirtualFileMountSystem const * 0 0 1503 0 0 0 0 0 0 0 0 0 0

1503 28 VirtualFileMountSystem const 0 8832 28 VirtualFileMountSystem const 28 VirtualFileMountSystem const 0 0 1330 0 0 0 0 0 0 0 0 0 0

1504 25 VirtualFileSimple const * 0 8576 25 VirtualFileSimple const * 25 VirtualFileSimple const * 0 0 1505 0 0 0 0 0 0 0 0 0 0

1505 23 VirtualFileSimple const 0 8832 23 VirtualFileSimple const 23 VirtualFileSimple const 0 0 1331 0 0 0 0 0 0 0 0 0 0

1506 18 VirtualFileMount * 0 8576 18 VirtualFileMount * 18 VirtualFileMount * 0 0 1327 0 0 0 0 0 0 0 0 0 0

1507 15 TemporaryFile * 0 8576 15 TemporaryFile * 15 TemporaryFile * 0 0 1332 0 0 0 0 0 0 0 0 0 0

1508 21 TemporaryFile const * 0 8576 21 TemporaryFile const * 21 TemporaryFile const * 0 0 1509 0 0 0 0 0 0 0 0 0 0

1509 19 TemporaryFile const 0 8832 19 TemporaryFile const 19 TemporaryFile const 0 0 1332 0 0 0 0 0 0 0 0 0 0

1510 19 IDecompressStream * 0 8576 19 IDecompressStream * 19 IDecompressStream * 0 0 1333 0 0 0 0 0 0 0 0 0 0

1511 17 OCompressStream * 0 8576 17 OCompressStream * 17 OCompressStream * 0 0 1334 0 0 0 0 0 0 0 0 0 0

1512 23 VirtualFileList const * 0 8576 23 VirtualFileList const * 23 VirtualFileList const * 0 0 1513 0 0 0 0 0 0 0 0 0 0

1513 21 VirtualFileList const 0 8832 21 VirtualFileList const 21 VirtualFileList const 0 0 1335 0 0 0 0 0 0 0 0 0 0

1514 25 VirtualFileSystem const * 0 8576 25 VirtualFileSystem const * 25 VirtualFileSystem const * 0 0 1515 0 0 0 0 0 0 0 0 0 0

1515 23 VirtualFileSystem const 0 8832 23 VirtualFileSystem const 23 VirtualFileSystem const 0 0 1336 0 0 0 0 0 0 0 0 0 0

1516 19 DSearchPath const * 0 8576 19 DSearchPath const * 19 DSearchPath const * 0 0 1517 0 0 0 0 0 0 0 0 0 0

1517 17 DSearchPath const 0 8832 17 DSearchPath const 17 DSearchPath const 0 0 1518 0 0 0 0 0 0 0 0 0 0

1518 11 DSearchPath 0 2048 11 DSearchPath 11 DSearchPath 0 0 0 0 0 0 0 0 0 0 0 0 304
/**
 * This class stores a list of directories that can be searched, in order, to
 * locate a particular file.  It is normally constructed by passing it a
 * traditional searchpath-style string, e.g.  a list of directory names
 * delimited by spaces or colons, but it can also be built up explicitly.
 */

1519 9 Results * 0 8576 22 DSearchPath::Results * 22 DSearchPath::Results * 0 0 1520 0 0 0 0 0 0 0 0 0 0

1520 7 Results 0 264192 20 DSearchPath::Results 20 DSearchPath::Results 1518 0 0 0 0 0 0 0 0 0 0 0 0

1521 31 PointerTo< VirtualFileMount > * 0 8576 31 PointerTo< VirtualFileMount > * 31 PointerTo< VirtualFileMount > * 0 0 1338 0 0 0 0 0 0 0 0 0 0

1522 17 decltype(nullptr) 0 8194 17 decltype(nullptr) 17 decltype(nullptr) 0 9 0 0 0 0 0 0 0 0 0 0 0

1523 37 PointerTo< VirtualFileMount > const * 0 8576 37 PointerTo< VirtualFileMount > const * 37 PointerTo< VirtualFileMount > const * 0 0 1524 0 0 0 0 0 0 0 0 0 0

1524 35 PointerTo< VirtualFileMount > const 0 8832 35 PointerTo< VirtualFileMount > const 35 PointerTo< VirtualFileMount > const 0 0 1338 0 0 0 0 0 0 0 0 0 0

1525 35 PointerToBase< VirtualFileMount > * 0 8576 35 PointerToBase< VirtualFileMount > * 35 PointerToBase< VirtualFileMount > * 0 0 1339 0 0 0 0 0 0 0 0 0 0

1526 41 PointerToBase< VirtualFileMount > const * 0 8576 41 PointerToBase< VirtualFileMount > const * 41 PointerToBase< VirtualFileMount > const * 0 0 1527 0 0 0 0 0 0 0 0 0 0

1527 39 PointerToBase< VirtualFileMount > const 0 8832 39 PointerToBase< VirtualFileMount > const 39 PointerToBase< VirtualFileMount > const 0 0 1339 0 0 0 0 0 0 0 0 0 0

1528 11 TrueClock * 0 8576 11 TrueClock * 11 TrueClock * 0 0 1340 0 0 0 0 0 0 0 0 0 0

1529 17 TrueClock const * 0 8576 17 TrueClock const * 17 TrueClock const * 0 0 1530 0 0 0 0 0 0 0 0 0 0

1530 15 TrueClock const 0 8832 15 TrueClock const 15 TrueClock const 0 0 1340 0 0 0 0 0 0 0 0 0 0

1531 11 Patchfile * 0 8576 11 Patchfile * 11 Patchfile * 0 0 1342 0 0 0 0 0 0 0 0 0 0

1532 17 Patchfile const * 0 8576 17 Patchfile const * 17 Patchfile const * 0 0 1533 0 0 0 0 0 0 0 0 0 0

1533 15 Patchfile const 0 8832 15 Patchfile const 15 Patchfile const 0 0 1342 0 0 0 0 0 0 0 0 0 0

1534 20 ProfileTimer const * 0 8576 20 ProfileTimer const * 20 ProfileTimer const * 0 0 1535 0 0 0 0 0 0 0 0 0 0

1535 18 ProfileTimer const 0 8832 18 ProfileTimer const 18 ProfileTimer const 0 0 1346 0 0 0 0 0 0 0 0 0 0

1536 14 ProfileTimer * 0 8576 14 ProfileTimer * 14 ProfileTimer * 0 0 1346 0 0 0 0 0 0 0 0 0 0

1537 25 WeakPointerToVoid const * 0 8576 25 WeakPointerToVoid const * 25 WeakPointerToVoid const * 0 0 1538 0 0 0 0 0 0 0 0 0 0

1538 23 WeakPointerToVoid const 0 8832 23 WeakPointerToVoid const 23 WeakPointerToVoid const 0 0 1347 0 0 0 0 0 0 0 0 0 0

0
26
1539 8 tracking 0 2 1287 783 0 0 0 0 0 0 0 21 MemoryUsage::tracking 0

1540 8 counting 0 2 1287 784 0 0 0 0 0 0 0 21 MemoryUsage::counting 0

1541 16 current_cpp_size 0 2 1288 785 0 0 0 0 0 0 0 29 MemoryUsage::current_cpp_size 0

1542 14 total_cpp_size 0 2 1288 786 0 0 0 0 0 0 0 27 MemoryUsage::total_cpp_size 0

1543 22 panda_heap_single_size 0 2 1288 787 0 0 0 0 0 0 0 35 MemoryUsage::panda_heap_single_size 0

1544 21 panda_heap_array_size 0 2 1288 788 0 0 0 0 0 0 0 34 MemoryUsage::panda_heap_array_size 0

1545 19 panda_heap_overhead 0 2 1288 789 0 0 0 0 0 0 0 32 MemoryUsage::panda_heap_overhead 0

1546 15 panda_mmap_size 0 2 1288 790 0 0 0 0 0 0 0 28 MemoryUsage::panda_mmap_size 0

1547 13 external_size 0 2 1288 791 0 0 0 0 0 0 0 26 MemoryUsage::external_size 0

1548 10 total_size 0 2 1288 792 0 0 0 0 0 0 0 23 MemoryUsage::total_size 0

1549 9 ref_count 0 2 1291 808 0 0 0 0 0 0 0 25 ReferenceCount::ref_count 31
// The current reference count.

1550 8 filename 0 2 1300 932 0 0 0 0 0 0 0 22 DatagramSink::filename 0

1551 4 file 0 2 1302 933 0 0 0 0 0 0 0 18 DatagramSink::file 0

1552 8 file_pos 0 2 1306 934 0 0 0 0 0 0 0 22 DatagramSink::file_pos 0

1553 12 magic_number 0 2 1319 1078 0 0 0 0 0 0 0 23 Multifile::magic_number 0

1554 4 name 0 6 1322 1085 1082 0 0 0 0 0 0 13 Namable::name 0

1555 6 mounts 0 66 1338 1183 0 0 0 0 1182 0 0 25 VirtualFileSystem::mounts 0

1556 9 long_time 0 2 1341 1222 0 0 0 0 0 0 0 20 TrueClock::long_time 203
// get_long_time() returns the most accurate timer we have over a long
// interval.  It may not be very precise for measuring short intervals, but
// it should not drift substantially over the long haul.

1557 10 short_time 0 2 1341 1223 0 0 0 0 0 0 0 21 TrueClock::short_time 206
// get_short_time() returns the most precise timer we have over a short
// interval.  It may tend to drift over the long haul, but it should have
// lots of digits to measure short intervals very precisely.

1558 14 short_raw_time 0 2 1341 1224 0 0 0 0 0 0 0 25 TrueClock::short_raw_time 144
// get_short_raw_time() is like get_short_time(), but does not apply any
// corrections (e.g.  paranoid-clock) to the result returned by the OS.

1559 11 error_count 0 2 1291 1225 0 0 0 0 0 0 0 22 TrueClock::error_count 0

1560 8 progress 0 2 1343 1235 0 0 0 0 0 0 0 19 Patchfile::progress 0

1561 15 allow_multifile 0 6 1287 1237 1236 0 0 0 0 0 0 26 Patchfile::allow_multifile 0

1562 16 footprint_length 0 6 1291 1239 1238 0 0 0 0 0 0 27 Patchfile::footprint_length 0

1563 11 source_hash 0 10 1345 1242 0 1241 0 0 0 0 0 22 Patchfile::source_hash 0

1564 11 result_hash 0 2 1345 1243 0 0 0 0 0 0 0 22 Patchfile::result_hash 0

5
1565 12 get_pointers 0 998 999 33 MemoryUsagePointers::get_pointers 0

1566 18 get_typed_pointers 0 998 1000 39 MemoryUsagePointers::get_typed_pointers 0

1567 17 get_subfile_names 0 1056 1061 28 Multifile::get_subfile_names 0

1568 9 get_files 0 1168 1169 26 VirtualFileList::get_files 0

1569 10 get_mounts 0 1182 1183 29 VirtualFileSystem::get_mounts 0

